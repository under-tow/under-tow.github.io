<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>undertow &#39;s blog</title>
  
  
  <link href="http://blog.under2.cn/atom.xml" rel="self"/>
  
  <link href="http://blog.under2.cn/"/>
  <updated>2023-03-21T10:18:30.751Z</updated>
  <id>http://blog.under2.cn/</id>
  
  <author>
    <name>undertow</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RabbitMQ集群搭建</title>
    <link href="http://blog.under2.cn/2023/03/25/Rabbit%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <id>http://blog.under2.cn/2023/03/25/Rabbit%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</id>
    <published>2023-03-25T15:06:43.879Z</published>
    <updated>2023-03-21T10:18:30.751Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ集群搭建"><a href="#RabbitMQ集群搭建" class="headerlink" title="RabbitMQ集群搭建"></a>RabbitMQ集群搭建</h1><p>RabbitMQ部署模式有三种</p><ul><li>单机模式</li><li>普通集群</li><li>镜像集群（普通集群基础上配置策略）</li></ul><p>使用docker搭建</p><blockquote><p>docker run 参数解释<br><code>--hostname</code>， 指定容器的主机名<br><code>--name</code>， 指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字<br><code>-p</code>， 指定容器暴露的端口<br><code>-v, --volume=[]</code>， 给容器挂载存储卷，挂载到容器的某个目录<br><code>-e, --env=[]</code>， 指定环境变量，容器中可以使用该环境变量</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取最新镜像</span></span><br><span class="line">docker pull rabbitmq</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动三个容器 这里的RABBITMQ_ERLANG_COOKIE必须一致（erlang集群要求）</span></span><br><span class="line">docker run -d --hostname rabbitmq01 --name rabbitmq01 -p 15672:15672 -p 5672:5672  -e RABBITMQ_ERLANG_COOKIE=<span class="string">&#x27;rabbitmqCookie&#x27;</span> rabbitmq</span><br><span class="line"></span><br><span class="line">docker run -d --hostname rabbitmq02 --name rabbitmq02 -p 15673:15672 -p 5673:5672  -e RABBITMQ_ERLANG_COOKIE=<span class="string">&#x27;rabbitmqCookie&#x27;</span> --<span class="built_in">link</span> rabbitmq01 rabbitmq</span><br><span class="line"></span><br><span class="line">docker run -d --hostname rabbitmq03 --name rabbitmq03 -p 15674:15672 -p 5674:5672  -e RABBITMQ_ERLANG_COOKIE=<span class="string">&#x27;rabbitmqCookie&#x27;</span> --<span class="built_in">link</span> rabbitmq01 --<span class="built_in">link</span> rabbitmq02  rabbitmq</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入rabbitmq01 容器开启管理插件 (ctrl + P + Q 退出) </span></span><br><span class="line">docker <span class="built_in">exec</span> -it rabbitmq01 bash</span><br><span class="line"><span class="built_in">cd</span> plugins</span><br><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入rabbitmq02 容器开启管理插件 (ctrl + P + Q 退出) </span></span><br><span class="line">docker <span class="built_in">exec</span> -it rabbitmq02 bash</span><br><span class="line"><span class="built_in">cd</span> plugins</span><br><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入rabbitmq03 容器开启管理插件 (ctrl + P + Q 退出) </span></span><br><span class="line">docker <span class="built_in">exec</span> -it rabbitmq03 bash</span><br><span class="line"><span class="built_in">cd</span> plugins</span><br><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;RabbitMQ集群搭建&quot;&gt;&lt;a href=&quot;#RabbitMQ集群搭建&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ集群搭建&quot;&gt;&lt;/a&gt;RabbitMQ集群搭建&lt;/h1&gt;&lt;p&gt;RabbitMQ部署模式有三种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单</summary>
      
    
    
    
    
    <category term="MQ" scheme="http://blog.under2.cn/tags/MQ/"/>
    
  </entry>
  
  <entry>
    <title>Netty源码编译</title>
    <link href="http://blog.under2.cn/2023/03/25/Netty/"/>
    <id>http://blog.under2.cn/2023/03/25/Netty/</id>
    <published>2023-03-25T15:06:43.870Z</published>
    <updated>2023-03-17T07:29:59.037Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h2><p>源码编译</p><ul><li><p>设置JDK1.8</p></li><li><pre><code>cd commonmvn clean compile  -D&quot;checkstyle.skip&quot;=true</code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Netty&quot;&gt;&lt;a href=&quot;#Netty&quot; class=&quot;headerlink&quot; title=&quot;Netty&quot;&gt;&lt;/a&gt;Netty&lt;/h2&gt;&lt;p&gt;源码编译&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;设置JDK1.8&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;cd </summary>
      
    
    
    
    
    <category term="NIO" scheme="http://blog.under2.cn/tags/NIO/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://blog.under2.cn/2023/03/25/hello-world/"/>
    <id>http://blog.under2.cn/2023/03/25/hello-world/</id>
    <published>2023-03-25T15:06:00.102Z</published>
    <updated>2023-03-25T15:03:31.197Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>PostgreSQL安装</title>
    <link href="http://blog.under2.cn/2022/04/28/PostgreSQL%E5%AE%89%E8%A3%85-postgresql%E5%AE%89%E8%A3%85/"/>
    <id>http://blog.under2.cn/2022/04/28/PostgreSQL%E5%AE%89%E8%A3%85-postgresql%E5%AE%89%E8%A3%85/</id>
    <published>2022-04-28T06:56:53.469Z</published>
    <updated>2022-09-22T14:46:08.726Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PostgreSQL的安装"><a href="#PostgreSQL的安装" class="headerlink" title="PostgreSQL的安装"></a>PostgreSQL的安装</h1><ol><li><a href="https://www.enterprisedb.com/downloads/postgres-postgresql-downloads">官网下载地址</a>，根据对应的版本和操作系统点击下载即可</li></ol><p><img src="https://hopestation.top/upload/2022/04/postgres-ini-01-c2654fc687e845b1b25719e51c62f6f9.png" alt="postgres-ini-01"></p><ol start="2"><li>点击下载后，会下载对应的文件并跳转至如下页面，参照安装介绍进行安装。（基本一路默认即可，数据库初始密码可设置成：postgres）</li></ol><p><img src="https://hopestation.top/upload/2022/04/postgres-ini-022-6013129a58ad4170b771684d5ce97773.png" alt="postgres-ini-022"></p><ol start="3"><li>安装的最后一步，可以取消勾选直接finsh</li></ol><p><img src="https://hopestation.top/upload/2022/04/postgres-ini-03-83372864b86342199639c6b3f301a03e.png" alt="postgres-ini-03"></p><p>4.查找pgadmin4进入可视化界面，sqlshell使用命令行直接操作数据库。（也可使用dbeaver、navicat等工具连接PostgreSQL）</p><p><img src="https://hopestation.top/upload/2022/04/postgres-ini-04-fa08273b4b7b43cc96d6785c6faeb426.png" alt="postgres-ini-04"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PostgreSQL的安装&quot;&gt;&lt;a href=&quot;#PostgreSQL的安装&quot; class=&quot;headerlink&quot; title=&quot;PostgreSQL的安装&quot;&gt;&lt;/a&gt;PostgreSQL的安装&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www</summary>
      
    
    
    
    <category term="数据库" scheme="http://blog.under2.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="PostgreSQL" scheme="http://blog.under2.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/PostgreSQL/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud整合Dubbo</title>
    <link href="http://blog.under2.cn/2021/11/29/SpringCloud%E6%95%B4%E5%90%88Dubbo-springcloud%E6%95%B4%E5%90%88dubbo/"/>
    <id>http://blog.under2.cn/2021/11/29/SpringCloud%E6%95%B4%E5%90%88Dubbo-springcloud%E6%95%B4%E5%90%88dubbo/</id>
    <published>2021-11-28T16:04:15.527Z</published>
    <updated>2022-09-22T14:47:18.544Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Dubbo远程调用"><a href="#Dubbo远程调用" class="headerlink" title="Dubbo远程调用"></a>Dubbo远程调用</h2><blockquote><p><a href="https://github.com/alibaba/spring-cloud-alibaba/tree/master/spring-cloud-alibaba-examples/spring-cloud-alibaba-dubbo-examples">官网参考文档</a> | <a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-examples/spring-cloud-alibaba-dubbo-examples/README_CN.md">官网参考项目</a> | <a href="https://hopestation.top/categories/dubbo-zk">Dubbo+ZK文档</a></p></blockquote><h4 id="三个步骤"><a href="#三个步骤" class="headerlink" title="三个步骤"></a>三个步骤</h4><ol><li>编写Interface接口</li><li>提供者实现Interface接口</li><li>消费者调用Interface接口</li></ol><h4 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h4><p>项目中我们可以把<code>编写Interface接口</code>这个步骤抽离成了一个单独的模块，然后提供者、消费者引入此目录。这个单独模块叫<code>dubbo-api模块</code></p><ol><li>POM</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            我这里为了使用DubboService\DubboRefrence注解，所以故意引入了2.7.7版本。</span></span><br><span class="line"><span class="comment">            而没有使用 ubbo Spring Cloud Starter 因为目前这个依赖最高支持 2.7.6</span></span><br><span class="line"><span class="comment">            旧版本需要使用与Spring同名称的Service注解，不太合适。新版已经弃用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  为了将Dubbo接口，注册进入Nacos来进行注册与发现。也可以使用ZK  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-registry-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">scan:</span></span><br><span class="line">    <span class="comment"># dubbo 服务扫描基准包</span></span><br><span class="line">    <span class="attr">base-packages:</span> <span class="string">top.hopestation.service</span></span><br><span class="line">  <span class="attr">protocol:</span></span><br><span class="line">    <span class="comment"># dubbo 协议</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo</span></span><br><span class="line">    <span class="comment"># dubbo 协议端口（ -1 表示自增端口，从 20880 开始）</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="comment"># 挂载到 Spring Cloud 注册中心 此处需要dubbo-registry-nacos依赖包支持</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">nacos://127.0.0.1:8848</span></span><br><span class="line"><span class="comment"># 配置了启动时暂不扫描接口，好像失效了，暂时没查出原因</span></span><br><span class="line">    <span class="attr">check:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">subscribed-services:</span> <span class="string">xx-user;</span> <span class="string">xx-store</span></span><br></pre></td></tr></table></figure></li><li><p>启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增加此注解</span></span><br><span class="line"><span class="meta">@EnableDubbo</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyUserApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DictUserApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>api项目中增加接口，对应此步骤<code>1.编写Interface接口</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserServiceRemote</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户ID查询用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title function_">findUserById</span><span class="params">(String userId)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>提供者增加接口实现类,对应此步骤<code>2.提供者实现Interface接口</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DubboService</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceRemoteImpl</span> <span class="keyword">implements</span> <span class="title class_">UserServiceRemote</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">findUserById</span><span class="params">(String userId)</span> &#123;</span><br><span class="line">        <span class="comment">// init user</span></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>消费者调用接口，对应此步骤<code>3.消费者调用Interface接口</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/store&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StoreController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DubboReference</span></span><br><span class="line">    <span class="keyword">private</span> UserServiceRemote userServiceRemote;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟查询词典、用户数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findStoreAndUser&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findStoreAndUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// userServiceRemote.findUserById 为Dubbo远程调用</span></span><br><span class="line">        Map&lt;String, Object&gt; userObj = userServiceRemote.findUserById(<span class="string">&quot;1234&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Store is testStore,And User is &quot;</span> + userObj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>启动项目,访问路径：<br><a href="http://localhost:8899/store/findStoreAndUser">http://localhost:8899/store/findStoreAndUser</a> </p><p>出现以下结果则为Dubbo远程调用成功。<br><img src="https://hopestation.top/upload/2021/11/dubbo-test-3955c958a4394db69ca072a6a0054038.png" alt="dubbo-test"></p><ol start="2"><li><p>同时Nacos的服务列表也会出现两个服务，实际上是Dubbo的接口</p></li><li><p>建议Debug调试DubboService\DubboRefrence接口处，来观察情况</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Dubbo远程调用&quot;&gt;&lt;a href=&quot;#Dubbo远程调用&quot; class=&quot;headerlink&quot; title=&quot;Dubbo远程调用&quot;&gt;&lt;/a&gt;Dubbo远程调用&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/a</summary>
      
    
    
    
    <category term="SpringCloud" scheme="http://blog.under2.cn/categories/SpringCloud/"/>
    
    
    <category term="Dubbo" scheme="http://blog.under2.cn/tags/Dubbo/"/>
    
  </entry>
  
  <entry>
    <title>Nginx + SSL证书 配置HTTPS</title>
    <link href="http://blog.under2.cn/2021/05/17/Nginx%20+%20SSL%E8%AF%81%E4%B9%A6%20%E9%85%8D%E7%BD%AEHTTPS-nginxssl%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AEhttps/"/>
    <id>http://blog.under2.cn/2021/05/17/Nginx%20+%20SSL%E8%AF%81%E4%B9%A6%20%E9%85%8D%E7%BD%AEHTTPS-nginxssl%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AEhttps/</id>
    <published>2021-05-17T09:30:54.976Z</published>
    <updated>2022-09-22T14:45:53.667Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Nginx-SSL证书-配置HTTPS"><a href="#Nginx-SSL证书-配置HTTPS" class="headerlink" title="Nginx + SSL证书 配置HTTPS"></a>Nginx + SSL证书 配置HTTPS</h2><h2 id="1-阿里云申请免费的SSL"><a href="#1-阿里云申请免费的SSL" class="headerlink" title="1 阿里云申请免费的SSL"></a>1 阿里云申请免费的SSL</h2><ol><li>控制台搜索“ssl”，进入ssl证书页面</li></ol><p><img src="https://hopestation.top/upload/2021/05/image-20210517151855426-be264cc12a814bd68a5573fbb4ffa279.png" alt="image-20210517151855426"></p><p><img src="https://hopestation.top/upload/2021/05/image-20210517151646888-a4891893dc054641bf9982fdfaedad68.png" alt="image-20210517151646888"></p><ol start="2"><li>按步骤提示进行即可，我用的是域名解析的验证方式</li><li>下载证书</li></ol><p><img src="https://hopestation.top/upload/2021/05/image-20210517152235338-8fea4c765b6a4bb290c2388fbbcec7ff.png" alt="image-20210517152235338"></p><h2 id="2-配置Nginx"><a href="#2-配置Nginx" class="headerlink" title="2 配置Nginx"></a>2 配置Nginx</h2><ol><li><p>将下载好的文件放在nginx/conf/cert目录下</p></li><li><p>修改nginx配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#http 转 https</span></span><br><span class="line"><span class="string">server</span> &#123;</span><br><span class="line">    <span class="string">listen</span> <span class="number">80</span><span class="string">;</span></span><br><span class="line">    <span class="string">server_name</span> <span class="string">hopestation.top</span> <span class="string">www.hopestation.top;</span></span><br><span class="line">     <span class="string">rewrite</span> <span class="string">^(.*)</span> <span class="string">https://$server_name</span> <span class="string">permanent;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">server</span> &#123;</span><br><span class="line">    <span class="string">listen</span> <span class="number">443</span> <span class="string">ssl;</span></span><br><span class="line">    <span class="string">server_name</span> <span class="string">hopestation.top</span> <span class="string">www.hopestation.top;</span></span><br><span class="line">    <span class="comment">#SSL证书</span></span><br><span class="line">    <span class="string">ssl_certificate</span> <span class="string">cert/5649438_hopestation.top.pem;</span></span><br><span class="line">    <span class="string">ssl_certificate_key</span> <span class="string">cert/5649438_hopestation.top.key;</span></span><br><span class="line">   </span><br><span class="line">   <span class="string">ssl_session_timeout</span> <span class="string">5m;</span></span><br><span class="line">    <span class="string">ssl_ciphers</span> <span class="string">ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span></span><br><span class="line">    <span class="string">ssl_protocols</span> <span class="string">TLSv1</span> <span class="string">TLSv1.1</span> <span class="string">TLSv1.2;</span></span><br><span class="line">    <span class="string">ssl_prefer_server_ciphers</span> <span class="string">on;</span></span><br><span class="line">    <span class="string">location</span> <span class="string">/</span> &#123;</span><br><span class="line">        <span class="string">proxy_set_header</span> <span class="string">HOST</span> <span class="string">$host;</span></span><br><span class="line">        <span class="string">proxy_set_header</span> <span class="string">X-Forwarded-Proto</span> <span class="string">$scheme;</span></span><br><span class="line">        <span class="string">proxy_set_header</span> <span class="string">X-Real-IP</span> <span class="string">$remote_addr;</span></span><br><span class="line">        <span class="string">proxy_set_header</span> <span class="string">X-Forwarded-For</span> <span class="string">$proxy_add_x_forwarded_for;</span></span><br><span class="line">        <span class="string">proxy_pass</span> <span class="string">http://ip:端口/;</span>  <span class="comment">#请求转发到</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>让配置文件生效、重启nginx</p></li></ol><blockquote><p>注：需放行 443端口</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Nginx-SSL证书-配置HTTPS&quot;&gt;&lt;a href=&quot;#Nginx-SSL证书-配置HTTPS&quot; class=&quot;headerlink&quot; title=&quot;Nginx + SSL证书 配置HTTPS&quot;&gt;&lt;/a&gt;Nginx + SSL证书 配置HTTPS&lt;/h2&gt;&lt;</summary>
      
    
    
    
    <category term="随笔" scheme="http://blog.under2.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="HTTPS" scheme="http://blog.under2.cn/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>Kafka之简单的生产、消费 （三）</title>
    <link href="http://blog.under2.cn/2021/04/27/Kafka%E4%B9%8B%E7%AE%80%E5%8D%95%E7%9A%84%E7%94%9F%E4%BA%A7%E3%80%81%E6%B6%88%E8%B4%B9%20%EF%BC%88%E4%B8%89%EF%BC%89-kafka%E4%B9%8B%E7%AE%80%E5%8D%95%E7%9A%84%E7%94%9F%E4%BA%A7%E6%B6%88%E8%B4%B9%E4%B8%89/"/>
    <id>http://blog.under2.cn/2021/04/27/Kafka%E4%B9%8B%E7%AE%80%E5%8D%95%E7%9A%84%E7%94%9F%E4%BA%A7%E3%80%81%E6%B6%88%E8%B4%B9%20%EF%BC%88%E4%B8%89%EF%BC%89-kafka%E4%B9%8B%E7%AE%80%E5%8D%95%E7%9A%84%E7%94%9F%E4%BA%A7%E6%B6%88%E8%B4%B9%E4%B8%89/</id>
    <published>2021-04-27T15:54:43.469Z</published>
    <updated>2022-09-22T14:45:09.014Z</updated>
    
    <content type="html"><![CDATA[<p>目录<br>[TOC]</p><h2 id="1-利用Kafka提供的命令测试"><a href="#1-利用Kafka提供的命令测试" class="headerlink" title="1 利用Kafka提供的命令测试"></a>1 利用Kafka提供的命令测试</h2><h3 id="1-1-创建主题"><a href="#1-1-创建主题" class="headerlink" title="1.1 创建主题"></a>1.1 创建主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#由于之前没有创建Kafka集群这里，先把副本和分区设置为1了</span></span><br><span class="line">[root@hopestation kafka_2.13-2.8.0]<span class="comment"># bin/kafka-topics.sh --zookeeper localhost:2181/kafka --create --topic topic-demo --replication-factor 1 --partitions 1</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>–zookeeper</td><td>指定了Kafka所连接的Zookeeper服务地址</td></tr><tr><td>–create</td><td>创建主题的命令</td></tr><tr><td>–topic</td><td>指定了所要创建主题的名称</td></tr><tr><td>–replication-factor</td><td>指定了副本银子</td></tr><tr><td>–partitions</td><td>指定了分区个数</td></tr></tbody></table><h3 id="1-2-消费者"><a href="#1-2-消费者" class="headerlink" title="1.2 消费者"></a>1.2 消费者</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#参数描述</span></span><br><span class="line"><span class="comment">#--bootstrap-server指定了连接的Kafka集群地址</span></span><br><span class="line"><span class="comment">#--topic指定了消费者订阅的主题</span></span><br><span class="line">[root@hopestation kafka_2.13-2.8.0]<span class="comment"># bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic topic-demo</span></span><br><span class="line"><span class="comment">#监听topic-demo主题，等待生产消息</span></span><br></pre></td></tr></table></figure><h3 id="1-3-生产者"><a href="#1-3-生产者" class="headerlink" title="1.3 生产者"></a>1.3 生产者</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#上一个消费者窗口不要动，打开一个新的Shell创建生产者</span></span><br><span class="line"><span class="comment">#参数描述</span></span><br><span class="line"><span class="comment">#--broker-list 指定了连接的Kafka集群地址</span></span><br><span class="line"><span class="comment">#--topic指定了消费者订阅的主题</span></span><br><span class="line">[root@hopestation kafka_2.13-2.8.0]<span class="comment"># bin/kafka-console-producer.sh --broker-list localhost:9092 --topic topic-demo</span></span><br><span class="line">&gt;hello,kafka</span><br><span class="line">&gt;NICE</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h3 id="1-4-测试"><a href="#1-4-测试" class="headerlink" title="1.4 测试"></a>1.4 测试</h3><p>然后就会发现消费者窗口变成了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@hopestation kafka_2.13-2.8.0]<span class="comment"># bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic topic-demo</span></span><br><span class="line">hello,kafka</span><br><span class="line">NICE</span><br><span class="line"><span class="comment">#说明消费成功</span></span><br></pre></td></tr></table></figure><h2 id="2-Java客户端测试"><a href="#2-Java客户端测试" class="headerlink" title="2 Java客户端测试"></a>2 Java客户端测试</h2><p>使用本地Java程序连接服务器kafka进行简单消费</p><ul><li><p>创建普通的Java程序即可</p></li><li><p>POM</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;kafka-clients&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-1-生产者"><a href="#2-1-生产者" class="headerlink" title="2.1 生产者"></a>2.1 生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hopestation.simplekafka;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.KafkaProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者客户端</span></span><br><span class="line"><span class="comment"> * Created by HopeStation on 2021/4/27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerFastStart</span> &#123;</span><br><span class="line">    <span class="comment">//brokerList = 你的Kafka服务器IP:9092</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">brokerList</span> <span class="operator">=</span> <span class="string">&quot;yourHostIp:9092&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">topic</span> <span class="operator">=</span> <span class="string">&quot;topic-demo&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.put(<span class="string">&quot;key.serializer&quot;</span>,<span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;value.serializer&quot;</span>,<span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;bootstrap.servers&quot;</span>,brokerList);</span><br><span class="line">        <span class="comment">//配置生产者客户端参数并创建KafkaProducer实例</span></span><br><span class="line">        KafkaProducer&lt;String,String&gt; producer = <span class="keyword">new</span> <span class="title class_">KafkaProducer</span>&lt;&gt;(properties);</span><br><span class="line">        <span class="comment">//构建所需要发送的消息</span></span><br><span class="line">        ProducerRecord&lt;String,String&gt; record = <span class="keyword">new</span> <span class="title class_">ProducerRecord</span>&lt;&gt;(topic,<span class="string">&quot;hello,Kafka!&quot;</span>);</span><br><span class="line">        <span class="comment">//发送消息</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            producer.send(record);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭生产者客户端实例</span></span><br><span class="line">        producer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-消费者"><a href="#2-2-消费者" class="headerlink" title="2.2 消费者"></a>2.2 消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hopestation.simplekafka;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者客户端</span></span><br><span class="line"><span class="comment"> * Created by HopeStation on 2021/4/27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerFastStart</span> &#123;</span><br><span class="line">    <span class="comment">//brokerList = 你的Kafka服务器IP:9092</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">brokerList</span> <span class="operator">=</span> <span class="string">&quot;yourHostIp:9092&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">topic</span> <span class="operator">=</span> <span class="string">&quot;topic-demo&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">groupId</span> <span class="operator">=</span> <span class="string">&quot;group.demo&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.put(<span class="string">&quot;key.deserializer&quot;</span>,<span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;value.deserializer&quot;</span>,<span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;bootstrap.servers&quot;</span>,brokerList);</span><br><span class="line">        <span class="comment">//设置消费组的名称</span></span><br><span class="line">        properties.put(<span class="string">&quot;group.id&quot;</span>,groupId);</span><br><span class="line">        <span class="comment">//创建一个消费者客户端实例</span></span><br><span class="line">        KafkaConsumer&lt;String,String&gt; consumer = <span class="keyword">new</span> <span class="title class_">KafkaConsumer</span>&lt;&gt;(properties);</span><br><span class="line">        <span class="comment">//订阅主题</span></span><br><span class="line">        consumer.subscribe(Collections.singletonList(topic));</span><br><span class="line">        <span class="comment">//循环消费消息</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            ConsumerRecords&lt;String,String&gt; records = consumer.poll(Duration.ofMillis(<span class="number">1000</span>));</span><br><span class="line">            <span class="keyword">for</span>(ConsumerRecord&lt;String,String&gt; record : records)&#123;</span><br><span class="line">                System.err.println(<span class="string">&quot;record.value() = &quot;</span> + record.value());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-3-测试"><a href="#2-3-测试" class="headerlink" title="2.3 测试"></a>2.3 测试</h3><p>先运行消费者，再运行生产者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ConsumerFastStart消费者的控制台输出</span></span><br><span class="line">record.value() = hello,Kafka!</span><br></pre></td></tr></table></figure><h3 id="2-4-异常以及解决"><a href="#2-4-异常以及解决" class="headerlink" title="2.4 异常以及解决"></a>2.4 异常以及解决</h3><p>若出现异常：Connection refused: no further information</p><ol><li><p>注意服务器放行9092端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以用WIndows命令行来测试 端口是否被放行</span></span><br><span class="line">telnet IP Port</span><br><span class="line">比如：telnet 192.168.1.1 9092</span><br></pre></td></tr></table></figure></li><li><p>修改Kafka安装目录的config/server.properties </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#listeners==&gt;固定0.0.0.0:9092</span></span><br><span class="line">listeners = PLAINTEXT://0.0.0.0:9092</span><br><span class="line"><span class="comment">#advertised.listeners==&gt;你的服务器IP:9092</span></span><br><span class="line">advertised.listeners=PLAINTEXT://xx.xx.xx.xx:9092</span><br></pre></td></tr></table></figure></li></ol><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li>深入理解Kafka-核心设计与实践原理</li><li>Kafka官网：<a href="http://kafka.apache.org/">http://kafka.apache.org</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;目录&lt;br&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;1-利用Kafka提供的命令测试&quot;&gt;&lt;a href=&quot;#1-利用Kafka提供的命令测试&quot; class=&quot;headerlink&quot; title=&quot;1 利用Kafka提供的命令测试&quot;&gt;&lt;/a&gt;1 利用Kafka提供的命令测试&lt;/h</summary>
      
    
    
    
    <category term="kafka" scheme="http://blog.under2.cn/categories/kafka/"/>
    
    
    <category term="kafka" scheme="http://blog.under2.cn/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>Kafka之安装配置 （二）</title>
    <link href="http://blog.under2.cn/2021/04/24/Kafka%E4%B9%8B%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%20%EF%BC%88%E4%BA%8C%EF%BC%89-kafka%E4%B9%8B%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E4%BA%8C/"/>
    <id>http://blog.under2.cn/2021/04/24/Kafka%E4%B9%8B%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%20%EF%BC%88%E4%BA%8C%EF%BC%89-kafka%E4%B9%8B%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E4%BA%8C/</id>
    <published>2021-04-24T15:55:02.025Z</published>
    <updated>2022-09-22T14:44:31.325Z</updated>
    
    <content type="html"><![CDATA[<p>目录<br>[TOC]</p><h2 id="Kafka之安装配置"><a href="#Kafka之安装配置" class="headerlink" title="Kafka之安装配置"></a>Kafka之安装配置</h2><p>本篇基于Linux CentOS来介绍安装的，需要先安装好JDK</p><h2 id="1-Zookeeper安装配置"><a href="#1-Zookeeper安装配置" class="headerlink" title="1 Zookeeper安装配置"></a>1 Zookeeper安装配置</h2><p>Zookeeper是安装Kafka集群的必要组件，Kafka通过Zookeeper来实施对于元数据信息的管理，包括集群、borker、主题、分区等内容。</p><p>Zookeeper是一个开源的分布式协调服务。分布式应用程序可以基于Zookeeper实现注入数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master选举、配置维护等功能。</p><p>在Zookeeper中共有3个角色：</p><ul><li>leader</li><li>follower</li><li>observer</li></ul><p>observer不参与投票，默认情况下Zookeeper中只有leader与follower两个角色</p><p>也可以通过我的这篇文章来了解一下：<a href="https://hopestation.top/archives/zookeeper">Zookeeper</a></p><h3 id="1-1-下载ZK"><a href="#1-1-下载ZK" class="headerlink" title="1.1 下载ZK"></a>1.1 下载ZK</h3><p>官网：<a href="https://zookeeper.apache.org/releases.html">https://zookeeper.apache.org/releases.html</a></p><h3 id="1-2-安装配置"><a href="#1-2-安装配置" class="headerlink" title="1.2 安装配置"></a>1.2 安装配置</h3><p>下载好安装包后将其复制到/opt目录下，具体命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#切换到/opt目录下</span></span><br><span class="line">[root@hopestation opt]<span class="comment"># cd /opt</span></span><br><span class="line"><span class="comment">#显示详细信息</span></span><br><span class="line">[root@hopestation opt]<span class="comment"># ll apache-zookeeper-3.6.2-bin.tar.gz </span></span><br><span class="line">-rwxr-xr-x 1 root root 12515974 Apr 14 22:55 apache-zookeeper-3.6.2-bin.tar.gz</span><br><span class="line"><span class="comment">#解压文件</span></span><br><span class="line">[root@hopestation opt]<span class="comment"># tar zxvf apache-zookeeper-3.6.2-bin.tar.gz </span></span><br><span class="line"><span class="comment">#进入到解压后的文件夹</span></span><br><span class="line">[root@hopestation opt]<span class="comment"># cd apache-zookeeper-3.6.2-bin</span></span><br><span class="line"><span class="comment">#查看当前目录</span></span><br><span class="line">[root@hopestation apache-zookeeper-3.6.2-bin]<span class="comment"># pwd</span></span><br><span class="line">/opt/apache-zookeeper-3.6.2-bin</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编辑/etc/profile</span></span><br><span class="line">[root@hopestation apache-zookeeper-3.6.2-bin]<span class="comment"># vim /etc/profile</span></span><br></pre></td></tr></table></figure><ul><li>增加这句话：export ZOOKEEPER_HOME=/opt/apache-zookeeper-3.6.2-bin</li><li>然后把它放到环境变量里就ok了，注意与已经存在的编辑变量用“冒号”分割</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ZOOKEEPER_HOME=/opt/apache-zookeeper-3.6.2-bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/lib/erlang/bin:/usr/local/rabbitmq_server-3.8.3/sbin:<span class="variable">$ZOOKEEPER_HOME</span>/bin</span><br><span class="line"><span class="comment">#然后 wq退出</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使环境变量生效</span></span><br><span class="line">[root@hopestation apache-zookeeper-3.6.2-bin]<span class="comment"># source /etc/profile</span></span><br><span class="line"><span class="comment">#查看环境变量</span></span><br><span class="line">[root@hopestation apache-zookeeper-3.6.2-bin]<span class="comment"># echo $PATH</span></span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/usr/local/lib/erlang/bin:/usr/local/rabbitmq_server-3.8.3/sbin:/root/bin:/usr/local/lib/erlang/bin:/usr/local/rabbitmq_server-3.8.3/sbin:/opt/apache-zookeeper-3.6.2-bin/bin</span><br></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入zk的pwdconf目录</span></span><br><span class="line">[root@hopestation apache-zookeeper-3.6.2-bin]<span class="comment"># cd conf</span></span><br><span class="line"><span class="comment">#当前目录</span></span><br><span class="line">[root@hopestation conf]<span class="comment"># pwd</span></span><br><span class="line">/opt/apache-zookeeper-3.6.2-bin/conf</span><br><span class="line"><span class="comment">#复制一份新的配置文件 因为zk启动会需要名为zoo.cfg的文件</span></span><br><span class="line">[root@hopestation conf]<span class="comment"># cp zoo_sample.cfg zoo.cfg</span></span><br><span class="line">[root@hopestation conf]<span class="comment"># ls</span></span><br><span class="line">configuration.xsl  log4j.properties  zoo.cfg  zoo_sample.cfg</span><br><span class="line"><span class="comment">#编辑zoo.cfg</span></span><br><span class="line">[root@hopestation conf]<span class="comment"># vim zoo.cfg</span></span><br><span class="line"><span class="comment">#然后按i，进入编辑模式。编辑：wq退出</span></span><br></pre></td></tr></table></figure><p>zoo.cfg 内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># the directory where the snapshot is stored.</span></span><br><span class="line"><span class="comment"># do not use /tmp for storage, /tmp here is just </span></span><br><span class="line"><span class="comment"># example sakes.</span></span><br><span class="line">dataDir=/tmp/zookeeper/data</span><br><span class="line">dataLogDir=/tmp/zookeeper/log</span><br><span class="line"><span class="comment">#其他内容不变</span></span><br></pre></td></tr></table></figure><p>而默认情况下linux是没有这两个目录的，所以需要创建出来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建</span></span><br><span class="line">[root@hopestation conf]<span class="comment"># mkdir -p /tmp/zookeeper/data</span></span><br><span class="line">[root@hopestation conf]<span class="comment"># mkdir -p /tmp/zookeeper/log</span></span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line">[root@hopestation conf]<span class="comment"># cd /tmp/zookeeper</span></span><br><span class="line">[root@hopestation zookeeper]<span class="comment"># ls</span></span><br><span class="line">data  <span class="built_in">log</span></span><br><span class="line"><span class="comment">#然后需要在 data目录下创建一个myid文件，并写入一个数值作为服务器的编号</span></span><br><span class="line">[root@hopestation zookeeper]<span class="comment"># cd data</span></span><br><span class="line">[root@hopestation data]<span class="comment"># touch myid</span></span><br><span class="line">[root@hopestation data]<span class="comment"># vim myid</span></span><br><span class="line"><span class="comment">#i编写，比如写入0 然后:wq退出</span></span><br><span class="line">[root@hopestation data]<span class="comment"># cat myid</span></span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>启动zookeeper</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@hopestation conf]<span class="comment"># zkServer.sh start</span></span><br><span class="line">/usr/bin/java</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /opt/apache-zookeeper-3.6.2-bin/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br><span class="line">[root@hopestation conf]<span class="comment"># zkServer.sh status</span></span><br><span class="line">/usr/bin/java</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /opt/apache-zookeeper-3.6.2-bin/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost. Client SSL: <span class="literal">false</span>.</span><br><span class="line">Error contacting service. It is probably not running.</span><br></pre></td></tr></table></figure><h2 id="2-Kafka安装配置"><a href="#2-Kafka安装配置" class="headerlink" title="2 Kafka安装配置"></a>2 Kafka安装配置</h2><p>官网下载地址：<a href="http://kafka.apache.org/downloads.html">http://kafka.apache.org/downloads.html</a></p><p><img src="https://hopestation.top/upload/2021/04/image-20210424225331528-c0d3418095a34f48b7353562a3cae950.png" alt="image-20210424225331528"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解压</span></span><br><span class="line">[root@hopestation opt]<span class="comment"># tar zxvf kafka_2.13-2.8.0.tgz </span></span><br></pre></td></tr></table></figure><p>将kafka目录添加到环境变量里：/opt/kafka_2.13-2.8.0</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编辑</span></span><br><span class="line">[root@hopestation opt]<span class="comment"># vim /etc/profile</span></span><br><span class="line"><span class="built_in">export</span> KAFKA_HOME=/opt/kafka_2.13-2.8.0</span><br><span class="line"><span class="built_in">export</span> ZOOKEEPER_HOME=/opt/apache-zookeeper-3.6.2-bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/lib/erlang/bin:/usr/local/rabbitmq_server-3.8.3/sbin:<span class="variable">$ZOOKEEPER_HOME</span>/bin:<span class="variable">$KAFKA_HOME</span></span><br><span class="line"><span class="comment">#生效</span></span><br><span class="line">[root@hopestation opt]<span class="comment"># source /etc/profile</span></span><br></pre></td></tr></table></figure><p>参考下图</p><p><img src="https://hopestation.top/upload/2021/04/image-20210424225902377-ac24ed50f6114a21836309fa2879a018.png" alt="image-20210424225902377"><br>修改broker配置文件$KAFKA_HOME/conf/server.properties</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@hopestation config]<span class="comment"># vim server.properties </span></span><br><span class="line"><span class="comment">#broker的编号，若集群中有多个broker，则每个broker的编号需要设置的不同</span></span><br><span class="line">broker.id=0</span><br><span class="line"><span class="comment">#broker对外提供服务的入口地址</span></span><br><span class="line">listeners = PLAINTEXT://localhost:9092</span><br><span class="line"><span class="comment">#存放消息日志文件的地址</span></span><br><span class="line">log.dirs=/tmp/kafka-logs</span><br><span class="line"><span class="comment">#Kafka所需的Zookeeper集群的地址，我们假设Kafka和Zookeeper都安装在本机</span></span><br><span class="line">zookeeper.connect=localhost:2181</span><br></pre></td></tr></table></figure><p>配置好了之后就可以启动Kafka了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动</span></span><br><span class="line">[root@hopestation kafka_2.13-2.8.0]<span class="comment"># bin/kafka-server-start.sh config/server.properties </span></span><br><span class="line"><span class="comment">#查看是否有Kafak进程</span></span><br><span class="line">[root@hopestation kafka_2.13-2.8.0]<span class="comment"># jps -l</span></span><br><span class="line">29936 kafka.Kafka <span class="comment">#这个就是了</span></span><br><span class="line">29697 org.apache.zookeeper.server.quorum.QuorumPeerMain</span><br></pre></td></tr></table></figure><h3 id="错误及解决"><a href="#错误及解决" class="headerlink" title="错误及解决"></a>错误及解决</h3><p>连接Zookeeper失败</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[2021-04-24 23:19:12,074] INFO Opening socket connection to server localhost/127.0.0.1:2181. Will not attempt to authenticate using SASL (unknown error) (org.apache.zookeeper.ClientCnxn)</span><br><span class="line"></span><br><span class="line">kafka.zookeeper.ZooKeeperClientTimeoutException: Timed out waiting <span class="keyword">for</span> connection <span class="keyword">while</span> <span class="keyword">in</span> state: CONNECTING</span><br></pre></td></tr></table></figure><p>解决</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#关闭zookeeper</span></span><br><span class="line">[root@hopestation ~]<span class="comment"># zkServer.sh stop</span></span><br><span class="line"><span class="comment">#再次启动 查看log</span></span><br><span class="line">[root@hopestation ~]<span class="comment">#  zkServer.sh start-foreground</span></span><br><span class="line"><span class="comment">#绑定8080端口 失败，端口占用</span></span><br><span class="line">org.apache.zookeeper.server.admin.AdminServer<span class="variable">$AdminServerException</span>: Problem starting AdminServer on address 0.0.0.0, port 8080 and <span class="built_in">command</span> URL /commands   org.apache.zookeeper.server.admin.JettyAdminServer.start(JettyAdminServer.java:171)</span><br><span class="line">Caused by: java.net.BindException: Address already <span class="keyword">in</span> use</span><br></pre></td></tr></table></figure><ul><li>可以直接关闭掉占用8080端口的程序</li><li>也可以修改zookeeper的zoo.cfg配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@hopestation opt]<span class="comment"># cd apache-zookeeper-3.6.2-bin/conf</span></span><br><span class="line">[root@hopestation conf]<span class="comment"># vim zoo.cfg</span></span><br><span class="line"><span class="comment">#增加这句话，使用空闲的端口就可以了</span></span><br><span class="line">admin.serverPort=2182</span><br></pre></td></tr></table></figure><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li>深入理解Kafka-核心设计与实践原理</li><li>Kafka官网：<a href="http://kafka.apache.org/">http://kafka.apache.org</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;目录&lt;br&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;Kafka之安装配置&quot;&gt;&lt;a href=&quot;#Kafka之安装配置&quot; class=&quot;headerlink&quot; title=&quot;Kafka之安装配置&quot;&gt;&lt;/a&gt;Kafka之安装配置&lt;/h2&gt;&lt;p&gt;本篇基于Linux CentOS来介绍</summary>
      
    
    
    
    <category term="kafka" scheme="http://blog.under2.cn/categories/kafka/"/>
    
    
    <category term="kafka" scheme="http://blog.under2.cn/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>Maven将Jar包存放到本地仓库</title>
    <link href="http://blog.under2.cn/2021/04/12/Maven%E5%B0%86Jar%E5%8C%85%E5%AD%98%E6%94%BE%E5%88%B0%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93-maven%E5%B0%86jar%E5%8C%85%E5%AD%98%E6%94%BE%E5%88%B0%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/"/>
    <id>http://blog.under2.cn/2021/04/12/Maven%E5%B0%86Jar%E5%8C%85%E5%AD%98%E6%94%BE%E5%88%B0%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93-maven%E5%B0%86jar%E5%8C%85%E5%AD%98%E6%94%BE%E5%88%B0%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/</id>
    <published>2021-04-11T23:11:10.039Z</published>
    <updated>2022-09-22T14:45:42.337Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Maven将Jar包存放到本地仓库"><a href="#Maven将Jar包存放到本地仓库" class="headerlink" title="Maven将Jar包存放到本地仓库"></a>Maven将Jar包存放到本地仓库</h2><ul><li>环境：Windows</li><li>需求：将已有的一个jar包，放到本地Maven仓库</li><li>在该jar包的位置处，打开cmd命令行</li></ul><p>执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file &quot;-Dfile=F:\xx\xx-3.1.jar&quot; &quot;-DgroupId=top.hopestation&quot; &quot;-DartifactId=xx&quot;  &quot;-Dversion=3.1&quot;  &quot;-Dpackaging=jar&quot;</span><br></pre></td></tr></table></figure><p>解释</p><ul><li><p>-Dfile：jar包位置，需要写<strong>绝对路径</strong>，注意路径中<strong>不要带有空格</strong></p></li><li><p>-DgroupId ： 组id，在本地仓库会存放在该目录下</p></li><li><p>-DartifactId：建议和jar同名</p></li><li><p>-Dversion：版本号</p></li><li><p>-Dpackaging：打包方式</p></li></ul><p>遇到的问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ERROR] The goal you specified requires a project to execute but there is no POM in this directory (F:\xx\xx). Please verify you invoked Maven from the correct directory. -&gt; [Help 1]</span><br></pre></td></tr></table></figure><p>解决</p><ul><li>-Dfile：jar包位置，需要写<strong>绝对路径</strong>，注意路径中<strong>不要带有空格</strong></li><li>命令的各个参数，像上面一样加双引号“”试试</li><li>检查全英文字符</li><li>不要换行</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Maven将Jar包存放到本地仓库&quot;&gt;&lt;a href=&quot;#Maven将Jar包存放到本地仓库&quot; class=&quot;headerlink&quot; title=&quot;Maven将Jar包存放到本地仓库&quot;&gt;&lt;/a&gt;Maven将Jar包存放到本地仓库&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;环境：W</summary>
      
    
    
    
    <category term="随笔" scheme="http://blog.under2.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>Kafka之概念认知（一）</title>
    <link href="http://blog.under2.cn/2021/04/08/Kafka%E4%B9%8B%E6%A6%82%E5%BF%B5%E8%AE%A4%E7%9F%A5%EF%BC%88%E4%B8%80%EF%BC%89-kafka%E4%B9%8B%E6%A6%82%E5%BF%B5%E8%AE%A4%E7%9F%A5%E4%B8%80/"/>
    <id>http://blog.under2.cn/2021/04/08/Kafka%E4%B9%8B%E6%A6%82%E5%BF%B5%E8%AE%A4%E7%9F%A5%EF%BC%88%E4%B8%80%EF%BC%89-kafka%E4%B9%8B%E6%A6%82%E5%BF%B5%E8%AE%A4%E7%9F%A5%E4%B8%80/</id>
    <published>2021-04-08T14:42:05.235Z</published>
    <updated>2022-09-22T14:44:35.020Z</updated>
    
    <content type="html"><![CDATA[<p>目录<br>[TOC]</p><h1 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h1><h2 id="1-What’s-Kafka？"><a href="#1-What’s-Kafka？" class="headerlink" title="1 What’s Kafka？"></a>1 What’s Kafka？</h2><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h3><ul><li><p><strong>起初</strong>是由LinkedIn公司采用Scala语言开发的一个多分区、多副本且基于Zookeeper协调的<strong>分布式消息系统</strong></p></li><li><p><strong>目前</strong>kafka已经定位为一个<strong>分布式流式处理平台</strong>，具有高吞吐量、可持久化、可水平拓展、支持流数据处理特性</p></li></ul><h3 id="1-2-作用"><a href="#1-2-作用" class="headerlink" title="1.2 作用"></a>1.2 作用</h3><ul><li><p><strong>消息系统:</strong> 可以让你发布和订阅流式的记录。这一方面与消息队列或者企业消息系统类似。</p></li><li><p><strong>存储系统:</strong> 可以储存流式的记录，并且有较好的容错性。</p></li><li><p><strong>流处理平台:</strong> 可以在流式记录产生时就进行处理。</p></li></ul><h2 id="2-一些概念"><a href="#2-一些概念" class="headerlink" title="2 一些概念"></a>2 一些概念</h2><p>一个典型的Kafaka体系架构包括若干Producer、若干Broker、若干Consumer，以及一个Zookeeper集群。Zookeeper集群是Kafka用来负责集群元数据的管理、控制器的选举等操作的。Producer将消息发送到Broker，Broker负责将收到的消息存储到磁盘中，Consumer负责从Broker订阅并消费消息。</p><blockquote><p>Kafka里面的细节概念还有很多，这里只说明一些主要概念</p></blockquote><h3 id="2-1-Producer"><a href="#2-1-Producer" class="headerlink" title="2.1 Producer"></a>2.1 Producer</h3><p><code>生产者</code>：也就是发送消息的一方。生产者负责创建消息，然后将其投递到Kafka中。</p><h4 id="2-2-Consumer"><a href="#2-2-Consumer" class="headerlink" title="2.2 Consumer"></a>2.2 Consumer</h4><p><code>消费者</code>：也就是接受消息的一方。消费者连接到Kakfa上并接受消息</p><h4 id="2-3-Broker"><a href="#2-3-Broker" class="headerlink" title="2.3 Broker"></a>2.3 Broker</h4><p><code>服务代理节点</code>：Broker可以简单地看成一个独立的kafka服务实例或服务节点。大多数情况下也可以将其看作一台Kafka服务器，前提是这个服务器上只部署了一个Kafka实例</p><h4 id="2-4-Topic"><a href="#2-4-Topic" class="headerlink" title="2.4 Topic"></a>2.4 Topic</h4><p><code>主题</code>：Kafka中的消息以主题为单位进行归类，生产者负责将消息发送到特定的主题，而消费者负责订阅主题并进行消费。【发送到Kafka集群中的每一条消息都要指定一个主题】</p><h4 id="2-5-Partition"><a href="#2-5-Partition" class="headerlink" title="2.5 Partition"></a>2.5 Partition</h4><p><code>分区</code>：主题是一个逻辑上的概念，它还可以细分为多个分区，一个分区只属于单个主题，很多时候也会把分区称为主题分区（Topic-Partition）。</p><ul><li><p>分区在存储层面可以看作是一个可追加的日志（Log）文件，消息在被追加时会被分配一个偏移量（Offset）</p><p><code>Offset</code>是消息在分区中的唯一标识，通过它来保证消息的顺序性，Offset不跨分区，即Kafka保证的是分区有序而不是主题有序。</p></li><li><p>分区可以分布在不同的<strong>borker</strong>上，每一条消息在被发送`<strong>broker</strong>前，会根据分区规则选择存储到哪个具体的分区。通过修改分区的数量可以实现水平拓展，防止某个服务器机器I/O成为性能瓶颈</p></li></ul><h4 id="2-6-Replica"><a href="#2-6-Replica" class="headerlink" title="2.6 Replica"></a>2.6 Replica</h4><p><code>副本</code>：上面说一个消息需要被发送到一个主题，而主题又划分成了多个分区。而kafka为了提升容灾能力就引入了多副本机制，一个分区可以有多个副本。副本之间是“一主多从”的关系，其中Leader副本负责处理读写请求，follower副本只负责与leader副本的消息同步。</p><ul><li>当副本处于不同的broker中，当leader副本出现故障时，从follower副本中重新选举新的leader副本对外提供服务。保证了集群中单个broker失效仍能对外提供服务。</li><li>在同一个时刻，副本（包括leader、follower）之间的数据本非完全一样，存在滞后可能。</li></ul><blockquote><p>副本，一般不对外提供服务，单纯的备份功能。假如对外提供服务的话，可以会出现数据不一致的情况（与后面的ISR、OSR有关）</p></blockquote><h4 id="2-7-AR、ISR、OSR"><a href="#2-7-AR、ISR、OSR" class="headerlink" title="2.7 AR、ISR、OSR"></a>2.7 AR、ISR、OSR</h4><p><code>AR</code>：分区中所有副本统称为AR(Assigned Replicas)，包括leader与follow</p><p><code>ISR</code>：所有与leader副本保持一定程度同步的副本（包括leader副本）组成<strong>ISR</strong>(In-Sync Replicas），ISR集合是AR集合中的一个子集。</p><p><code>OSR</code>：与leader副本同步滞后过多的副本（不包括leader副本）组成<strong>OSR</strong>(Out-of-Sync Replicas)。</p><blockquote><p>消息会先发送的leader副本，然后follower副本才能从leader副本中拉取消息进行同步，同步期间follower相对于leader而言会有一定程度的滞后。前面所说的“一定程度的同步”是指可以忍受的之后范围，此范围可以通过参数配置。即：在此范围内的就是ISR，以外为OSR。正常情况OSR为空集。AR=ISR</p></blockquote><h4 id="2-8-HW、LEO"><a href="#2-8-HW、LEO" class="headerlink" title="2.8 HW、LEO"></a>2.8 HW、LEO</h4><p>HW：高水位<br>LEO：待写入消息的Offset</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li>深入理解Kafka-核心设计与实践原理</li><li>Kafka官网：<a href="http://kafka.apache.org/">http://kafka.apache.org</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;目录&lt;br&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Kafka&quot;&gt;&lt;a href=&quot;#Kafka&quot; class=&quot;headerlink&quot; title=&quot;Kafka&quot;&gt;&lt;/a&gt;Kafka&lt;/h1&gt;&lt;h2 id=&quot;1-What’s-Kafka？&quot;&gt;&lt;a href=&quot;#1-What’</summary>
      
    
    
    
    <category term="kafka" scheme="http://blog.under2.cn/categories/kafka/"/>
    
    
    <category term="kafka" scheme="http://blog.under2.cn/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>Shiro</title>
    <link href="http://blog.under2.cn/2021/03/28/Shiro-shiro/"/>
    <id>http://blog.under2.cn/2021/03/28/Shiro-shiro/</id>
    <published>2021-03-28T12:59:40.907Z</published>
    <updated>2022-09-22T14:47:02.846Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Apache Shiro™</strong><br>是一个功能强大且易于使用的Java安全框架，它执行身份验证，授权，加密和会话管理。使用Shiro易于理解的API，您可以快速轻松地保护任何应用程序-从最小的移动应用程序到最大的Web和企业应用程序。</p></blockquote><p>自己总结的几个点：</p><p><img src="https://hopestation.top/upload/2021/03/image-20210328204849312-15eae303f5f94b119d22fd5a77cd9262.png" alt="image20210328204849312.png"><img src="https://hopestation.top/upload/2021/03/image-20210328205125945-f3039290968e48a997e3f1d4d06f7428.png" alt="image20210328205125945.png"><img src="https://hopestation.top/upload/2021/03/image-20210328205151343-f139cec99a3f4436b672f7ecb178b7b6.png" alt="image20210328205151343.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Apache Shiro™&lt;/strong&gt;&lt;br&gt;是一个功能强大且易于使用的Java安全框架，它执行身份验证，授权，加密和会话管理。使用Shiro易于理解的API，您可以快速轻松地保护任何应用程序-从最小的移动应用程序到最大的We</summary>
      
    
    
    
    <category term="工具" scheme="http://blog.under2.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>《Spring之拦截器、过滤器》</title>
    <link href="http://blog.under2.cn/2021/02/04/%E3%80%8ASpring%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8%E3%80%81%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%8B-spring%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>http://blog.under2.cn/2021/02/04/%E3%80%8ASpring%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8%E3%80%81%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%8B-spring%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8%E8%BF%87%E6%BB%A4%E5%99%A8/</id>
    <published>2021-02-03T16:09:30.325Z</published>
    <updated>2022-09-22T14:42:56.451Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>拦截器</strong></p><p>实现上基于<a href="http://www.07net01.com/tags-Java-0.html">Java</a>的反射机制，属于面向切面<a href="http://www.07net01.com/">编程</a>（AOP）的一种运用。用于处理请求咱们Controller之前之后的的一些操作。</p><p><strong>过滤器</strong></p><p>依赖于servlet容器。在实现上基于函数回调，可以对几乎所有请求进行过滤</p><p>（拦截器既可以用于WEB，也可以用于Application、Swing中）</p></blockquote><h2 id="1-拦截器实现"><a href="#1-拦截器实现" class="headerlink" title="1 拦截器实现"></a>1 拦截器实现</h2><p>主要步骤</p><ul><li>定义拦截器：实现<code>HandlerInterceptor</code>,重写方法</li><li>注册拦截器：实现<code>WebMvcConfigurer</code>,添加<code>@Configuration</code></li></ul><ol><li>定义拦截器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span>&#123;</span><br><span class="line"> <span class="comment">//在请求处理之前进行调用（Controller方法调用之前</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;preHandle被调用\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;   </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//请求处理之后进行调用，但是在视图被渲染之前（Controller方法调用之后）</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postHandle被调用\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//在整个请求结束之后被调用，也就是在DispatcherServlet 渲染了对应的视图之后执行（主要是用于进行资源清理工作）</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion被调用\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>注册拦截器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">MyInterceptor</span>()).addPathPatterns(<span class="string">&quot;/**&quot;</span>).excludePathPatterns(<span class="string">&quot;/a.do&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里的拦截器是new出来的，在Spring框架中可以交给IOC进行依赖注入，直接使用@Autowired注入</span></span><br><span class="line">        <span class="comment">// addPathPatterns 用于添加拦截的规则，excludePathPatterns 用于排除拦截的规则</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拦截的规则是支持通配符的，写法如下：</p><table><thead><tr><th>通配符</th><th>说明</th></tr></thead><tbody><tr><td><code>*</code></td><td>匹配单个字符，如<code>/user/*</code>匹配到<code>/user/a</code>等，又如<code>/user/*/ab</code>匹配到<code>/user/p/ab</code>；</td></tr><tr><td><code>**</code></td><td>匹配任意多字符（包括多级路径），如<code>/user/**</code>匹配到<code>user/a</code>、<code>/user/abs/po</code>等；</td></tr></tbody></table><p>上述也可以混合使用，如<code>/user/po*/**</code>、<code>/user/&#123;userId&#125;/*</code>（pathValue是可以和通配符共存的）；</p><blockquote><p>注：</p><ol><li>Spring boot 2.0 后<code>WebMvcConfigurerAdapter</code>已经过时，所以这里并不是继承它，而是继承<code>WebMvcConfigurer</code>；</li><li>这里在实操时，使用IDEA工具继承<code>WebMvcConfigurer</code>接口时，使用快捷键Alt+Enter已经无论如何没有提示，进入查看发现这个接口中所有的方法变成了<code>default</code>方法（JDK8新特性，这个修饰符修饰的方法必须要有方法体，此时接口中允许有具体的方法，在实现该接口时，用户可以选择是否重写该方法，而不是必须重写了），所以没有提示，可以手动进入接口中复制对应的方法名（不包括<code>default</code>修饰符）。</li></ol></blockquote><h2 id="2-过滤器实现"><a href="#2-过滤器实现" class="headerlink" title="2 过滤器实现"></a>2 过滤器实现</h2><p>SpringBoot中使用过滤器不需要在web.xml中配置filter，只需要</p><ul><li>添加注解<code>@WebFilter</code></li><li>实现<code>Filter</code>接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns = &quot;/*&quot;, filterName = &quot;test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig arg0)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;过滤器初始化&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span></span><br><span class="line"><span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">System.out.printf(<span class="string">&quot;过滤器实现&quot;</span>);</span><br><span class="line">System.out.println(((HttpServletRequest) servletRequest).getRequestURI());</span><br><span class="line">filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;过滤器销毁了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-应用场景"><a href="#3-应用场景" class="headerlink" title="3 应用场景"></a>3 应用场景</h2><p>可以参考：<a href="https://blog.csdn.net/xiaoyaotan_111/article/details/53817918">https://blog.csdn.net/xiaoyaotan_111/article/details/53817918</a></p><p>未完待续..</p><hr><p>参考文献:</p><ul><li><p>SpringBoot中的过滤器和拦截器的实现：<a href="https://blog.csdn.net/zyf69172/article/details/79679071">https://blog.csdn.net/zyf69172/article/details/79679071</a></p></li><li><p>Spring中拦截器和过滤器的使用：<a href="https://blog.csdn.net/jacksonary/article/details/84572701">https://blog.csdn.net/jacksonary/article/details/84572701</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;拦截器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实现上基于&lt;a href=&quot;http://www.07net01.com/tags-Java-0.html&quot;&gt;Java&lt;/a&gt;的反射机制，属于面向切面&lt;a href=&quot;http://www.0</summary>
      
    
    
    
    <category term="Spring" scheme="http://blog.under2.cn/categories/Spring/"/>
    
    
    <category term="Spring" scheme="http://blog.under2.cn/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>《Spring之AOP、IOC》</title>
    <link href="http://blog.under2.cn/2021/02/03/%E3%80%8ASpring%E4%B9%8BAOP%E3%80%81IOC%E3%80%8B-spring%E4%B9%8Baopioc/"/>
    <id>http://blog.under2.cn/2021/02/03/%E3%80%8ASpring%E4%B9%8BAOP%E3%80%81IOC%E3%80%8B-spring%E4%B9%8Baopioc/</id>
    <published>2021-02-03T15:18:06.012Z</published>
    <updated>2022-09-22T14:42:48.357Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇总结了一些工作中常用的和关键的Spring知识。</p></blockquote><p>[TOC]</p><h2 id="0-Spring"><a href="#0-Spring" class="headerlink" title="0. Spring"></a>0. Spring</h2><p><img src="https://hopestation.top/upload/2020/12/sp01-c4606869d31840c6a2381c09b1a35e06.png" alt="sp01.png"></p><blockquote><p>模块概括如下</p></blockquote><h3 id="核心容器-Core-Container"><a href="#核心容器-Core-Container" class="headerlink" title="核心容器(Core Container)"></a>核心容器(Core Container)</h3><ol><li>核心容器由<code>spring-core</code>， <code>spring-beans</code>，<code>spring-context</code>，<code>spring-context-support</code>，和<code>spring-expression(Spring Expression Language)</code> 5个模块组成。</li><li><code>spring-core</code>和<code>spring-beans</code>模块提供框架的基本零件，包括IOC和依赖注入特征。<code>BeanFactory</code>是一个复杂的工厂模式实施。它消除了对程序化单例的需求，并允许将实际程序逻辑中的依赖关系的配置和规范分离。</li><li>Context (<code>spring-context</code>) 模块建立由设置在固体基体上的核心和豆类模块：它是访问一个框架式的方式是类似于一个JNDI注册表对象的装置。Context模块从Beans模块中继承了它的特性，并增加了对国际化（例如使用资源包），事件传播，资源加载以及例如Servlet容器的上下文透明创建的支持。Context模块还支持Java EE功能，如EJB，JMX和基本远程处理。该<code>ApplicationContext</code>接口是语境模块的焦点。 <code>spring-context-support</code> 提供了将常见的第三方库集成到Spring应用程序上下文中的支持，特别是用于缓存（EhCache，JCache）和调度（CommonJ，Quartz）。</li><li><code>spring-expression</code>模块提供了强大的表达式语言，用于在运行时查询和操作对象图。它是JSP 2.1规范中规定的统一表达式语言（统一EL）的扩展。该语言支持设置和获取属性值，属性赋值，方法调用，访问数组的内容，集合和索引器，逻辑和算术运算符，命名变量以及从Spring的IoC容器中按名称检索对象。它还支持列表预测和选择以及常用列表聚合。</li></ol><h3 id="AOP-and-Instrumentation（仪表）"><a href="#AOP-and-Instrumentation（仪表）" class="headerlink" title="AOP and Instrumentation（仪表）"></a>AOP and Instrumentation（仪表）</h3><ol><li><code>spring-aop</code>模块提供了符合AOP联盟的面向方面编程实现，允许您定义方法拦截器和切入点，以干净地分离实现应该分离的功能的代码。使用源代码级元数据功能，您还可以将行为信息以类似于.NET属性的方式整合到您的代码中。</li><li><code>spring-aspects</code>模块提供与AspectJ的集成。</li><li><code>spring-instrument</code>模块提供了在特定应用程序服务器中使用的类工具支持和类加载器实现。</li><li><code>spring-instrument-tomcat</code> 模块包含Tomcat的Spring工具代理。</li></ol><h3 id="Messaging"><a href="#Messaging" class="headerlink" title="Messaging"></a>Messaging</h3><p>Spring框架4包括<code>spring-messaging</code>从关键抽象模块 Spring集成项目，例如<code>Message</code>，<code>MessageChannel</code>，<code>MessageHandler</code>，和其他人作为基于消息的应用奠定了基础。该模块还包括一组用于将消息映射到方法的注释，类似于基于Spring MVC注释的编程模型。</p><h3 id="Data-Access-Integration（数据访问-集成）"><a href="#Data-Access-Integration（数据访问-集成）" class="headerlink" title="Data Access/Integration（数据访问/集成）"></a>Data Access/Integration（数据访问/集成）</h3><blockquote><p>所述数据访问/集成层由JDBC，ORM，OXM，JMS和交易模块。</p></blockquote><ol><li><code>spring-jdbc</code>模块提供了一个JDBC -abstraction层消除了需要冗长的JDBC编码和数据库厂商特有的错误代码解析。</li><li><code>spring-tx</code>模块支持编程和声明式事务 管理，用于实现特殊接口和所有POJO（普通Java对象）的类。</li><li><code>spring-orm</code>模块为流行的对象关系映射 API 提供了集成层 ，包括JPA和 Hibernate。使用<code>spring-orm</code>模块，您可以将这些O / R映射框架与Spring提供的所有其他功能（如前面提到的简单的声明式事务管理功能）结合使用。</li><li><code>spring-oxm</code>模块提供了支持JAXB，Castor，JiBX和XStream等对象/ XML映射实现的抽象层。</li><li><code>spring-jms</code>模块（Java消息服务）包含用于生成和使用消息的功能。自Spring Framework 4.1以来，它提供了与<code>spring-messaging</code>模块的集成 。</li></ol><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><p>网络层由 <code>spring-web</code>, <code>spring-webmvc</code> and <code>spring-websocket</code> 模块组成。</p><ol><li><p><code>spring-web</code>模块提供基本的面向Web的集成功能，如多部分文件上传功能，使用Servlet侦听器的IoC容器的初始化以及面向Web的应用程序上下文。它还包含一个HTTP客户端和Spring远程处理支持的Web相关部分。</p></li><li><p>spring-webmvc模块（也称为Web-Servlet模块）包含Spring的模型 - 视图 - 控制器（MVC）和Web应用程序的REST Web服务实现。Spring的MVC框架提供了域模型代码和Web表单之间的清晰分离，并且与Spring框架的所有其他功能集成在一起。</p></li></ol><h3 id="Test（测试）"><a href="#Test（测试）" class="headerlink" title="Test（测试）"></a>Test（测试）</h3><p><code>spring-test</code>模块支持使用 JUnit 或 TestNG 对 Spring 组件进行单元测试和 集成测试。它提供了一致的Spring 的加载 ApplicationContext 和这些上下文的缓存。它还提供了模拟对象，您可以使用它来单独测试您的代码。</p><h2 id="1-AOP"><a href="#1-AOP" class="headerlink" title="1. AOP"></a>1. AOP</h2><h3 id="1-1-OOP（面向对象编程）"><a href="#1-1-OOP（面向对象编程）" class="headerlink" title="1.1 OOP（面向对象编程）"></a>1.1 OOP（面向对象编程）</h3><p>比如C语言是采用<strong>面向过程</strong>来写代码的，但在企业级开发中，重复代码会有很多，而业务场景对应的恰恰是一些生活中的事物，同一类事物，必然会有一些共同点（比如：人、桌子、合同..）那么OOP就是将事物再代码中对应成对象，从而减少冗余，方便了代码的统一管理，易扩展。由于继承、封装、多态的特性,自然设计出高内聚、低耦合的系统结构,使得系统更灵活…</p><blockquote><p>由事物的<strong>共同属性</strong>  —抽象成了–&gt;  <strong>对象</strong></p></blockquote><h3 id="1-2-AOP（面向切面编程）"><a href="#1-2-AOP（面向切面编程）" class="headerlink" title="1.2 AOP（面向切面编程）"></a>1.2 AOP（面向切面编程）</h3><p>AOP 采用<strong>横向抽取机制</strong>,取代了传统纵向继承体系的重复代码.在运行期通过代理方式向目标类织入增强代码。</p><p><img src="https://hopestation.top/upload/2020/12/image-31a6597620344bde993706eb7cc9dea2.png" alt="image.png"></p><p>横向抽取 ?<br>比如‘人’这个对象，由于都有身高体重等等属性..于是我们抽象成了OOP。然后再企业开发中，我有一些需求：</p><ul><li>这个人一吃饭（运行：eat方法）就输出一个Log日志</li><li>这个人一登录系统（运行：login方法）就先来判断权限身份是否正确</li><li>这个人一睡觉（运行：sleep）就停止某些应用的运行</li></ul><p>你可能会说ok没问题，写在方法后面、用继承、用工厂模式！<br>其实这些并不适用，在敏捷开发的今天，产品需求可能会不断改动、拓展！<br>那么在修改、或者新增删除这种方法的时候以上就会改动较大。AOP就是来解决这个问题的。</p><blockquote><p>由事物的<strong>共同方法</strong>  —抽象成了–&gt;  <strong>织面</strong><br>或者直接说 统一管理了在某一个情况下都要执行的方法：日志、鉴权、配置等</p></blockquote><h3 id="1-3-AOP-使用"><a href="#1-3-AOP-使用" class="headerlink" title="1.3  AOP 使用"></a>1.3  AOP 使用</h3><h4 id="AspectJ-推荐）"><a href="#AspectJ-推荐）" class="headerlink" title="AspectJ (推荐）"></a>AspectJ (推荐）</h4><p>它是一个基于Java语言的AOP框架,Spring 2.0以后新增了对AspectJ切点表达式支持。是基于注解方式的，比较方便的。</p><ol><li>pom -&gt; <code>aspectjweaver</code> </li><li>切面类上加注解 -&gt;  <code>@Aspect</code> </li><li>找切点 -&gt; <code>execution(* top.hopesattion.ProductDao.save(..))&quot;</code></li><li>定义前置通知 -&gt; <code>@Before</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置通知：在 ProductDao.save 方法之前运行</span></span><br><span class="line"><span class="comment">     * value 定义切入点:在save的时候进行校验</span></span><br><span class="line"><span class="comment">     * JoinPoint 获得切点信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(* top.hopesattion.ProductDao.save(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----before 日志、鉴权、配置等操作可以在这执行---&quot;</span> + joinPoint);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h4><p>@Before 前置通知,相当于BeforeAdvice</p><p>@AfterReturning 后置通知,相当于AfterReturningAdvice</p><p>@Around 环绕通知,相当于MethodInterceptor</p><p>@AfterThrowing 异常抛出通知,相当于ThrowAdvice</p><p>@After 最终final通知,不管是否异常,该通知都会执行</p><h4 id="切入点"><a href="#切入点" class="headerlink" title="切入点"></a>切入点</h4><p>在lue处定义</p><p>语法：execution(&lt;访问修饰符&gt;?&lt;返回类型&gt;&lt;方法名&gt;(&lt;参数&gt;)&lt;异常&gt; </p><p><strong>切点的另一种定义方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每个通知内定义切点,会造成工作量大,不易维护,对于重复的切点,可以使用@Pointcut进行定义</span></span><br><span class="line"><span class="comment">//统一定义，方便管理和使用</span></span><br><span class="line"><span class="comment">//myPointcut1</span></span><br><span class="line"><span class="meta">@Pointcut(value = &quot;execution(* com.prim.aspectj.ProductDao.save(..))&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">myPointcut1</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//myPointcut2</span></span><br><span class="line"><span class="meta">@Pointcut(value = &quot;execution(* com.prim.aspectj.ProductDao.update(..))&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">myPointcut2</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//value处直接调用</span></span><br><span class="line"><span class="meta">@Before(value = &quot;myPointcut1()||myPointcut2()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;--before--&quot;</span> + joinPoint);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>AspectJ 也可以基于XML来进行配置AOP，不太推荐就不介绍了。</p></blockquote><h3 id="1-4-AOP-原理"><a href="#1-4-AOP-原理" class="headerlink" title="1.4 AOP 原理"></a>1.4 AOP 原理</h3><h4 id="Java-动态代理。"><a href="#Java-动态代理。" class="headerlink" title="Java 动态代理。"></a>Java 动态代理。</h4><p>具体有如下四步骤：</p><ol><li>通过实现 InvocationHandler 接口创建自己的调用处理器；</li><li>通过为 Proxy 类指定 ClassLoader 对象和一组 interface 来创建动态代理类；</li><li>通过反射机制获得动态代理类的构造函数，其唯一参数类型是调用处理器接口类型；</li><li>通过构造函数创建动态代理类实例，构造时调用处理器对象作为参数被传入。</li></ol><h4 id="GCLIB代理"><a href="#GCLIB代理" class="headerlink" title="GCLIB代理"></a>GCLIB代理</h4><ul><li>cglib（Code Generation Library  ）是一个强大的,高性能,高质量的Code生成类库。它可以在运行期扩展Java类与实现Java接口。</li><li>cglib封装了asm，可以在运行期动态生成新的class。</li><li>cglib用于AOP，jdk中的proxy必须基于接口，cglib却没有这个限制。&gt;</li></ul><blockquote><p>原理区别：</p><p>java动态代理是利用反射机制生成一个实现代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理。而cglib动态代理是利用asm开源包，对代理对象类的class文件加载进来，通过修改其字节码生成子类来处理。</p></blockquote><h4 id="Spring使用的是哪种代理？"><a href="#Spring使用的是哪种代理？" class="headerlink" title="Spring使用的是哪种代理？"></a>Spring使用的是哪种代理？</h4><p>Spring在运行期,生成动态代理对象,不需要特殊的编辑器</p><p>Spring AOP的底层就是通过JDK动态代理或CGlib动态代理技术为目标bean执行横向织入</p><ol><li><p>若目标对象实现了若干接口,Spring使用JDK的java.lang.reflect.Proxy类代理，</p><p>（通过配置可强制使用CGLIB实现AOP）</p></li><li><p>若目标对象没有实现任何接口,Spring使用CGlib库生成目标对象的子类</p></li></ol><blockquote><p>程序中应该优先对接口创建代理,便于程序解耦维护</p><p>Spring只支持方法连接点,不提供属性连接点</p><p>标记的final方法,不能被代理,因为无法进行覆盖</p><ol><li>JDK动态代理,是针对接口生成子类,接口中方法不能使用final修饰</li><li>CGlib是针对目标类生产子类,因此类或方法不能使final的</li></ol></blockquote><h4 id="如何强制使用CGLIB实现AOP？"><a href="#如何强制使用CGLIB实现AOP？" class="headerlink" title="如何强制使用CGLIB实现AOP？"></a>如何强制使用CGLIB实现AOP？</h4><ul><li>添加CGLIB库，SPRING_HOME/cglib/*.jar</li><li>在spring配置文件中加入&lt;aop:aspectj-autoproxy proxy-target-class=”true”/&gt;</li></ul><h2 id="2-IOC"><a href="#2-IOC" class="headerlink" title="2. IOC"></a>2. IOC</h2><p><strong>IOC【Inversion of Control】 控制反转</strong></p><ul><li><p>控制：指的是对象创建（实例化、管理）的权利</p></li><li><p>反转：控制权交给外部环境了（spring框架、IoC容器）</p></li><li><p><strong>传统开发⽅式</strong>：⽐如类A依赖于类B，往往会在类A中new⼀个B的对象</p></li><li><p><strong>IoC思想下开发⽅式</strong>：我们不⽤⾃⼰去new对象了，⽽是由IoC容器（Spring框架）去帮助我们实例化对象，并且管理它的内部的依赖关系。</p></li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>动态代理：<a href="https://www.jianshu.com/p/c97f1f83171f">https://www.jianshu.com/p/c97f1f83171f</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本篇总结了一些工作中常用的和关键的Spring知识。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;0-Spring&quot;&gt;&lt;a href=&quot;#0-Spring&quot; class=&quot;headerlink&quot; title=&quot;0.</summary>
      
    
    
    
    <category term="Spring" scheme="http://blog.under2.cn/categories/Spring/"/>
    
    
    <category term="Spring" scheme="http://blog.under2.cn/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>MySQL索引</title>
    <link href="http://blog.under2.cn/2021/02/01/MySQL%E7%B4%A2%E5%BC%95-mysql%E7%B4%A2%E5%BC%95/"/>
    <id>http://blog.under2.cn/2021/02/01/MySQL%E7%B4%A2%E5%BC%95-mysql%E7%B4%A2%E5%BC%95/</id>
    <published>2021-01-31T16:29:50.702Z</published>
    <updated>2022-09-22T14:45:45.343Z</updated>
    
    <content type="html"><![CDATA[<p>目录</p><p>[TOC]</p><h2 id="1-什么是索引？"><a href="#1-什么是索引？" class="headerlink" title="1 什么是索引？"></a>1 什么是索引？</h2><h3 id="1-1-官方定义"><a href="#1-1-官方定义" class="headerlink" title="1.1 官方定义"></a>1.1 官方定义</h3><p>帮助MYSQL提高查询效率的<strong>数据结构(B+树）</strong></p><h3 id="1-2-优点-amp-作用"><a href="#1-2-优点-amp-作用" class="headerlink" title="1.2 优点&amp;作用"></a>1.2 优点&amp;作用</h3><p>大大加快数据查询速度</p><h3 id="1-3-缺点"><a href="#1-3-缺点" class="headerlink" title="1.3 缺点"></a>1.3 缺点</h3><ul><li>索引需要占据磁盘空间、数据库资源</li><li>对数据进行增删改的时候，同时也需要维护索引，速度会受到影响</li></ul><h2 id="2-索引的分类（重点）"><a href="#2-索引的分类（重点）" class="headerlink" title="2 索引的分类（重点）"></a>2 索引的分类（重点）</h2><p><strong>InnoDB引擎支持的索引有以下几种：</strong></p><ul><li><strong>主键索引</strong>：设定为主键后数据库会自动建立索引（如果这表没有主键，那么Innodb为默认建立一个聚簇索引）</li><li><strong>普通索引</strong>：即一个索引只包含单个列，一个表可以有多个普通索引（也称为  <strong>单列索引</strong>、<strong>单值索引</strong>）</li><li><strong>唯一索引</strong>：索引列的值必须唯一。允许有且只有一个NULL值</li><li><strong>复合索引</strong>：即一个索引包含多个列（也称为 <strong>联合索引</strong>、<strong>组合索引</strong>）</li></ul><blockquote><p>Full Text全文索引 （MySQL5.7版本之前 只能用于 MyISAM引擎）</p><p>全文索引类型为FULL TEXT，再定义索引的列上支持值的全文查找，允许在这些索引中插入重复值和空值。全文索引可以再Char、Varchar、text、类型列上创建。【使用概率不大】</p></blockquote><h2 id="3-索引的基本操作"><a href="#3-索引的基本操作" class="headerlink" title="3  索引的基本操作"></a>3  索引的基本操作</h2><h3 id="3-1-创建主键索引"><a href="#3-1-创建主键索引" class="headerlink" title="3.1  创建主键索引"></a>3.1  创建主键索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 先创建个user表，id设为主键。供我们练习使用</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_user(id <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">PRIMARY</span> KEY,name <span class="type">VARCHAR</span>(<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看索引</span></span><br><span class="line"><span class="keyword">show</span> index <span class="keyword">from</span> t_user</span><br></pre></td></tr></table></figure><p>最后我们发现设为主键后，mysql会自动帮我们把它设为主键索引。虽然是常识了..截图一下</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/31/202114-843195.png" alt="image-20210131202113016"></p><h3 id="3-2-创建普通索引"><a href="#3-2-创建普通索引" class="headerlink" title="3.2  创建普通索引"></a>3.2  创建普通索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 给name添加索引</span></span><br><span class="line"><span class="keyword">create</span> index name_idx <span class="keyword">on</span> t_user(name) </span><br><span class="line"></span><br><span class="line">语法结构是：</span><br><span class="line"><span class="keyword">create</span> index 索引名（随便起） <span class="keyword">on</span> 表名（列名）</span><br></pre></td></tr></table></figure><p>再次查看索引 <code>show index from t_user</code></p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/31/202625-819181.png" alt="image-20210131202610541"></p><p>或者也可以随着创建表的时候创建索引，效果是一样的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--又创建了user2表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_user2 (</span><br><span class="line">id <span class="type">VARCHAR</span> (<span class="number">20</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">NAME <span class="type">VARCHAR</span> (<span class="number">20</span>),</span><br><span class="line">age <span class="type">VARCHAR</span> (<span class="number">20</span>),</span><br><span class="line">KEY (age) <span class="comment">--为age字段创建普通索引，默认索引名就是列名</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/31/203543-811919.png" alt="image-20210131203539463"></p><h3 id="3-3-创建唯一索引"><a href="#3-3-创建唯一索引" class="headerlink" title="3.3  创建唯一索引"></a>3.3  创建唯一索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 给name添加唯一索引</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index name_idx <span class="keyword">on</span> t_user2(name) </span><br><span class="line"></span><br><span class="line">语法结构是：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index 索引名（随便起） <span class="keyword">on</span> 表名（列名）</span><br></pre></td></tr></table></figure><p>或者也可以随着创建表的时候创建索引，效果是一样的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_user3 (</span><br><span class="line">id <span class="type">VARCHAR</span> (<span class="number">20</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">NAME <span class="type">VARCHAR</span> (<span class="number">20</span>),</span><br><span class="line">age <span class="type">VARCHAR</span> (<span class="number">20</span>),</span><br><span class="line"><span class="keyword">unique</span> (age) <span class="comment">-- 唯一索引 age列</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>发现在 show index 的结果中和普通索引没看出什么区别</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/31/205156-794809.png" alt="image-20210131205155493"></p><h3 id="3-4-创建复合索引"><a href="#3-4-创建复合索引" class="headerlink" title="3.4 创建复合索引"></a>3.4 创建复合索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 给name age添加复合索引</span></span><br><span class="line"><span class="keyword">create</span> index name_age <span class="keyword">on</span> t_user5(name,age) </span><br><span class="line"></span><br><span class="line">语法结构是：（和创建普通索引很像，列是多个就可以了）</span><br><span class="line"><span class="keyword">create</span> index 索引名（随便起） <span class="keyword">on</span> 表名（列名<span class="number">1</span>，列名<span class="number">2</span>，列名<span class="number">3.</span>..)  </span><br></pre></td></tr></table></figure><p>或者也可以随着创建表的时候创建索引，效果是一样的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_user4(</span><br><span class="line">id <span class="type">VARCHAR</span> (<span class="number">20</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">name <span class="type">VARCHAR</span> (<span class="number">20</span>),</span><br><span class="line">age <span class="type">VARCHAR</span> (<span class="number">20</span>),</span><br><span class="line">key (name,age) <span class="comment">-- 组合索引</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>复合索引的结果是这样显示的</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/31/205339-731846.png" alt="image-20210131205336533"></p><h3 id="最左匹配原则"><a href="#最左匹配原则" class="headerlink" title="最左匹配原则"></a>最左匹配原则</h3><p>也称<strong>最左前缀匹配原则</strong>，都一样</p><p>指的是在创建的时候，比如创建了该复合索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 给 name age hobby 添加复合索引</span></span><br><span class="line"><span class="keyword">create</span> index name_age <span class="keyword">on</span> t_user5(name,age,hobby) </span><br></pre></td></tr></table></figure><p>那么以下语句在查询时会用到该复合索引吗 ？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 正常查询，可以走索引</span></span><br><span class="line"><span class="keyword">select</span> ... <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;xx&#x27;</span> ,age <span class="operator">=</span> <span class="string">&#x27;xx&#x27;</span>, hobby <span class="operator">=</span> <span class="string">&#x27;xx&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调换一下顺序呢？ 也可以 优化器会自动调整顺序</span></span><br><span class="line"><span class="keyword">select</span> ... <span class="keyword">where</span> hobby <span class="operator">=</span> <span class="string">&#x27;xx&#x27;</span> ,name <span class="operator">=</span> <span class="string">&#x27;xx&#x27;</span> , age <span class="operator">=</span> <span class="string">&#x27;xx&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 少了一个 hobby 或者 hobby和age 呢？ 也可以走这个复合索引</span></span><br><span class="line"><span class="keyword">select</span> ... <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;xx&#x27;</span> ,age <span class="operator">=</span> <span class="string">&#x27;xx&#x27;</span></span><br><span class="line"><span class="keyword">select</span> ... <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;xx&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/31/225559-102662.png" alt="image-20210131225559232"></p><p>这种情况呢？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 少了一个 name 呢？ 不可以</span></span><br><span class="line"><span class="keyword">select</span> ... <span class="keyword">where</span> age <span class="operator">=</span> <span class="string">&#x27;xx&#x27;</span>, hobby <span class="operator">=</span> <span class="string">&#x27;xx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 少了一个 name和age 呢？ 也不可以</span></span><br><span class="line"><span class="keyword">select</span> ... <span class="keyword">where</span>  hobby <span class="operator">=</span> <span class="string">&#x27;xx&#x27;</span></span><br></pre></td></tr></table></figure><p>但是这两个sql再执行计划里type为index，近似于全表扫描</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/31/225329-383301.png" alt="image-20210131225327549"></p><p><strong>总结</strong></p><p>在创建(name,age,hobby) 类似的复合索引时，需要符合最左原则：</p><p>也就是说</p><ul><li>name</li><li>name,age</li><li>name,age,hobby</li></ul><p>最左优先，以最左边的为起点任何连续的索引都能匹配上。<br><strong>但是,</strong> 同时遇到范围查询(&gt;、&lt;、or、between、like)就会停止匹配。</p><blockquote><p>再给出几个参考链接：</p><ul><li><a href="https://blog.csdn.net/sinat_41917109/article/details/88944290?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161210240416780271550695%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=161210240416780271550695&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~top_click~default-1-88944290.pc_v2_rank_blog_default&utm_term=%E6%9C%80%E5%B7%A6%E5%8C%B9%E9%85%8D%E5%8E%9F%E5%88%99+&spm=1018.2226.3001.4450">Mysql最左匹配原则</a></li><li><a href="https://chensj.blog.csdn.net/article/details/108540362?utm_medium=distribute.pc_relevant.none-task-blog-OPENSEARCH-3.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-3.control">MySQL最左匹配原则，道儿上兄弟都得知道的原则</a></li><li><a href="https://blog.csdn.net/dennis211/article/details/78170079">mysql中explain的type的解释</a></li></ul></blockquote><h2 id="4-聚簇索引、非聚簇索引"><a href="#4-聚簇索引、非聚簇索引" class="headerlink" title="4 聚簇索引、非聚簇索引"></a>4 聚簇索引、非聚簇索引</h2><p>上面说了索引的分类，那么其实索引也可以分为这两大种</p><h3 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a>聚簇索引</h3><p>将数据存储与索引放到了一块，索引结构的叶子节点保存了行数据</p><p>（或者简单说：聚簇索引的叶节点就是数据节点。）</p><blockquote><p>因为聚集索引决定了表的存储时的排序，一个表只能有一个物理存储排序,所以只能有一个聚集索引</p></blockquote><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202102/01/001029-442492.png" alt="image-20210201001028792"></p><h3 id="非聚簇索引"><a href="#非聚簇索引" class="headerlink" title="非聚簇索引"></a>非聚簇索引</h3><p>将数据与索引分开存储，索引结构的叶子节点指向了数据对应的位置</p><p>（或者简单说：非聚簇索引的叶节点仍然是索引节点）</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202102/01/001017-452979.png" alt="image-20210201001015940"></p><p><strong>注意：</strong></p><p>在Innodb中，在聚簇索引之上创建的索引称为辅助索引，非聚簇索引都是辅助索引（复合索引、唯一索引、组合索引）。辅助索引叶子节点存储的不再是行的物理位置，而是主键值，辅助索引访问数据总是<strong>需要二次查找</strong>，这就是我们常说的<strong>回表</strong>。</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202102/01/002046-534887.png" alt="image-20210201002045649"></p><p><strong>1.InnoDB中</strong></p><ul><li>InnoDB使用的是聚簇索引，将主键组织到一棵B+树中，而行数据就储存在叶子节点上，若使用“where id=14”这样的条件查找主键，则按照B+树的检索算法即可查找到对应的叶节点，之后获得行数据。</li><li>若对Name列进行条件搜索，则需要两个步骤：第一步在辅助索引8+树中检索Name，到达其叶子节点获取对应的主键。第二步使用主键在主索引B+树种再执行一次B+树检索操作，最姿到达叶子节点即可获取整行数据。(重点在于通过其他键需要建立辅助索引)</li><li><strong>聚簇索引默认是主键</strong>，如果表中没有定义主键，InnoDB会选择一个唯一且非空的索引代替。如果没有这样的索引，InnoDB会隐式定义一个主键(类似oracle中的Rowld)来作为聚簇索引。如果已经设置了主键为聚簇素引又希望再单独设置聚簇索引，必须先删除主键，然后添加我们想要的聚簇素引，最后恢复设置主键即可。</li></ul><p><strong>2 MYISAM</strong><br>MyISAM使用的是非聚簇索引，非聚簇索引的两裸B+树看上去没什么不同，节点的结构完全一致只是存储的内容不同而已，主键索引B+树的节点存储了主键，辅助键索引B+树存储了辅助键。表数据存储在独立的地方，这两颗B+树的叶子节点都使用一个地址指向真正的表数据，对于表数据来说，这两个键没有任何差别。由于索引树是独立的，通过辅助键检索无需访问主键的索引树。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;目录&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;1-什么是索引？&quot;&gt;&lt;a href=&quot;#1-什么是索引？&quot; class=&quot;headerlink&quot; title=&quot;1 什么是索引？&quot;&gt;&lt;/a&gt;1 什么是索引？&lt;/h2&gt;&lt;h3 id=&quot;1-1-官方定义&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="MYSQL" scheme="http://blog.under2.cn/categories/MYSQL/"/>
    
    
    <category term="mysql" scheme="http://blog.under2.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Nginx（转）</title>
    <link href="http://blog.under2.cn/2021/01/29/Nginx%EF%BC%88%E8%BD%AC%EF%BC%89-nginx%E8%BD%AC/"/>
    <id>http://blog.under2.cn/2021/01/29/Nginx%EF%BC%88%E8%BD%AC%EF%BC%89-nginx%E8%BD%AC/</id>
    <published>2021-01-28T16:33:45.599Z</published>
    <updated>2022-09-22T14:45:56.043Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>！本文为转载文章<br>原文连接：<a href="https://www.kuangstudy.com/bbs/1353634800149213186">https://www.kuangstudy.com/bbs/1353634800149213186</a></p></blockquote><h1 id="Nginx-学相伴"><a href="#Nginx-学相伴" class="headerlink" title="Nginx - 学相伴"></a>Nginx - 学相伴</h1><blockquote><p>分享人：秦疆（遇见狂神说）</p></blockquote><h2 id="公司产品出现瓶颈？"><a href="#公司产品出现瓶颈？" class="headerlink" title="公司产品出现瓶颈？"></a>公司产品出现瓶颈？</h2><p>我们公司项目刚刚上线的时候，并发量小，用户使用的少，所以在低并发的情况下，一个jar包启动应用就够了，然后内部tomcat返回内容给用户。<br><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudy98b25257-71be-48f3-8afe-e1226ebc4589.png" alt="img"><br>但是慢慢的，使用我们平台的用户越来越多了，并发量慢慢增大了，这时候一台服务器满足不了我们的需求了。<br><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudy1d77bc35-df30-46fb-8c41-61ff4468d0c9.png" alt="img"><br>于是我们横向扩展，又增加了服务器。这个时候几个项目启动在不同的服务器上，用户要访问，就需要增加一个代理服务器了，通过代理服务器来帮我们转发和处理请求。<br><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudy33ee7313-9356-46e6-a0b2-fc1ed8ef9a62.png" alt="img"><br>我们希望这个代理服务器可以帮助我们接收用户的请求，然后将用户的请求按照规则帮我们转发到不同的服务器节点之上。这个过程用户是无感知的，用户并不知道是哪个服务器返回的结果，我们还希望他可以按照服务器的性能提供不同的权重选择。保证最佳体验！所以我们使用了Nginx。</p><h2 id="什么是Nginx？"><a href="#什么是Nginx？" class="headerlink" title="什么是Nginx？"></a>什么是Nginx？</h2><p>Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。2011年6月1日，nginx 1.0.4发布。</p><p>其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。在全球活跃的网站中有12.18%的使用比率，大约为2220万个网站。</p><p>Nginx 是一个安装非常的简单、配置文件非常简洁（还能够支持perl语法）、Bug非常少的服务。Nginx 启动特别容易，并且几乎可以做到7*24不间断运行，即使运行数个月也不需要重新启动。你还能够不间断服务的情况下进行软件版本的升级。</p><p>Nginx代码完全用C语言从头写成。官方数据测试表明能够支持高达 50,000 个并发连接数的响应。</p><h2 id="Nginx作用？"><a href="#Nginx作用？" class="headerlink" title="Nginx作用？"></a>Nginx作用？</h2><blockquote><p>Http代理，反向代理：作为web服务器最常用的功能之一，尤其是反向代理。</p></blockquote><p>正向代理<br><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudy46bdad36-d3e0-43b0-a223-43360b7e8fc7.png" alt="img"><br>反向代理<br><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudy62a15097-6e2a-4dbe-bcf5-f0d7cab81089.png" alt="img"></p><blockquote><p>Nginx提供的负载均衡策略有2种：内置策略和扩展策略。内置策略为轮询，加权轮询，Ip hash。扩展策略，就天马行空，只有你想不到的没有他做不到的。</p></blockquote><p>轮询<br><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudy4d33dfac-1949-4b2d-abb8-fe0b6e65b8dc.png" alt="img"><br>加权轮询<br><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudyb1e3e440-4159-4259-a174-528b56cb04b2.png" alt="img"><br>iphash对客户端请求的ip进行hash操作，然后根据hash结果将同一个客户端ip的请求分发给同一台服务器进行处理，可以解决session不共享的问题。<br><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudy64acb9a3-cd1a-4c0e-a1fa-9b220046a95a.png" alt="img"></p><blockquote><p>动静分离，在我们的软件开发中，有些请求是需要后台处理的，有些请求是不需要经过后台处理的（如：css、html、jpg、js等等文件），这些不需要经过后台处理的文件称为静态文件。让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作。提高资源响应的速度。</p></blockquote><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudyedb1bbd6-e530-4aba-8fde-68658a10e73f.png" alt="img"></p><p>目前，通过使用Nginx大大提高了我们网站的响应速度，优化了用户体验，让网站的健壮性更上一层楼！</p><h1 id="Nginx的安装"><a href="#Nginx的安装" class="headerlink" title="Nginx的安装"></a>Nginx的安装</h1><h2 id="windows下安装"><a href="#windows下安装" class="headerlink" title="windows下安装"></a>windows下安装</h2><p><strong>1、下载nginx</strong></p><p><a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a> 下载稳定版本。<br>以nginx/Windows-1.16.1为例，直接下载 nginx-1.16.1.zip。<br>下载后解压，解压后如下：</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudyb5a1d538-352c-4aa6-88f7-23d18f0588ab.png" alt="img"></p><p><strong>2、启动nginx</strong></p><p>有很多种方法启动nginx</p><p>(1)直接双击nginx.exe，双击后一个黑色的弹窗一闪而过</p><p>(2)打开cmd命令窗口，切换到nginx解压目录下，输入命令 <code>nginx.exe</code> ，回车即可</p><p><strong>3、检查nginx是否启动成功</strong></p><p>直接在浏览器地址栏输入网址 <a href="http://localhost/">http://localhost:80</a> 回车，出现以下页面说明启动成功！</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudya21688c8-159e-4caa-8e65-3dc056b6b78e.png" alt="img"></p><p><strong>4、配置监听</strong></p><p>nginx的配置文件是conf目录下的nginx.conf，默认配置的nginx监听的端口为80，如果80端口被占用可以修改为未被占用的端口即可。</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudyf23105c4-b0b2-4e22-a1bf-b8098f40c144.png" alt="img"></p><p>当我们修改了nginx的配置文件nginx.conf 时，不需要关闭nginx后重新启动nginx，只需要执行命令 <code>nginx -s reload</code> 即可让改动生效</p><p><strong>5、关闭nginx</strong></p><p>如果使用cmd命令窗口启动nginx， 关闭cmd窗口是不能结束nginx进程的，可使用两种方法关闭nginx</p><p>(1)输入nginx命令 <code>nginx -s stop</code>(快速停止nginx) 或 <code>nginx -s quit</code>(完整有序的停止nginx)</p><p>(2)使用taskkill <code>taskkill /f /t /im nginx.exe</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill是用来终止进程的，/f是强制终止 ./t终止指定的进程和任何由此启动的子进程。/im示指定的进程名称 .</span><br></pre></td></tr></table></figure><h2 id="linux下安装"><a href="#linux下安装" class="headerlink" title="linux下安装"></a>linux下安装</h2><p><strong>1、安装gcc</strong></p><p>安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境，则需要安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++</span><br></pre></td></tr></table></figure><p><strong>2、PCRE pcre-devel 安装</strong></p><p>PCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库。nginx也需要此库。命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure><p><strong>3、zlib 安装</strong></p><p>zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y zlib zlib-devel</span><br></pre></td></tr></table></figure><p><strong>4、OpenSSL 安装</strong><br>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。<br>nginx 不仅支持 http 协议，还支持 https（即在ssl协议上传输http），所以需要在 Centos 安装 OpenSSL 库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure><p><strong>5、下载安装包</strong></p><p>手动下载.tar.gz安装包，地址：<a href="https://nginx.org/en/download.html">https://nginx.org/en/download.html</a></p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudyf51b946d-fda4-4675-b913-2084e028a5c0.png" alt="img"></p><p>下载完毕上传到服务器上 /root</p><p><strong>6、解压</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.18.0.tar.gzcd nginx-1.18.0</span><br></pre></td></tr></table></figure><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudyd8290598-ede7-4b4b-875b-2f447a9c001f.png" alt="img"></p><p><strong>7、配置</strong></p><p>使用默认配置，在nginx根目录下执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configuremakemake install</span><br></pre></td></tr></table></figure><p>查找安装路径： <code>whereis nginx</code></p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudyf80f8dc2-d5df-4bc2-933d-6ce11f388f6e.png" alt="img"></p><h2 id="Nginx常用命令"><a href="#Nginx常用命令" class="headerlink" title="Nginx常用命令"></a>Nginx常用命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin/./nginx  启动./nginx -s stop  停止./nginx -s quit  安全退出./nginx -s reload  重新加载配置文件ps aux|grep nginx  查看nginx进程</span><br></pre></td></tr></table></figure><p>启动成功访问 服务器ip:80</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudyd64b251b-817c-436b-b7a0-57da7bb48cd1.png" alt="img"></p><p>注意：如何连接不上，检查阿里云安全组是否开放端口，或者服务器防火墙是否开放端口！<br>相关命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 开启service firewalld start# 重启service firewalld restart# 关闭service firewalld stop# 查看防火墙规则firewall-cmd --list-all# 查询端口是否开放firewall-cmd --query-port=8080/tcp# 开放80端口firewall-cmd --permanent --add-port=80/tcp# 移除端口firewall-cmd --permanent --remove-port=8080/tcp#重启防火墙(修改配置后要重启防火墙)firewall-cmd --reload# 参数解释1、firwall-cmd：是Linux提供的操作firewall的一个工具；2、--permanent：表示设置为持久；3、--add-port：标识添加的端口；</span><br></pre></td></tr></table></figure><h1 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upstream lb&#123;    server 127.0.0.1:8080 weight=1;    server 127.0.0.1:8081 weight=1;&#125;location / &#123;    proxy_pass http://lb;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;！本文为转载文章&lt;br&gt;原文连接：&lt;a href=&quot;https://www.kuangstudy.com/bbs/1353634800149213186&quot;&gt;https://www.kuangstudy.com/bbs/135363480014921</summary>
      
    
    
    
    <category term="高可用" scheme="http://blog.under2.cn/categories/%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot（二）常用整合</title>
    <link href="http://blog.under2.cn/2021/01/24/SpringBoot%EF%BC%88%E4%BA%8C%EF%BC%89%E5%B8%B8%E7%94%A8%E6%95%B4%E5%90%88-springboot%E4%BA%8C%E5%B8%B8%E7%94%A8%E6%95%B4%E5%90%88/"/>
    <id>http://blog.under2.cn/2021/01/24/SpringBoot%EF%BC%88%E4%BA%8C%EF%BC%89%E5%B8%B8%E7%94%A8%E6%95%B4%E5%90%88-springboot%E4%BA%8C%E5%B8%B8%E7%94%A8%E6%95%B4%E5%90%88/</id>
    <published>2021-01-24T15:37:45.205Z</published>
    <updated>2022-09-22T14:47:05.057Z</updated>
    
    <content type="html"><![CDATA[<p>目录</p><p>[TOC]</p><h1 id="Spring-Data"><a href="#Spring-Data" class="headerlink" title="Spring Data"></a>Spring Data</h1><h2 id="连接MYSQL"><a href="#连接MYSQL" class="headerlink" title="连接MYSQL"></a>连接MYSQL</h2><ul><li>pom 配置</li><li>application.yml 配置</li><li>src\test\java\com\chasing\spring03data\Spring03DataApplicationTests.java 编辑测试类</li></ul><p>pom引入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        JDBC--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        MYSQL--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#application.yml配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">密码</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/数据库名?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>src\test\java\com\chasing\spring03data\Spring03DataApplicationTests.java 编辑测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing.spring03data;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Spring03DataApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">//查看默认的数据源</span></span><br><span class="line">        System.out.println(dataSource.getClass());</span><br><span class="line">        <span class="comment">//获得数据库连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><p>目录</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/231634-7413.png" alt="image-20200827160623874"></p><p>增加Controller，结合网页get测试，直接操作数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing.spring03data.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCcontroller</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//查询数据库的所有信息</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/userList&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String,Object&gt;&gt; <span class="title function_">userList</span> <span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot; select * from account order by id limit 10&quot;</span>;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = jdbcTemplate.queryForList(sql);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(Map map:list)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;(&quot;</span>+ i++ + <span class="string">&quot;)==&gt; &quot;</span>+ map);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//增加</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addAccount</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into account(id,name,memberid,customerId,createTime) values(1,&#x27;小米&#x27;,101,400222000,&#x27;2018-08-27&#x27;)&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;addDONE&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/update/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">updateAccount</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update account set name=? where id=&quot;</span>+id;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">newName</span>  <span class="operator">=</span> <span class="string">&quot;小明&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql,newName);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;updateDONE&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/del/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delAccount</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from account  where id=&quot;</span>+id;</span><br><span class="line">        jdbcTemplate.update(sql);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;delDONE&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用Druid数据源</p><p>什么是druid，参考<a href="https://www.jianshu.com/p/4dc18f5bee47">此博主文章</a></p><ul><li>pom</li><li>application.yml</li><li>配置类</li><li>测试</li></ul><p>pom引入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        druid--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="comment">#?serverTimezone=UTC解决时区的报错</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/boottest01?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span></span><br><span class="line">    <span class="comment">#druid 数据源专有配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line">    <span class="comment">#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority</span></span><br><span class="line">    <span class="comment">#则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure><p>增加配置类com.chasing.spring03data.config.DruidConfig.java </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing.spring03data.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.StatViewServlet;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.WebStatFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidConfig</span> &#123;</span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">druidDataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//后台监控</span></span><br><span class="line">    <span class="comment">//因为Sping内置了servlet容器，所以没有web.xm了,代替方法 ServletRegistrationBean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletRegistrationBean <span class="title function_">a</span><span class="params">()</span>&#123;</span><br><span class="line">        ServletRegistrationBean&lt;StatViewServlet&gt; bean = <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">StatViewServlet</span>(), <span class="string">&quot;/druid/*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//后台需要有人登录，账号密码配置</span></span><br><span class="line">        HashMap&lt;String, String&gt; initParameters = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//增加配置</span></span><br><span class="line">        initParameters.put(<span class="string">&quot;loginUsername&quot;</span>,<span class="string">&quot;admin&quot;</span>);<span class="comment">//登录key 固定的loginUsername loginPassword</span></span><br><span class="line">        initParameters.put(<span class="string">&quot;loginPassword&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="comment">//允许谁可以访问</span></span><br><span class="line">        initParameters.put(<span class="string">&quot;allow&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">//禁止id访问  initParameters.put(&quot;xxx&quot;,&quot;192.xx.xx.xx&quot;);</span></span><br><span class="line"></span><br><span class="line">        bean.setInitParameters(initParameters);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//filter</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean <span class="title function_">webStartFilter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">FilterRegistrationBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line">        bean.setFilter(<span class="keyword">new</span> <span class="title class_">WebStatFilter</span>());</span><br><span class="line">        <span class="comment">//可以过滤那些请求呢</span></span><br><span class="line">        HashMap&lt;String, String&gt; initParameters = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//这些东西不进行统计</span></span><br><span class="line">        initParameters.put(<span class="string">&quot;exclusions&quot;</span>,<span class="string">&quot;*.js,*.css,/druid/*&quot;</span>);</span><br><span class="line">        bean.setInitParameters(initParameters);</span><br><span class="line">        <span class="keyword">return</span>  bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问<a href="http://localhost:8080/druid/login.html">http://localhost:8080/druid/login.html</a></p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/231638-994993.png" alt="image-20200827224336813"></p><p>显示druid自带的监控页面，输入在DruidConfig配置类里配置的用户名密码，就可以查看一些信息</p><h1 id="整合Mybatis"><a href="#整合Mybatis" class="headerlink" title="整合Mybatis"></a>整合Mybatis</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>mybatis-spring-boot-starter</p><ul><li>pom引入</li><li>application.yml 配置</li><li>编辑测试类</li></ul><p>pom引入</p><p>（也可以直接创建springboot项目，然后导入web，jdbcapi，mysql模块。最后再引入mybatis的starter即可）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.chasing<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot05-data<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot05-data<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  的</span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.chasing.Springboot05DataApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.yml 配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xxxx</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/数据库名?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>com\chasing\Springboot05DataApplicationTests.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot05DataApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        System.out.println(dataSource.getClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/232646-322027.png" alt="image-20200828233210077"></p><h2 id="CRUD-1"><a href="#CRUD-1" class="headerlink" title="CRUD"></a>CRUD</h2><p>目录<br><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/231643-981293.png" alt="image-20200830124531321"></p><p>表字段</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/231714-951537.png" alt="image-20200830124920014"></p><p>src\main\resources\mybatis\mapper\AccountMapper.xml</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.chasing.mapper.AccountMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    查询其全部--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAccountList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Account&quot;</span> &gt;</span></span><br><span class="line">        SELECT * from account LIMIT 15</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    根据id进行查询--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAccountById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Account&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        SELECT * from account WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    插入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addAccount&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Account&quot;</span>&gt;</span></span><br><span class="line">        INSERT INTO account (id,name,memberId,customerId,createTime) VALUES (#&#123;id&#125;,#&#123;name&#125;,#&#123;memberId&#125;,#&#123;customerId&#125;,NOW())</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    修改--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateAccount&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Account&quot;</span>&gt;</span></span><br><span class="line">        UPDATE account set name=#&#123;name&#125;,memberId=#&#123;memberId&#125;,customerId=#&#123;customerId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    删除--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delAccount&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> &gt;</span></span><br><span class="line">        DELETE FROM account where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>com\chasing\mapper\AccountMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.chasing.pojo.Account;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示这一个mybatis的mapper Dao</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountMapper</span> &#123;</span><br><span class="line">    <span class="comment">//查询全部</span></span><br><span class="line">    List&lt;Account&gt; <span class="title function_">queryAccountList</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//根据id查</span></span><br><span class="line">    Account <span class="title function_">queryAccountById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">    <span class="comment">//增加</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">addAccount</span><span class="params">(Account account)</span>;</span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateAccount</span><span class="params">(Account account)</span>;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">delAccount</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>src\main\java\com\chasing\controller\AccountController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing.controller;</span><br><span class="line"><span class="keyword">import</span> com.chasing.mapper.AccountMapper;</span><br><span class="line"><span class="keyword">import</span> com.chasing.pojo.Account;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Account&gt; <span class="title function_">queryAccountList</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Account&gt; accounts = accountMapper.queryAccountList();</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Account account:accounts )&#123;</span><br><span class="line">            System.out.println(count++ + <span class="string">&quot;==&gt;&quot;</span>+ account);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> accounts;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/findByid/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Account <span class="title function_">queryAccountById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> accountMapper.queryAccountById(id);</span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">add</span><span class="params">( )</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> accountMapper.addAccount(<span class="keyword">new</span> <span class="title class_">Account</span>(<span class="number">13</span>, <span class="string">&quot;19911110002&quot;</span>, <span class="string">&quot;333&quot;</span>, <span class="string">&quot;400222002&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>().toString()));</span><br><span class="line">        <span class="keyword">return</span> i.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> accountMapper.updateAccount(<span class="keyword">new</span> <span class="title class_">Account</span>(<span class="number">3</span>,<span class="string">&quot;新的&quot;</span>,<span class="string">&quot;102&quot;</span>,<span class="string">&quot;400222002&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>().toString()));</span><br><span class="line">        <span class="keyword">return</span> i.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/del/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">del</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> accountMapper.delAccount(id);</span><br><span class="line">        <span class="keyword">return</span> i.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h1><h3 id="简介参考此博客：链接"><a href="#简介参考此博客：链接" class="headerlink" title="简介参考此博客：链接"></a>简介参考此博客：<a href="https://blog.csdn.net/taojin12/article/details/88343990">链接</a></h3><h1 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h1><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>pom引入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建java<br><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/231655-671399.png" alt="image-20200904232114743"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span> <span class="comment">//开启Swagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问<br><a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></p><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><p>在上面的java文件中增加配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing.config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span> <span class="comment">//开启Swagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置swagger的Docket的bean实例2</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2).apiInfo(apiInfo());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//配置swagger信息=api info</span></span><br><span class="line">    <span class="keyword">public</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//作者信息</span></span><br><span class="line">        <span class="type">Contact</span> <span class="variable">DEFAULT_CONTACT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;作者名&quot;</span>, <span class="string">&quot;https://xxxx&quot;</span>, <span class="string">&quot;xxxx@qq.com&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfo</span>(</span><br><span class="line">                <span class="string">&quot;我的swagger API文档&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Api Documentation&quot;</span>,</span><br><span class="line">                <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;urn:tos&quot;</span>,</span><br><span class="line">                DEFAULT_CONTACT,</span><br><span class="line">                <span class="string">&quot;Apache 2.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayList</span>()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后：<br><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/231652-329048.png" alt="image-20200905101000032"></p><hr><h1 id="questions"><a href="#questions" class="headerlink" title="questions"></a>questions</h1><p>@Validated的作用</p><p>@ConfigurationProperties 与 @PropertySource的区别</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;目录&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Spring-Data&quot;&gt;&lt;a href=&quot;#Spring-Data&quot; class=&quot;headerlink&quot; title=&quot;Spring Data&quot;&gt;&lt;/a&gt;Spring Data&lt;/h1&gt;&lt;h2 id=&quot;连接MYSQ</summary>
      
    
    
    
    <category term="SpringBoot" scheme="http://blog.under2.cn/categories/SpringBoot/"/>
    
    
    <category term="SpringBoot" scheme="http://blog.under2.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot（一）配置介绍、项目搭建</title>
    <link href="http://blog.under2.cn/2021/01/24/SpringBoot%EF%BC%88%E4%B8%80%EF%BC%89%E9%85%8D%E7%BD%AE%E4%BB%8B%E7%BB%8D%E3%80%81%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA-springboot%E4%B8%80%E9%85%8D%E7%BD%AE%E4%BB%8B%E7%BB%8D%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/"/>
    <id>http://blog.under2.cn/2021/01/24/SpringBoot%EF%BC%88%E4%B8%80%EF%BC%89%E9%85%8D%E7%BD%AE%E4%BB%8B%E7%BB%8D%E3%80%81%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA-springboot%E4%B8%80%E9%85%8D%E7%BD%AE%E4%BB%8B%E7%BB%8D%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</id>
    <published>2021-01-24T15:31:35.815Z</published>
    <updated>2022-09-22T14:47:08.995Z</updated>
    
    <content type="html"><![CDATA[<p>目录<br>[TOC]</p><hr><p><strong>martinfowler关于微服务的论文</strong></p><ul><li><p><a href="http://martinfowler.com/articles/microservices.html">微服务论文——原文链接</a></p></li><li><p><a href="http://mp.weixin.qq.com/s?__biz=MjM5MjEwNTEzOQ==&mid=401500724&idx=1&sn=4e42fa2ffcd5732ae044fe6a387a1cc3#rd">微服务论文——译文链接</a></p></li></ul><h2 id="1-项目搭建"><a href="#1-项目搭建" class="headerlink" title="1. 项目搭建"></a>1. 项目搭建</h2><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>IDEA：new project，然后spring initializr</p><p>springBoot的作用简单说就是：简化开发</p><p>写Demo时，直接再springBootApplication启动类 同级目录 创建 controller service dao等即可</p><p>比如 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package com.yue.springboot.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    @ResponseBody</span><br><span class="line">    @RequestMapping(&quot;/hello&quot;)</span><br><span class="line">    public String hello()&#123;</span><br><span class="line">        return  &quot;SpringBoot for WebCrud&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/success&quot;)</span><br><span class="line">    public String success(Map&lt;String,Object&gt; map)&#123;</span><br><span class="line">        map.put(&quot;user&quot;,&quot;胖子&quot;);</span><br><span class="line">        return &quot;success&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动后</p><p>浏览器通过<a href="http://localhost:8080/hello">http://localhost:8080/hello</a> 显示 <code>SpringBoot for WebCrud </code>字样</p><p>可以在 application.properties 通过 <code>server.port=8080</code>修改端口</p><h3 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h3><ol><li><p>首先需自动编译</p><ol><li>打开顶部工具栏  File -&gt; Settings -&gt; Default Settings -&gt; Build -&gt; Compiler  然后勾选 Build project automatically<br><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/231539-478277.png" alt="image-20200816193757349"></li><li>同时按住 Ctrl + Shift + Alt + /  然后进入Registry ，勾选自动编译并调整延时参数。<img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/231538-421773.png" alt="image-20200816193612025"></li></ol></li><li><p>pom文件 添加热部署插件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="2-自动配置初探"><a href="#2-自动配置初探" class="headerlink" title="2. 自动配置初探"></a>2. 自动配置初探</h2><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><p>版本控制都在<code>spring-boot-dependencies-2.3.0.RELEASE.pom</code></p><h3 id="starter-启动器"><a href="#starter-启动器" class="headerlink" title="starter 启动器"></a>starter 启动器</h3><p>启动器：就是SpringBoot的启动场景</p><p>根据场景，使用对应的启动器就可以，<a href="https://www.springcloud.cc/spring-boot.html#using-boot-starter">starters 参考文档</a></p><h3 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h3><p>@SpringBootApplication</p><ul><li><p>@SpringBootConfiguration：SpringBoot的配置</p><ul><li>@Configuration：Spring配置类<ul><li>@Component：说明这也是Spring的一个组件</li></ul></li></ul></li><li><p>@EnableAutoConfiguration：自动配置</p><ul><li><p>@AutoConfigurationPackage：自动配置包</p><ul><li>@Import({Registrar.class})包注册</li></ul></li><li><p>@Import({AutoConfigurationImportSelector.class})：导入选择器</p><ul><li><p>List<String> configurations = this.getCandidateConfigurations(annotationMetadata, attributes)：</p><p>获取候选的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">protected List&lt;String&gt; getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) &#123;</span><br><span class="line">    List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(this.getSpringFactoriesLoaderFactoryClass(), this.getBeanClassLoader());</span><br><span class="line">    Assert.notEmpty(configurations, &quot;No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct.&quot;);</span><br><span class="line">    return configurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><p>spring-boot-autoconfigure/2.3.0.RELEASE/spring-boot-autoconfigure-2.3.0.RELEASE.jar!/META-INF/spring.factories<br>核心配置文件</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/231934-306448.png" alt="image-20200817230359568"></p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/231537-316508.png" alt="image-20200817230359568"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> PropertiesLoaderUtils.loadProperties(resource);</span><br></pre></td></tr></table></figure><p>所有的资源加载到配置类中</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li><p>SpringBoot在启动的时候，从类路径下的<code>META-INF/spring.factories</code>获取指定的值：</p></li><li><p>将这些自动配置的类导入容器，自动配置就会生效</p></li></ol><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>SpringBoot所有自动配置是在启动的时候扫描并加载：<code>spring.factories</code>所有的自动配置类都在这里面，但是不一定会生效，要判断条件是否成立，只要导入了对应的start，就有对应的启动器了，有了启动器，我们自动装配就会生效，然后就配置成功！</p><h2 id="3-基础配置"><a href="#3-基础配置" class="headerlink" title="3. 基础配置"></a>3. 基础配置</h2><h3 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h3><p>也可以写做：yml</p><p><code>application.yaml</code>和<code>application.properties</code>可以作为Spring的配置文件，来更改SpringBoot的默认配置</p><p><code>application.yaml</code> 写法</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 写法是 key: value （value前面必须有个一个空格。用空格的多少来控制属性的同级or上下级关系）</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="comment">## 对象</span></span><br><span class="line"><span class="attr">student:</span></span><br><span class="line"> <span class="attr">name:</span> <span class="string">shangsan</span></span><br><span class="line"> <span class="attr">sex:</span> <span class="number">0</span></span><br><span class="line"><span class="comment">## 对象行内写法</span></span><br><span class="line"><span class="attr">person:</span> &#123;<span class="attr">name:</span> <span class="string">lisi</span>,<span class="attr">age:</span> <span class="number">18</span>&#125;</span><br><span class="line"><span class="comment">## 列表</span></span><br><span class="line"><span class="attr">pets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pig</span></span><br><span class="line"><span class="comment">## 列表行内写法</span></span><br><span class="line"><span class="attr">pets:</span> [<span class="string">cat</span>,<span class="string">dog</span>,<span class="string">pig</span>]</span><br></pre></td></tr></table></figure><p><code>application.properties</code> 写法</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">student.name</span>=<span class="string">zhangsan</span></span><br><span class="line"><span class="attr">student.sex</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure><h3 id="Demo：配置文件读取"><a href="#Demo：配置文件读取" class="headerlink" title="Demo：配置文件读取"></a>Demo：配置文件读取</h3><ul><li>写配置文件</li><li>创建实体类<ul><li>Person.java</li><li>Dog.java</li></ul></li><li>测试</li></ul><p>代码</p><p><code>application.yaml</code>配置文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 1. yaml支持松散绑定 比如 last-name 可以匹配 lastName 属性</span></span><br><span class="line"><span class="comment">## 2. 可以利用$&#123;&#125;来插入一些东西，比如$&#123;randomm.uuid&#125;等等</span></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line"> <span class="attr">name:</span> <span class="string">小明</span></span><br><span class="line"> <span class="attr">sex:</span> <span class="string">男</span></span><br><span class="line"> <span class="attr">happy:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">brithday:</span> <span class="number">2019</span><span class="string">/11/02</span></span><br><span class="line"> <span class="attr">maps:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>,<span class="attr">k2:</span> <span class="string">v2</span>,<span class="attr">k3:</span> <span class="string">v3</span>&#125;</span><br><span class="line"> <span class="attr">dog:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">黑黑</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">6</span></span><br><span class="line">  <span class="attr">friends:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">小明</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">小明2</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">小明3</span></span><br></pre></td></tr></table></figure><p>实体类</p><ol><li><code>Person.java</code>:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing.pojo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用<span class="doctag">@ConfigurationProperties</span>注解 需要在pom文件中添加依赖</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;dependency&gt;</span></span><br><span class="line"><span class="comment"> *             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment"> *             &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment"> *             &lt;optional&gt;true&lt;/optional&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  要是自己建立别的配置文件 比如：myconfig.properties</span></span><br><span class="line"><span class="comment"> *  就不能用<span class="doctag">@ConfigurationProperties</span> </span></span><br><span class="line"><span class="comment"> *      而是需要用这个注解 来指定配置文件 <span class="doctag">@PropertySource</span>(value = &quot;classpath:myconfig.properties&quot;)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> *  并且 需要配合SPEL表达式，如：</span></span><br><span class="line"><span class="comment"> *      <span class="doctag">@Value</span>(&quot;$&#123;name1&#125;&quot;)</span></span><br><span class="line"><span class="comment"> *      private String name;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex ;</span><br><span class="line">    <span class="keyword">private</span> Boolean happy;</span><br><span class="line">    <span class="keyword">private</span> Date brithday;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">public</span>  <span class="title function_">Person</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, String sex, Boolean happy, Date brithday, Map&lt;String, Object&gt; maps, Dog dog)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.happy = happy;</span><br><span class="line">        <span class="built_in">this</span>.brithday = brithday;</span><br><span class="line">        <span class="built_in">this</span>.maps = maps;</span><br><span class="line">        <span class="built_in">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//toString + Getter + Setter 省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>Dog.java</code>:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing.pojo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> List friends;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name, Integer age, List friends)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.friends = friends;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//toString + Getter + Setter 省略</span></span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试，利用自带的测试类</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/232120-481917.png" alt="image-20200818220107944"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing;</span><br><span class="line"><span class="keyword">import</span> com.chasing.pojo.Dog;</span><br><span class="line"><span class="keyword">import</span> com.chasing.pojo.Person;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot02ConfigApplicationTests</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Person p1;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(p1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行：<img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/233224-435299.png" alt="image-20200818221013873"></p><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person&#123;name=<span class="string">&#x27;小明&#x27;</span>, sex=<span class="string">&#x27;男&#x27;</span>, happy=<span class="literal">true</span>, brithday=Sat Nov <span class="number">02</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">2019</span>, maps=&#123;k1=v1, k2=v2, k3=v3&#125;, dog=Dog&#123;name=<span class="string">&#x27;黑黑&#x27;</span>, age=<span class="number">6</span>, friends=[小明, 小明<span class="number">2</span>, 小明<span class="number">3</span>]&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在实际使用中，推荐使用<code>yml</code>的方式</p><h3 id="JSR303校验"><a href="#JSR303校验" class="headerlink" title="JSR303校验"></a>JSR303校验</h3><ol><li><p>加入pom依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用</p><ul><li>```java<br>@Component<br>@Validated //@validated来校验数据，如果数据异常则会统一抛出异常，方便异常中心统一处理。<br>@ConfigurationProperties(prefix = “blackdog”)<br>public class Dog {<pre><code> //2.在属性上进行校验 这里的意思是年龄超过51 报错信息为‘年龄错了’@Max(value = 5l,message = &quot;年龄错了&quot;)private Integer age;private List friends;</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">其他校验注解</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">@NotNull(message=&quot;名字不能为空&quot;)</span><br><span class="line">private String userName;</span><br><span class="line">@Max(value=120,message=&quot;年龄最大不能查过120&quot;)</span><br><span class="line">private int age;</span><br><span class="line">@Email(message=&quot;邮箱格式错误&quot;)</span><br><span class="line">private String email;</span><br><span class="line"></span><br><span class="line">空检查</span><br><span class="line">@Null       验证对象是否为null</span><br><span class="line">@NotNull    验证对象是否不为null, 无法查检长度为0的字符串</span><br><span class="line">@NotBlank   检查约束字符串是不是Null还有被Trim的长度是否大于0,只对字符串,且会去掉前后空格.</span><br><span class="line">@NotEmpty   检查约束元素是否为NULL或者是EMPTY.</span><br><span class="line">    </span><br><span class="line">Booelan检查</span><br><span class="line">@AssertTrue     验证 Boolean 对象是否为 true  </span><br><span class="line">@AssertFalse    验证 Boolean 对象是否为 false  </span><br><span class="line">    </span><br><span class="line">长度检查</span><br><span class="line">@Size(min=, max=) 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内  </span><br><span class="line">@Length(min=, max=) string is between min and max included.</span><br><span class="line"></span><br><span class="line">日期检查</span><br><span class="line">@Past       验证 Date 和 Calendar 对象是否在当前时间之前  </span><br><span class="line">@Future     验证 Date 和 Calendar 对象是否在当前时间之后  </span><br><span class="line">@Pattern    验证 String 对象是否符合正则表达式的规则</span><br><span class="line"></span><br><span class="line">.......等等</span><br><span class="line">除此以外，我们还可以自定义一些数据校验规则</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="配置文件的加载及优先级"><a href="#配置文件的加载及优先级" class="headerlink" title="配置文件的加载及优先级"></a>配置文件的加载及优先级</h3><p>1。 springboot启动会扫描以下位置的application.properties或者application.yml作为默认的配置文件</p><ul><li><p>工程根目录:./config/</p></li><li><p>工程根目录：./</p></li><li><p>classpath:/config/</p></li><li><p>classpath:/</p><p>加载的优先级顺序是从上向下加载，并且所有的文件都会被加载，高优先级的内容会覆盖底优先级的内容，形成互补配置</p></li></ul><ol start="2"><li>也可以通过指定配置spring.config.location来改变默认配置，一般在项目已经打包后，我们可以通过指令 　　java -jar xxxx.jar –spring.config.location=D:/kawa/application.yml来加载外部的配置</li></ol><h3 id="多环境切换"><a href="#多环境切换" class="headerlink" title="多环境切换"></a>多环境切换</h3><p><strong>方式一：</strong></p><ol><li><p>建立一个 application配置文件</p></li><li><p>建立其他配置文件（名字格式必须是<code>application-xxx</code>）</p><p>比如 开发环境是<code>application-dev.yaml</code>，``application-dev.test`是测试环境1</p></li></ol><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/231032-644390.png" alt="image-20200819232647583"></p><p>3.文件中通过<img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/232222-749101.png" alt="image-20200819232909507">来指定配置文件，来方便的切换</p><p><strong>方式二：</strong></p><p>只写一个配置文件<code>application.yml</code> 通过<code>active</code>来指定配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"> <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="comment"># 启动dev的1配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">profiles:</span></span><br><span class="line">  <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 配置一</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"> <span class="attr">port:</span> <span class="number">8084</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 配置二</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"> <span class="attr">port:</span> <span class="number">8086</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="静态资源优先级"><a href="#静态资源优先级" class="headerlink" title="静态资源优先级"></a>静态资源优先级</h3><p>resources &gt; static &gt; public</p><p>首页：在resources、 static、 public中刃任意一个放如index.html即可</p><p>templates下的文件只能通过 controller来进行跳转</p><h3 id="Thymeleaf"><a href="#Thymeleaf" class="headerlink" title="Thymeleaf"></a>Thymeleaf</h3><h4 id="配置Thymeleaf"><a href="#配置Thymeleaf" class="headerlink" title="配置Thymeleaf"></a>配置Thymeleaf</h4><ol><li>pom引入</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;!--thymeleaf--&gt;</span></span><br><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line">　　<span class="string">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">　　<span class="string">&lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>Html引入</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>在setting中开始输入提示</li></ol><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/231230-719796.png" alt="image-20200821221356141"></p><h4 id="Demo-1"><a href="#Demo-1" class="headerlink" title="Demo"></a>Demo</h4><ul><li>test.HTML</li><li>HelloController.java</li></ul><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/231339-519699.png" alt="image-20200821222449699"></p><p>test.HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>SpringBoot<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>  &gt;</span>Done<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>HelloController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(Model modle)</span>&#123;</span><br><span class="line">        modle.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;i can ! &quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/231355-208750.png" alt="image-20200821222711706">s’sss</p><h2 id="4-员工管理系统"><a href="#4-员工管理系统" class="headerlink" title="4. 员工管理系统"></a>4. 员工管理系统</h2><h3 id="4-1-准备工作"><a href="#4-1-准备工作" class="headerlink" title="4.1 准备工作"></a>4.1 准备工作</h3><p>概要</p><ul><li>安装<code>lombok</code></li><li>编写实体类 <code>Department.java Employee.java</code> 部门和员工类</li><li>编写Dao <code>DepartmentDao.java EmployeeDao.java</code>（不用装数据库，暂时在Dao中模拟数据）</li><li>导入前台模板</li></ul><h4 id="使用lombok简化开发"><a href="#使用lombok简化开发" class="headerlink" title="使用lombok简化开发"></a>使用<code>lombok</code>简化开发</h4><blockquote><p>LomBok作用：简单说就是通过<strong>加注解</strong>的方式，帮你<strong>自动生成</strong>toString\Getter\Setter\构造函数\equals方法等等，不用我们手动去编写，代码也看起来更加简洁</p></blockquote><ol><li><p>pom引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>安装lombok插件。（两种情况）<br>现在新版本的IDEA可能在商场里搜不到<code>lombok</code>插件，先试着搜插件，若能搜到就<strong>Install</strong>。进入第三步<br><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/231500-172708.png" alt="image-20200823090201181"></p><p>若搜索不到</p><p>进入<a href="https://plugins.jetbrains.com/plugin/6317-lombok/versions">该网址下载lombok</a>插件，要根据你的IDEA版本下载<br><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/231613-403847.png" alt="image-20200823090449769"></p><p>下载后安装lombok</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/232315-690478.png" alt="image-20200823091721045"></p><p>然后找到你下载的lombok <img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/232408-147082.png" alt="image-20200823091908092"> 进行安装即可，提示restart就restart</p></li><li><p>使用lombok<br>根据需要在类上加注解，即可<br><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/232319-805115.png" alt="image-20200823090946293"></p><p>注解含义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">常用注解：</span><br><span class="line"><span class="meta">@Setter</span> ：注解在类或字段，注解在类时为所有字段生成setter方法，注解在字段上时只为该字段生成setter方法。</span><br><span class="line"><span class="meta">@Getter</span> ：使用方法同上，区别在于生成的是getter方法。</span><br><span class="line"><span class="meta">@ToString</span> ：注解在类，添加toString方法。</span><br><span class="line"><span class="meta">@EqualsAndHashCode</span>： 注解在类，生成hashCode和equals方法。</span><br><span class="line"><span class="meta">@NoArgsConstructor</span>： 注解在类，生成无参的构造方法。</span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span>： 注解在类，为类中需要特殊处理的字段生成构造方法，比如<span class="keyword">final</span>和被<span class="meta">@NonNull</span>注解的字段。</span><br><span class="line"><span class="meta">@AllArgsConstructor</span>： 注解在类，生成包含类中所有字段的构造方法。</span><br><span class="line"><span class="meta">@Data</span>： 注解在类，生成setter/getter、equals、canEqual、hashCode、toString方法，如为<span class="keyword">final</span>属性，则不会为该属性生成setter方法。</span><br><span class="line"><span class="meta">@Slf4j</span>： 注解在类，生成log变量，严格意义来说是常量。</span><br></pre></td></tr></table></figure></li></ol><h4 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h4><p><code>src\main\java\com\chasing\pojo\Department.java</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Department</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//id</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">//部门名字</span></span><br><span class="line">    <span class="keyword">private</span> String departmentName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>src\main\java\com\chasing\pojo\Employee.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Integer gender; <span class="comment">// 0 famle ,1 male</span></span><br><span class="line">    <span class="keyword">private</span> Department department;</span><br><span class="line">    <span class="keyword">private</span> Date brith;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(Integer id, String lastName, String email, Integer gender, Department department)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.lastName = lastName;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">        <span class="built_in">this</span>.department = department;</span><br><span class="line">        <span class="built_in">this</span>.brith = <span class="keyword">new</span> <span class="title class_">Date</span>();<span class="comment">//每次都用当前时间代替</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写Dao"><a href="#编写Dao" class="headerlink" title="编写Dao"></a>编写Dao</h4><p><code>src\main\java\com\chasing\dao\EmployeeDao.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing.dao;</span><br><span class="line"><span class="keyword">import</span> com.chasing.pojo.Department;</span><br><span class="line"><span class="keyword">import</span> com.chasing.pojo.Employee;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DepartmentDao departmentDao;</span><br><span class="line">    <span class="comment">//模拟数据库中的员工数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Employee&gt; employees = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        employees = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Employee&gt;();</span><br><span class="line">        employees.put(<span class="number">1001</span>,<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1001</span>,<span class="string">&quot;小米&quot;</span>,<span class="string">&quot;4832747382@qq.com&quot;</span>,<span class="number">1</span>,<span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">104</span>,<span class="string">&quot;建设部&quot;</span>)));</span><br><span class="line">        employees.put(<span class="number">1002</span>,<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1002</span>,<span class="string">&quot;小黄&quot;</span>,<span class="string">&quot;6122212@qq.com&quot;</span>,<span class="number">0</span>,<span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">102</span>,<span class="string">&quot;体育部&quot;</span>)));</span><br><span class="line">        employees.put(<span class="number">1003</span>,<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1003</span>,<span class="string">&quot;小名&quot;</span>,<span class="string">&quot;1025047382@qq.com&quot;</span>,<span class="number">0</span>,<span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">101</span>,<span class="string">&quot;教学部&quot;</span>)));</span><br><span class="line">        employees.put(<span class="number">1004</span>,<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1004</span>,<span class="string">&quot;小分&quot;</span>,<span class="string">&quot;233747382@qq.com&quot;</span>,<span class="number">1</span>,<span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">105</span>,<span class="string">&quot;学习部&quot;</span>)));</span><br><span class="line">        employees.put(<span class="number">1005</span>,<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1005</span>,<span class="string">&quot;小五&quot;</span>,<span class="string">&quot;8789482@qq.com&quot;</span>,<span class="number">1</span>,<span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">103</span>,<span class="string">&quot;图书部&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主键自增</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">initId</span> <span class="operator">=</span> <span class="number">1006</span>;</span><br><span class="line">    <span class="comment">//增加一个员工</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(employee.getId() == <span class="literal">null</span>)&#123;</span><br><span class="line">            employee.setId(initId++);</span><br><span class="line">        &#125;</span><br><span class="line">        employee.setDepartment(departmentDao.getDepartmentByid(employee.getDepartment().getId()));</span><br><span class="line">        employees.put(employee.getId(),employee);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询全部员工信息</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;Employee&gt; <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employees.values();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据id查询员工</span></span><br><span class="line">    <span class="keyword">public</span> Employee <span class="title function_">getEmployeeeById</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employees.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除员工通过id</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delEmployeeeById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        employees.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>src\main\java\com\chasing\dao\DepartmentDao.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing.dao;</span><br><span class="line"><span class="keyword">import</span> com.chasing.pojo.Department;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="comment">//部门Dao</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DepartmentDao</span> &#123;</span><br><span class="line">    <span class="comment">//模拟数据库中的部门数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Department&gt; departments = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        departments = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Department&gt;();</span><br><span class="line">        departments.put(<span class="number">101</span>,<span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">101</span>,<span class="string">&quot;教学部&quot;</span>));</span><br><span class="line">        departments.put(<span class="number">101</span>,<span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">102</span>,<span class="string">&quot;体育部&quot;</span>));</span><br><span class="line">        departments.put(<span class="number">101</span>,<span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">103</span>,<span class="string">&quot;学习部&quot;</span>));</span><br><span class="line">        departments.put(<span class="number">101</span>,<span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">104</span>,<span class="string">&quot;建设部&quot;</span>));</span><br><span class="line">        departments.put(<span class="number">101</span>,<span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">105</span>,<span class="string">&quot;图书部&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取所有的部门信息</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;Department&gt; <span class="title function_">getDepartment</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  departments.values();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据id获取部门</span></span><br><span class="line">    <span class="keyword">public</span> Department <span class="title function_">getDepartmentByid</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> departments.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="导入前台模板"><a href="#导入前台模板" class="headerlink" title="导入前台模板"></a>导入前台模板</h4><ul><li><p>链接：<a href="https://pan.baidu.com/s/1mr3L6PB47aOuVBzUSB2CCw">https://pan.baidu.com/s/1mr3L6PB47aOuVBzUSB2CCw</a> </p><ul><li>提取码：5vrg</li></ul></li><li><p>模板样式</p></li></ul><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/231622-889945.png" alt="image-20200823095357517"></p><ul><li>如图copy到项目<br><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/231623-788551.png" alt="image-20200823095206084"></li></ul><h3 id="4-2-登录功能和拦截器"><a href="#4-2-登录功能和拦截器" class="headerlink" title="4.2 登录功能和拦截器"></a>4.2 登录功能和拦截器</h3><ul><li>在<code>index.html</code>的表单加入name属性，并加入</li><li>编写<code>LoginController.java</code>控制器</li><li>编写<code>LoginHandlerInterceptor.java</code>拦截器</li><li>编写<code>MyMvcConfig.java</code>配置mvc</li></ul><p><code>src\main\resources\templates\index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;h3 mb-3 font-weight-normal&quot;</span>&gt;</span>Please sign in<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--若登录错误，在界面上显示提示信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;not #strings.isEmpty(msg)&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--加上name=uname字段，便于和后台交互--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Username&quot;</span> <span class="attr">required</span>=<span class="string">&quot;&quot;</span> <span class="attr">autofocus</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--加上name=pwd字段，便于和后台交互--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span> <span class="attr">required</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>src\main\java\com\chasing\controller\LoginController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing.controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpCookie;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(<span class="meta">@RequestParam(&quot;uname&quot;)</span> String uname,</span></span><br><span class="line"><span class="params">                        <span class="meta">@RequestParam(&quot;pwd&quot;)</span> String pwd,</span></span><br><span class="line"><span class="params">                        Model model, HttpSession session)</span>&#123;</span><br><span class="line">        <span class="comment">//若登录成功 则重定向到主界面（简单判断用户名不为空 和 密码=121）</span></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(uname) &amp;&amp; <span class="string">&quot;121&quot;</span>.equals(pwd))&#123;</span><br><span class="line">           <span class="comment">//将用户名存入session 便于 拦截器 进行判断</span></span><br><span class="line">            session.setAttribute(<span class="string">&quot;loginUser&quot;</span>,uname);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/main&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//否则，告诉用户登陆失败</span></span><br><span class="line">            model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;用户名或者密码错误!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>src\main\java\com\chasing\config\LoginHandlerInterceptor.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing.config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginHandlerInterceptor</span>  <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//登录时候应该有用户的session</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">loginUser</span> <span class="operator">=</span> request.getSession().getAttribute(<span class="string">&quot;loginUser&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(loginUser != <span class="literal">null</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        request.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;没有权限，请先登录！&quot;</span>);</span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/index&quot;</span>).forward(request,response);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>src\main\java\com\chasing\config\MyMvcConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ViewControllerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/index&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/404&quot;</span>).setViewName(<span class="string">&quot;404&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/main&quot;</span>).setViewName(<span class="string">&quot;dashboard&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/list&quot;</span>).setViewName(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//addInterceptor(new LoginHandlerInterceptor()) 拦截后进入我们自定义的拦截器</span></span><br><span class="line">        <span class="comment">//addPathPatterns(&quot;/**&quot;) 拦截所用请求</span></span><br><span class="line">        <span class="comment">//excludePathPatterns(&quot;/index&quot;,&quot;/&quot;,&quot;/user/login&quot;,&quot;/css/*&quot;,&quot;/js/**&quot;,&quot;/img/**&quot;); //但是，以上请求不拦截</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginHandlerInterceptor</span>())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/index&quot;</span>,<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/user/login&quot;</span>,<span class="string">&quot;/css/*&quot;</span>,<span class="string">&quot;/js/**&quot;</span>,<span class="string">&quot;/img/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;目录&lt;br&gt;[TOC]&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;martinfowler关于微服务的论文&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://martinfowler.com/articles/microservices.htm</summary>
      
    
    
    
    <category term="SpringBoot" scheme="http://blog.under2.cn/categories/SpringBoot/"/>
    
    
    <category term="SpringBoot" scheme="http://blog.under2.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="http://blog.under2.cn/2021/01/24/Docker-docker/"/>
    <id>http://blog.under2.cn/2021/01/24/Docker-docker/</id>
    <published>2021-01-24T15:03:34.731Z</published>
    <updated>2022-09-22T14:43:13.002Z</updated>
    
    <content type="html"><![CDATA[<p>Docker</p><p>[TOC]</p><h2 id="1-Docker-为什么会出现？"><a href="#1-Docker-为什么会出现？" class="headerlink" title="1. Docker 为什么会出现？"></a>1. Docker 为什么会出现？</h2><p>一款产品：开发-上线 两套环境 ！应用环境， 应用配置！</p><p>可以一个产品在开发环境可以正常运行！版本更新导致运维环境不可用！对运维人员考验比较大！</p><p>开发即运维！</p><p>环境配置十分的环境，配一个机器都要部署环境！（集群Redis..ES..Hadoop）费事费力</p><p>发布一个项目（Jar + （Redis 、 MYSQL 、JDK、ES…） ）配置太麻烦了，不能跨平台</p><p>开发Windows，最后发布在Linux！</p><p>传统：开发生产jar，然后交给运维！</p><p>现在：开发打包部署上线，一套流程做完！</p><p>Docker给以上的问题：提出了解决方案！</p><p>比如安卓应用：</p><p>apk - 应用商店 - 下载 - 安装 即可用！</p><p>java - jar - 打包项目带上环境 （镜像） + Docker（相当于商店） - 之后下载运行即可</p><h2 id="2-Docoker"><a href="#2-Docoker" class="headerlink" title="2. Docoker"></a>2. Docoker</h2><p>docker的思想来源于集装箱</p><p>Jre - 多个应用 （端口冲突） - 原来都是交叉的</p><p>隔离 - Docker核心思想</p><p>传统：水果 - 毒药</p><p>Docker：水果 | 毒药</p><p>Docker通过隔离机制，可以将服务器利用到极致！</p><p>本质：所有的技术都是因为出现了一些问题，我们需要去解决才去学习！</p><p>docker对比VM十分的小巧</p><blockquote><p>vm 虚拟机：</p><p>在Windows中装了一个Vmware通过这个软件我们可以虚拟出来一台或者多台电脑！笨重！</p><p>好几个G，启动 几分钟</p><p>docker：隔离，镜像（最核心的环境 4M + Jdk+mysql） 十分 的轻巧，秒级启动</p></blockquote><p>基于go语言</p><h2 id="3-Docker模型"><a href="#3-Docker模型" class="headerlink" title="3. Docker模型"></a>3. Docker模型</h2><p><img src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=3715698682,4278914997&fm=26&gp=0.jpg" alt="img"></p><p><strong>镜像(image)</strong></p><p>在镜像就好比是一个模板，可以通过这个模板来创建容器服务，tomcat镜像==&gt; run ==&gt; tomcat01 容器(提供服务器)，通过这个镜像可以创建多个容器(最终服务运行或者项目运行就是在容器中的)。</p><p><strong>容器(container)</strong></p><p>Docker利用容器技术，独立运行一个或者一个组应用，通过镜像来创建的。<br>启动，停止，删除，基本命令！<br>目前就可以把这个容器理解为就是一个简易的linux系统</p><p><strong>仓库(repository)</strong></p><p>仓库就是存放镜像的地方！ 还原屏幕<br>仓库分为公有仓库和私有仓库！<br>Docker Hub I<br>阿里云…都有容器服务器</p><h2 id="4-Docker安装"><a href="#4-Docker安装" class="headerlink" title="4. Docker安装"></a>4. Docker安装</h2><blockquote><p>可以参考：<a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p></blockquote><h3 id="4-1-前提"><a href="#4-1-前提" class="headerlink" title="4.1 前提"></a>4.1 前提</h3><ul><li>Linux的基础</li><li>Linux服务器（这里以CentOS系统为例）</li></ul><p>环境查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看内核 需要 3.10 以上版本</span></span><br><span class="line">[root@hopestation ~]<span class="comment"># uname -r</span></span><br><span class="line">3.10.0-1062.18.1.el7.x86_64</span><br><span class="line"><span class="comment">#系统版本</span></span><br><span class="line">[root@hopestation ~]<span class="comment"># cat /etc/os-release</span></span><br><span class="line">NAME=<span class="string">&quot;CentOS Linux&quot;</span></span><br><span class="line">VERSION=<span class="string">&quot;7 (Core)&quot;</span></span><br><span class="line">ID=<span class="string">&quot;centos&quot;</span></span><br><span class="line">ID_LIKE=<span class="string">&quot;rhel fedora&quot;</span></span><br><span class="line">VERSION_ID=<span class="string">&quot;7&quot;</span></span><br><span class="line">PRETTY_NAME=<span class="string">&quot;CentOS Linux 7 (Core)&quot;</span></span><br><span class="line">ANSI_COLOR=<span class="string">&quot;0;31&quot;</span></span><br><span class="line">CPE_NAME=<span class="string">&quot;cpe:/o:centos:centos:7&quot;</span></span><br><span class="line">HOME_URL=<span class="string">&quot;https://www.centos.org/&quot;</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">&quot;https://bugs.centos.org/&quot;</span></span><br><span class="line"></span><br><span class="line">CENTOS_MANTISBT_PROJECT=<span class="string">&quot;CentOS-7&quot;</span></span><br><span class="line">CENTOS_MANTISBT_PROJECT_VERSION=<span class="string">&quot;7&quot;</span></span><br><span class="line">REDHAT_SUPPORT_PRODUCT=<span class="string">&quot;centos&quot;</span></span><br><span class="line">REDHAT_SUPPORT_PRODUCT_VERSION=<span class="string">&quot;7&quot;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-安装"><a href="#4-2-安装" class="headerlink" title="4.2 安装"></a>4.2 安装</h3><p>1 卸载已安装Docker组件（如果没有安装过Dokcer，跳过这一步）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                 docker-client \</span><br><span class="line">                 docker-client-latest \</span><br><span class="line">                 docker-common \</span><br><span class="line">                 docker-latest \</span><br><span class="line">                 docker-latest-logrotate \</span><br><span class="line">                 docker-logrotate \</span><br><span class="line">                 docker-engine</span><br></pre></td></tr></table></figure><p>2 安装yum软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure><p>3 设置阿里云镜像仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>4 更新软件包索引</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><p>5 安装Docker CE</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行过程中 需要进行两次确认 输入 y 回车即可</span></span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>6 启动Docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><p>7 查看Docker 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br><span class="line"><span class="comment">#如果出现一下内容就证明安装成功了</span></span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           20.10.0</span><br><span class="line"> API version:       1.41</span><br><span class="line"> Go version:        go1.13.15</span><br><span class="line"> Git commit:        7287ab3</span><br><span class="line"> Built:             Tue Dec  8 18:57:35 2020</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"> Experimental:      <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          20.10.0</span><br><span class="line">  API version:      1.41 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.13.15</span><br><span class="line">  Git commit:       eeddea2</span><br><span class="line">  Built:            Tue Dec  8 18:56</span><br><span class="line">  ....</span><br></pre></td></tr></table></figure><h3 id="4-3-HelloWorld"><a href="#4-3-HelloWorld" class="headerlink" title="4.3 HelloWorld"></a>4.3 HelloWorld</h3><p>1 运行helloworld镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@hopestation ~]<span class="comment">#  docker run hello-world</span></span><br><span class="line"><span class="comment">#一开始会提示本地没有找到</span></span><br><span class="line">Unable to find image <span class="string">&#x27;hello-world:latest&#x27;</span> locally</span><br><span class="line"><span class="comment"># 然后等待一下 他就会 去远程拉取</span></span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">0e03bdcc26d7: Pull complete </span><br><span class="line">Digest: sha256:1a523af650137b8accdaed439c17d684df61ee4d74feac151b5b337bd29e7eec</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"><span class="comment"># 运行成功 输出 Hello from Docker!</span></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the <span class="string">&quot;hello-world&quot;</span> image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image <span class="built_in">which</span> runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, <span class="built_in">which</span> sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure><p>2 查看所有镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@hopestation ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line"><span class="comment"># 这里有我们的helloworld</span></span><br><span class="line">hello-world   latest    bf756fb1ae65   11 months ago   13.3kB</span><br></pre></td></tr></table></figure><h3 id="4-4-镜像加速"><a href="#4-4-镜像加速" class="headerlink" title="4.4 镜像加速"></a>4.4 镜像加速</h3><p><img src="https://hopestation.top/upload/2020/12/docker01-3b37e7d5e3834a72a9828218bdbcc201.png" alt="docker01"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建目录</span></span><br><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://xxxxxx.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="4-5-卸载"><a href="#4-5-卸载" class="headerlink" title="4.5 卸载"></a>4.5 卸载</h3><ol><li><p>卸载Docker Engine，CLI和Containerd软件包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum remove docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li><li><p>主机上的映像，容器，卷或自定义配置文件不会自动删除。要删除所有图像，容器和卷：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure></li></ol><p>您必须手动删除所有已编辑的配置文件。</p><h2 id="5-Docker-run流程"><a href="#5-Docker-run流程" class="headerlink" title="5. Docker run流程"></a>5. Docker run流程</h2><p><img src="https://hopestation.top/upload/2020/12/docker02-b4c07828aa4b4b5ebdcaf645cad9c9a3.png" alt="docker02"></p><p>找不到时的结果：：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@hopestation ~]<span class="comment">#  docker run eq1dqw312</span></span><br><span class="line"><span class="comment">#本地没找到</span></span><br><span class="line">Unable to find image <span class="string">&#x27;helloyue666:latest&#x27;</span> locally</span><br><span class="line"><span class="comment">#远程也没找到</span></span><br><span class="line">docker: Error response from daemon: pull access denied <span class="keyword">for</span> eq1dqw312, </span><br><span class="line">repository does not exist or may require <span class="string">&#x27;docker login&#x27;</span>: denied: requested access to the resource is denied.</span><br><span class="line">See <span class="string">&#x27;docker run --help&#x27;</span>.</span><br></pre></td></tr></table></figure><h2 id="6-Docker基本原理"><a href="#6-Docker基本原理" class="headerlink" title="6. Docker基本原理"></a>6. Docker基本原理</h2><p>Docker是一个Client-Server结构的系统，Docker守护进程运行在主机上， 然后通过Socket连接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器。 容器，是一个运行时环境，就是我们前面说到的集装箱。</p><p><img src="https://img-blog.csdnimg.cn/20200112215409745.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvbGRfX19wbGF5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>为什么Docker比VM等虚拟机快</strong></p><ol><li>docker有着比虚拟机更少的抽象层。由亍docker不需要Hypervisor实现硬件资源虚拟化,运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。</li><li>docker利用的是宿主机的内核,而不需要Guest OS。因此,当新建一个容器时,docker不需要和虚拟机一样重新加载一个操作系统内核。仍而避免引寻、加载操作系统内核返个比较费时费资源的过程,当新建一个虚拟机时,虚拟机软件需要加载Guest OS,返个新建过程是分钟级别的。而docker由于直接利用宿主机的操作系统,则省略了返个过程,因此新建一个docker容器只需要几秒钟。</li></ol><table><thead><tr><th></th><th>Docker容器</th><th>虚拟机（VM）</th></tr></thead><tbody><tr><td>操作系统</td><td>与宿主机共享OS</td><td>宿主机OS上运行宿主机OS</td></tr><tr><td>存储大小</td><td>镜像小，便于存储与传输</td><td>镜像庞大（vmdk等）</td></tr><tr><td>运行性能</td><td>几乎无额外性能损失</td><td>操作系统额外的cpu、内存消耗</td></tr><tr><td>移植性</td><td>轻便、灵活、适用于Linux</td><td>笨重、与虚拟化技术耦合度高</td></tr><tr><td>硬件亲和性</td><td>面向软件开发者</td><td>面向硬件运维者</td></tr></tbody></table><h2 id="7-Docker命令"><a href="#7-Docker命令" class="headerlink" title="7. Docker命令"></a>7. Docker命令</h2><p><strong>帮助命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#显示版本信息</span></span><br><span class="line">docker version</span><br><span class="line"><span class="comment">#显示cick</span></span><br><span class="line">docker info</span><br><span class="line">docker 命令 --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><p><strong>docker images 镜像命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有本地的主机上的镜像</span></span><br><span class="line">docker images</span><br><span class="line">[root@hopestation ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">hello-world   latest    bf756fb1ae65   11 months ago   13.3kB</span><br><span class="line"><span class="comment"># 解释</span></span><br><span class="line">REPOSITORY 镜像的仓库源</span><br><span class="line">TAG 镜像的标签</span><br><span class="line">IMAGE ID 镜像的<span class="built_in">id</span></span><br><span class="line">CREATED 镜像的创建时间</span><br><span class="line">SIZE 镜像的大小</span><br><span class="line"><span class="comment"># 可选项</span></span><br><span class="line">-a， --a11 <span class="comment"># 列出所有镜像</span></span><br><span class="line">-q，--quiet <span class="comment">#只显示镜像的id</span></span><br></pre></td></tr></table></figure><p><strong>docker search 搜索镜像</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索镜像</span></span><br><span class="line">[root@hopestation ~]<span class="comment"># docker search mysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选项，通过搜藏来过滤 搜索出来的镜像就是STARS大于3000的</span></span><br><span class="line">[root@hopestation ~]<span class="comment"># docker search mysql --filter=stars=3000</span></span><br><span class="line">NAME      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql     MySQL is a widely used, open-source relation…   10247     [OK]       </span><br><span class="line">mariadb   MariaDB is a community-developed fork of MyS…   3785      [OK]       </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Docker&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;1-Docker-为什么会出现？&quot;&gt;&lt;a href=&quot;#1-Docker-为什么会出现？&quot; class=&quot;headerlink&quot; title=&quot;1. Docker 为什么会出现？&quot;&gt;&lt;/a&gt;1. Docker </summary>
      
    
    
    
    <category term="Docker" scheme="http://blog.under2.cn/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://blog.under2.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>聊聊 Elasticsearch 的倒排索引（转）</title>
    <link href="http://blog.under2.cn/2021/01/24/%E8%81%8A%E8%81%8A%20Elasticsearch%20%E7%9A%84%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95%EF%BC%88%E8%BD%AC%EF%BC%89-%E8%81%8A%E8%81%8Aelasticsearch%E7%9A%84%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95%E8%BD%AC/"/>
    <id>http://blog.under2.cn/2021/01/24/%E8%81%8A%E8%81%8A%20Elasticsearch%20%E7%9A%84%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95%EF%BC%88%E8%BD%AC%EF%BC%89-%E8%81%8A%E8%81%8Aelasticsearch%E7%9A%84%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95%E8%BD%AC/</id>
    <published>2021-01-24T14:56:41.029Z</published>
    <updated>2022-09-22T14:48:18.897Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic1.zhimg.com/v2-907cd298f05ca9a115d6dedee330eda9_1440w.jpg?source=172ae18b" alt="聊聊 Elasticsearch 的倒排索引"></p><h1 id="聊聊-Elasticsearch-的倒排索引"><a href="#聊聊-Elasticsearch-的倒排索引" class="headerlink" title="聊聊 Elasticsearch 的倒排索引"></a>聊聊 Elasticsearch 的倒排索引</h1><blockquote><p>本文转自知乎：<a href="https://zhuanlan.zhihu.com/p/76485252">https://zhuanlan.zhihu.com/p/76485252</a></p><p>原作者：Beautiful Java</p><p>同时推荐阅读：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/73585202">为什么需要 Elasticsearch</a> </li><li><a href="https://zhuanlan.zhihu.com/p/79611440">从 Lucene 到 Elasticsearch</a></li></ul></blockquote><h2 id="为什么需要倒排索引"><a href="#为什么需要倒排索引" class="headerlink" title="为什么需要倒排索引"></a><strong>为什么需要倒排索引</strong></h2><p>倒排索引，也是索引。</p><p>索引，初衷都是为了快速检索到你要的数据。</p><p><strong>每种数据库都有自己要解决的问题（或者说擅长的领域），对应的就有自己的数据结构，而不同的使用场景和数据结构，需要用不同的索引，才能起到最大化加快查询的目的。</strong></p><p>对 Mysql 来说，是 B+ 树，对 Elasticsearch/Lucene 来说，是倒排索引。</p><blockquote><p>Elasticsearch 是建立在全文搜索引擎库 Lucene 基础上的搜索引擎，它隐藏了 Lucene 的复杂性，取而代之的提供一套简单一致的 RESTful API，不过掩盖不了它底层也是 Lucene 的事实。<br>Elasticsearch 的倒排索引，其实就是 Lucene 的倒排索引。</p></blockquote><h2 id="为什么叫倒排索引"><a href="#为什么叫倒排索引" class="headerlink" title="为什么叫倒排索引"></a><strong>为什么叫倒排索引</strong></h2><p>在没有搜索引擎时，我们是直接输入一个网址，然后获取网站内容，这时我们的行为是：</p><p>document -&gt; to -&gt; words</p><p>通过文章，获取里面的单词，此谓「正向索引」，forward index.</p><p>后来，我们希望能够输入一个单词，找到含有这个单词，或者和这个单词有关系的文章：</p><p>word -&gt; to -&gt; documents</p><p>于是我们把这种索引，成为inverted index，直译过来，应该叫「反向索引」，国内翻译成「倒排索引」，有点委婉了。</p><p>现在思考一下，如果让你来设计这个可以通过单词，反向找到文章的索引，你会怎么实现？</p><blockquote><p>关于 Elasticsearch 这类「搜索引擎」要解决的问题、它和传统关系型数据库的区别等等，可以看我之前写的文章：为什么需要 Elasticsearch（文末有链接）</p></blockquote><h2 id="倒排索引的内部结构"><a href="#倒排索引的内部结构" class="headerlink" title="倒排索引的内部结构"></a><strong>倒排索引的内部结构</strong></h2><p>首先，在数据生成的时候，比如爬虫爬到一篇文章，这时我们需要对这篇文章进行分析，将文本拆解成一个个单词。</p><p>这个过程很复杂，比如“生存还是死亡”，你要如何让分词器自动将它分解为“生存”、“还是”、“死亡”三个词语，然后把“还是”这个无意义的词语干掉。这里不展开，感兴趣的同学可以查看文末关于「分析器」的链接。</p><p>接着，把这两个词语以及它对应的文档id存下来：</p><p>word documentId</p><p>生存 1</p><p>死亡 1</p><p>接着爬虫继续爬，又爬到一个含有“生存”的文档，于是索引变成：</p><p>word documentId</p><p>生存 1,2</p><p>死亡 1</p><p>下次搜索“生存”，就会返回文档ID是 1、2两份文档。</p><p>然而上面这套索引的实现，给小孩子当玩具玩还行，要上生产环境，那还远着。</p><p>想想看，这个世界上那么多单词，中文、英文、日文、韩文 … 你每次搜索一个单词，我都要全局遍历一遍，很明显不行。</p><p>于是有了排序，我们需要对单词进行排序，像 B+ 树一样，可以在页里实现二分查找。</p><p>光排序还不行，你单词都放在磁盘呢，磁盘 IO 慢的不得了，所以 Mysql 特意把索引缓存到了内存。</p><p>你说好，我也学 Mysql 的，放内存，3，2，1，放，哐当，内存爆了。</p><p>哪本字典，会把所有单词都贴在目录里的？</p><p>所以，上图：</p><p><img src="https://pic1.zhimg.com/80/v2-b601cbe28ef7c822b393451cf2347e9c_720w.jpg" alt="img"></p><p>Lucene 的倒排索，增加了最左边的一层「字典树」term index，它不存储所有的单词，只存储单词前缀，通过字典树找到单词所在的块，也就是单词的大概位置，再在块里二分查找，找到对应的单词，再找到单词对应的文档列表。</p><p>当然，内存寸土寸金，能省则省，所以 Lucene 还用了 FST（Finite State Transducers）对它进一步压缩。</p><p>FST 是什么？这里就不展开了，这次重点想聊的，是最右边的 Posting List 的，别看它只是存一个文档 ID 数组，但是它在设计时，遇到的问题可不少。</p><h2 id="Frame-Of-Reference"><a href="#Frame-Of-Reference" class="headerlink" title="Frame Of Reference"></a><strong>Frame Of Reference</strong></h2><p>原生的 Posting List 有两个痛点：</p><ul><li><strong>如何压缩以节省磁盘空间</strong></li><li><strong>如何快速求交并集（intersections and unions）</strong></li></ul><p>先来聊聊压缩。</p><p>我们来简化下 Lucene 要面对的问题，假设有这样一个数组：</p><p>[73, 300, 302, 332, 343, 372]</p><p>如何把它进行尽可能的压缩？</p><p>Lucene 里，数据是按 Segment 存储的，每个 Segment 最多存 65536 个文档 ID， 所以文档 ID 的范围，从 0 到 2^16-1，所以如果不进行任何处理，那么每个元素都会占用 2 bytes ，对应上面的数组，就是 6 * 2 = 12 bytes.</p><p>怎么压缩呢？</p><p><strong>压缩，就是尽可能降低每个数据占用的空间，同时又能让信息不失真，能够还原回来。</strong></p><p><strong>Step 1：Delta-encode —— 增量编码</strong></p><p>我们只记录元素与元素之间的增量，于是数组变成了：</p><p>[73, 227, 2, 30, 11, 29]</p><p><strong>Step 2：Split into blocks —— 分割成块</strong></p><p>Lucene里每个块是 256 个文档 ID，这样可以保证每个块，增量编码后，每个元素都不会超过 256（1 byte）.</p><p>为了方便演示，我们假设每个块是 3 个文档 ID：</p><p>[73, 227, 2], [30, 11, 29]</p><p><strong>Step 3：Bit packing —— 按需分配空间</strong></p><p>对于第一个块，[73, 227, 2]，最大元素是227，需要 8 bits，好，那我给你这个块的每个元素，都分配 8 bits的空间。</p><p>但是对于第二个块，[30, 11, 29]，最大的元素才30，只需要 5 bits，那我就给你每个元素，只分配 5 bits 的空间，足矣。</p><p>这一步，可以说是把吝啬发挥到极致，精打细算，按需分配。</p><p>以上三个步骤，共同组成了一项编码技术，Frame Of Reference（FOR）：</p><p><img src="https://pic4.zhimg.com/80/v2-a3ee78a1dbc82f9d660adcf940b26687_720w.jpg" alt="img"></p><h2 id="Roaring-bitmaps"><a href="#Roaring-bitmaps" class="headerlink" title="Roaring bitmaps"></a><strong>Roaring bitmaps</strong></h2><p>接着来聊聊 Posting List 的第二个痛点 —— 如何快速求交并集（intersections and unions）。</p><p>在 Lucene 中查询，通常不只有一个查询条件，比如我们想搜索：</p><ul><li>含有“生存”相关词语的文档</li><li>文档发布时间在最近一个月</li><li>文档发布者是平台的特约作者</li></ul><p>这样就需要根据三个字段，去三棵倒排索引里去查，当然，磁盘里的数据，上一节提到过，用了 FOR 进行压缩，所以我们要把数据进行反向处理，即解压，才能还原成原始的文档 ID，然后把这三个文档 ID 数组在内存中做一个交集。</p><blockquote><p>即使没有多条件查询， Lucene 也需要频繁求并集，因为 Lucene 是分片存储的。</p></blockquote><p>同样，我们把 Lucene 遇到的问题，简化成一道算法题。</p><p>假设有下面三个数组：</p><p>[64, 300, 303, 343]</p><p>[73, 300, 302, 303, 343, 372]</p><p>[303, 311, 333, 343]</p><p>求它们的交集。</p><p><strong>Option 1: Integer 数组</strong></p><p>直接用原始的文档 ID ，可能你会说，那就逐个数组遍历一遍吧，遍历完就知道交集是什么了。</p><p>其实对于有序的数组，用跳表（skip table）可以更高效，这里就不展开了，因为不管是从性能，还是空间上考虑，Integer 数组都不靠谱，假设有100M 个文档 ID，每个文档 ID 占 2 bytes，那已经是 200 MB，而这些数据是要放到内存中进行处理的，把这么大量的数据，从磁盘解压后丢到内存，内存肯定撑不住。</p><p><strong>Option 2: Bitmap</strong></p><p>假设有这样一个数组：</p><p>[3,6,7,10]</p><p>那么我们可以这样来表示：</p><p>[0,0,1,0,0,1,1,0,0,1]</p><p>看出来了么，对，<strong>我们用 0 表示角标对应的数字不存在，用 1 表示存在。</strong></p><p>这样带来了两个好处：</p><ul><li>节省空间：既然我们只需要0和1，那每个文档 ID 就只需要 1 bit，还是假设有 100M 个文档，那只需要 100M bits = 100M * 1/8 bytes = 12.5 MB，比之前用 Integer 数组 的 200 MB，优秀太多</li><li>运算更快：0 和 1，天然就适合进行位运算，求交集，「与」一下，求并集，「或」一下，一切都回归到计算机的起点</li></ul><p><strong>Option 3: Roaring Bitmaps</strong></p><p>细心的你可能发现了，bitmap 有个硬伤，就是不管你有多少个文档，你占用的空间都是一样的，之前说过，Lucene Posting List 的每个 Segement 最多放 65536 个文档ID，举一个极端的例子，有一个数组，里面只有两个文档 ID：</p><p>[0, 65535]</p><p>用 Bitmap，要怎么表示？</p><p>[1,0,0,0,….(超级多个0),…,0,0,1]</p><p>你需要 65536 个 bit，也就是 65536/8 = 8192 bytes，而用 Integer 数组，你只需要 2 * 2 bytes = 4 bytes</p><p>呵呵，死板的 bitmap。可见在文档数量不多的时候，使用 Integer 数组更加节省内存。</p><p>我们来算一下临界值，很简单，无论文档数量多少，bitmap都需要 8192 bytes，而 Integer 数组则和文档数量成线性相关，每个文档 ID 占 2 bytes，所以：</p><p>8192 / 2 = 4096</p><p>当文档数量少于 4096 时，用 Integer 数组，否则，用 bitmap.</p><p><img src="https://pic3.zhimg.com/80/v2-1c9f5518671ace1cae24f819cd8c049e_720w.jpg" alt="img"></p><blockquote><p>这里补充一下 Roaring bitmaps 和 之前讲的 Frame Of Reference 的关系。<br>Frame Of Reference 是压缩数据，减少磁盘占用空间，所以当我们从磁盘取数据时，也需要一个反向的过程，即解压，解压后才有我们上面看到的这样子的文档ID数组：[73, 300, 302, 303, 343, 372] ，接着我们需要对数据进行处理，求交集或者并集，这时候数据是需要放到内存进行处理的，我们有三个这样的数组，这些数组可能很大，而内存空间比磁盘还宝贵，于是需要更强有力的压缩算法，同时还要有利于快速的求交并集，于是有了Roaring Bitmaps 算法。<br>另外，Lucene 还会把从磁盘取出来的数据，通过 Roaring bitmaps 处理后，缓存到内存中，Lucene 称之为 filter cache.</p></blockquote><h2 id="升华与总结"><a href="#升华与总结" class="headerlink" title="升华与总结"></a><strong>升华与总结</strong></h2><p>文章的最后，如果来一段话总结（zhuang）升华（bi）一下，这篇文章就会得高分。</p><p>有什么总结，可以拔高这篇文章的高度呢？</p><p><strong>首先，你会发现，很多业务上、技术上要解决的问题，最后都可以抽象为一道算法题，复杂问题简单化。</strong></p><p>呃，这个“华”，升的还不够。</p><p>另一个具有高度的“华”，其实在开头已经讲出来了：</p><p><strong>每种数据库都有自己要解决的问题（或者说擅长的领域），对应的就有自己的数据结构，而不同的使用场景和数据结构，需要用不同的索引，才能起到最大化加快查询的目的。</strong></p><p>这篇文章讲的虽是 Lucene 如何实现倒排索引，如何精打细算每一块内存、磁盘空间、如何用诡谲的位运算加快处理速度，但往高处思考，再类比一下 Mysql，你就会发现，虽然都是索引，但是实现起来，截然不同。</p><p>这个往细讲，又是一篇文章：<strong>如此不同，如此成功 —— B+ 树索引 vs 倒排索引</strong></p><p>标题都想好了，就看各位爷了，点赞超 50 就写 …</p><p>可能没机会写了，那就 …</p><h2 id="留个作业吧"><a href="#留个作业吧" class="headerlink" title="留个作业吧"></a><strong>留个作业吧</strong></h2><p>知识要融合起来看才有意思。</p><p>来，放大招了，两个问题：</p><ul><li>Lucene 为什么不用 b+ 树来搜索数据？</li><li>Mysql 为什么不用 倒排索引来检索数据？</li></ul><p>附上两张图：</p><p><img src="https://pic2.zhimg.com/80/v2-2d1e16c1bd63e10701e36a9367403b9d_720w.jpg" alt="img">Mysql 的 B+树索引</p><p><img src="https://pic1.zhimg.com/80/v2-b601cbe28ef7c822b393451cf2347e9c_720w.jpg" alt="img">Lucene 的倒排索引</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a><strong>参考</strong></h2><ul><li><a href="https://link.zhihu.com/?target=https://www.elastic.co/blog/frame-of-reference-and-roaring-bitmaps">Frame of Reference and Roaring Bitmaps</a></li><li><a href="https://link.zhihu.com/?target=https://stackoverflow.com/questions/7727686/whats-the-difference-between-an-inverted-index-and-a-plain-old-index">Stackoverflow: What’s the difference between an inverted index and a plain old index?</a></li><li><a href="https://link.zhihu.com/?target=https://www.elastic.co/guide/cn/elasticsearch/guide/current/analysis-intro.html">Elasticsearch权威指南：分析与分析器</a></li><li><a href="https://link.zhihu.com/?target=https://www.cnblogs.com/jajian/p/10465519.html">Elasticsearch 技术分析（七）： Elasticsearch 的性能优化</a></li><li><a href="https://zhuanlan.zhihu.com/p/73585202">为什么需要 Elastic-search</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-907cd298f05ca9a115d6dedee330eda9_1440w.jpg?source=172ae18b&quot; alt=&quot;聊聊 Elasticsearch 的倒排索引&quot;&gt;&lt;/p&gt;
&lt;h1 id=</summary>
      
    
    
    
    <category term="ElasticSearch" scheme="http://blog.under2.cn/categories/ElasticSearch/"/>
    
    
    <category term="ElasticSearch" scheme="http://blog.under2.cn/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch（入门篇）</title>
    <link href="http://blog.under2.cn/2021/01/24/ElasticSearch%EF%BC%88%E5%85%A5%E9%97%A8%E7%AF%87%EF%BC%89-elasticsearch%E5%85%A5%E9%97%A8%E7%AF%87/"/>
    <id>http://blog.under2.cn/2021/01/24/ElasticSearch%EF%BC%88%E5%85%A5%E9%97%A8%E7%AF%87%EF%BC%89-elasticsearch%E5%85%A5%E9%97%A8%E7%AF%87/</id>
    <published>2021-01-24T14:42:49.405Z</published>
    <updated>2022-09-22T14:43:19.894Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h1><blockquote><p>版本 ElasticSearch 7.6.1</p><p>讲解初级阶段 ELK的 E 和 K</p></blockquote><h2 id="Why？"><a href="#Why？" class="headerlink" title="Why？"></a>Why？</h2><p>为什么要用ElasticSearch</p><p>原来SQL实现模糊查询时<code>%xxx%</code>，如果是大数据，就十分慢！可以使用索引！</p><p>ElasticSearchL：就是用来做搜索的！（百度、Github、淘宝电商）</p><h2 id="Lucene"><a href="#Lucene" class="headerlink" title="Lucene"></a>Lucene</h2><p>是一套信息检索工具包！jar包不包含所所引起系统！</p><p>包含的：索引结构！读写索引的工具！排序，搜索规则..工具类！</p><p>ElasticSearch是基于Lucene做了一些封装和增强。上手简单</p><p><strong>ElasticSearch vs Solr 总结</strong><br>1、es基本是开箱即用(解压就可以用！)，非常简单。Solr安装略微复杂一丢丢！</p><p>2.Solr利用Zookeeper进行分布式管理，而Elasticsearch自身带有分布式协调管理功能。</p><p>3、Solr支持更多格式的数据，比如JSON、XML、CSV，而Elasticsearch仅支持json文件格式。</p><p>4、Solr 官方提供的功能更多，而 Elasticsearch 本身更注重于核心功能，高级功能多有第三方插件提供，例如图形化界面需要kibana友好支撑-！</p><p>5、Solr 查询快，但更新索引时慢(即插入删除慢)，用于电商等查询多的应用；<br>·ES建立索引快(即查询慢)，即实时性查询快，用于facebook新浪等搜索。<br>· Solr是传统搜索应用的有力解决方案，但Elasticsearch更适用于新兴的实时搜索应用。</p><p>6、Solr比较成熟，有一个更大，更成熟的用户、开发和贡献者社区，而Elasticsearch相对开发维护者较少，更新太快，学习使用   成本较高。</p><h2 id="ElasticSearch概述"><a href="#ElasticSearch概述" class="headerlink" title="ElasticSearch概述"></a>ElasticSearch概述</h2><p>Elaticsearch，简称为es，es是一个开源的高扩展的<strong>分布式全文检索引擎</strong>，它可以近乎<strong>实时的存储</strong>、<strong>检索数据</strong>；本身扩展性很好，可以扩展到上百台服务器，处理PB级别的数据。es也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的<strong>RESTful API</strong>来隐藏Lucene的复杂性，从而让全文搜索变得简单。<br>据国际权威的数据库产品评测机构DB Engines的统计，在2016年1月，ElasticSearch已超过Solr等，成为<strong>排名第一的搜索引擎类应用</strong>。</p><p><strong>历史：</strong></p><p>多年前，一个叫做Shay Banon的刚结婚不久的失业开发者，由于妻子要去伦敦学习厨师，他便跟着也去了。在他找工作的过程中，为了给妻子构建一个食谱的搜索引擎，他开始构建一个早期版本的Lucene.<br>直接基于Lucene工作会比较困难，所以Shay开始抽象Lucene代码以便java程序员可以在应用中添加搜索功能。他发布了他的第一个开源项目，叫做“Compass”。<br>后来Shay找到一份工作，这份工作处在高性能和内存数据网格的分布式环境中，因此高性能的、实时的、分布式的搜索引擎也是理所当然需要的。然后他决定重写Compass库使其成为一个独立的服务叫做<strong>Elasticsearch</strong>.<br>第一个公开版本出现在2010年2月，在那之后Elasticsearch已经成为Github上最受欢迎的项目之一，代码贡献者超过300人。一家主营Elasticsearch的公司就此成立，他们一边提供商业支持一边开发新功能，不过Elasticsearch将永远开源且对所有人可用。</p><p>Shay的妻子依旧等待着她的食谱搜索…</p><p><strong>谁在用：</strong></p><p>谁在使用：<br>1、维基百科，类似百度百科，全文检索，高亮，搜索推荐/2(权重)<br>2、The Guardian (国外新闻网站)，类似搜狐新闻，用户行为日志(点击，浏览，收藏，评论)+社交网络数据(对某某新闻的相关看法)，数据分析，给到每篇新闻文章的作者，让他知道他的文章的公众反馈(好，坏，热门，垃圾，鄙视，崇拜)<br>3、Stack Overflow(国外的程序异常讨论论坛)，IT问题，程序的报错，提交上去，有人会跟你讨论和回答，全文检索，搜索相关问题和答案，程序报错了，就会将报错信息粘贴到里面去，搜索有没有对应的答案<br>4、 GitHub (开源代码管理)，搜索上千亿行代码<br>5、电商网站，检索商品<br>6、日志数据分析，logstash采集日志，ES进行复杂的数据分析，ELK技术，elasticsearch+logstash+kibana<br>7、商品价格监控网站，用户设定某商品的价格闻值，当低于该崗值的时候，发送通知消息给用户，比如说订阅牙膏的监控，如果高露洁牙膏的家庭套装低于50块钱，就通知我，我就去买<br>10.0%<br>8、BI系统，商业智能，Business Intelligence。比如说有个大型商场集团，B1，分析一下某某区域最近3年的用户消费金额的趋势以及用户群体的组成构成，产出相关的数张报表，**区，最近3年，每年消费金额呈现100%的增长，而且用户群体85%是高级白领，开一个新商场。ES执行数据分析和挖掘，Kibana进行数据可视化</p><p>9、国内：站内搜索(电商，招聘，门户，等等)，IT系统搜索(OA，CRM，ERP，等等)，数据分析(ES热门<br>的一个使用场景)</p><blockquote><p>说明ElasticSearch还是非常重要的！</p></blockquote><h2 id="架构选择"><a href="#架构选择" class="headerlink" title="架构选择"></a>架构选择</h2><p>什么时候选 es?</p><p>什么时候选 solr?</p><p>什么时候选 luence?</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>这里介绍的是Windows版的安装</p></blockquote><h3 id="1-安装ES"><a href="#1-安装ES" class="headerlink" title="1 安装ES"></a>1 安装ES</h3><p>需要安装JDK1.8或以上版本</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/223128-12019.png" alt="image-20201210232953551"></p><p>解压</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/223756-984547.png" alt="img"></p><ul><li>bin 启动文件</li><li>config 配置文件</li><li>log4j2 口志配置文件</li><li>java虚拟机相关的配置</li><li>jvm.options</li><li>libelasticsearch.yml elasticsearch 的配置文件！ 默认 9200端口！跨域！</li><li>logs 相关jar包</li><li>日志！</li><li>modules 功能模块</li><li>plugins 插件！</li></ul><p>es是比较占内存的，假如怕内存不足的，开源修改这个文件：<code>elasticsearch-7.10.1\config\jvm.options</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Xms represents the initial size of total heap space</span></span><br><span class="line"><span class="comment"># Xmx represents the maximum size of total heap space</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 原来都是 -Xms1g 我怕电脑扛不住  就改成了 256 和 512</span></span><br><span class="line">-Xms256m</span><br><span class="line">-Xmx512m</span><br></pre></td></tr></table></figure><p>然后在 <code>elasticsearch-7.10.1\config\elasticsearch.yml</code> 文件底下增加两句话，解决跨域问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#注意 ‘:’后面是有空格的，需要符合yml的格式</span></span><br><span class="line">http.cors.enabled: <span class="literal">true</span></span><br><span class="line">http.cors.allow-origin: <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><p>访问 ：<a href="http://localhost:9200/">http://localhost:9200/</a> 结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;DESKTOP-xxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;cluster_name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;elasticsearch&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;cluster_uuid&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;nQIXkur2RMWFjO1_mLNMHQ&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;number&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;7.10.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build_flavor&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;default&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;zip&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build_hash&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1c34507e66d7db1211f66f3513706fdf548736aa&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build_date&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;2020-12-05T01:00:33.671820Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build_snapshot&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lucene_version&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;8.7.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;minimum_wire_compatibility_version&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;6.8.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;minimum_index_compatibility_version&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;6.0.0-beta1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tagline&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;You Know, for Search&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-安装-ES-head"><a href="#2-安装-ES-head" class="headerlink" title="2  安装 ES head"></a>2  安装 ES head</h3><p>Github下载：<a href="https://github.com/mobz/elasticsearch-head">https://github.com/mobz/elasticsearch-head</a></p><p>解压</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/223136-222638.png" alt="image-20201211000129666"></p><p>运行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm run start</span><br></pre></td></tr></table></figure><p>访问 ：<a href="http://localhost:9100/">http://localhost:9100/</a> 结果如下：</p><p><img src="https://hopestation.top/upload/2020/12/es01-0701069118cd45348b3b99c2d0c36caf.png" alt="es01"></p><p>如果在控制台出现，就是由于上面es的跨域配置没有配，或者没有重启</p><p><img src="https://hopestation.top/upload/2020/12/es02-29eb2d9444fb44edb9caa7df57ff478b.png" alt="es02"></p><h3 id="3-创建索引"><a href="#3-创建索引" class="headerlink" title="3 创建索引"></a>3 创建索引</h3><p>随便写一个索引名称，我写的是<code>hopestation</code></p><p><img src="https://hopestation.top/upload/2020/12/es03-3e51e0642f02409d9bdaf448c86f9c06.png" alt="es03"></p><p>暂时把索引当成一个数据库，创界成功后显示</p><p><img src="https://hopestation.top/upload/2020/12/es04-1ebe6d62ba274fb4bfff143ca9632c73.png" alt="es04"></p><p>建议只把head当做一个数据展示工具！后面的查询在 Kibana里做</p><h2 id="ELK"><a href="#ELK" class="headerlink" title="ELK"></a>ELK</h2><p>不太理解 先占坑</p><h2 id="Kibana安装"><a href="#Kibana安装" class="headerlink" title="Kibana安装"></a>Kibana安装</h2><p>下载地址：<a href="https://www.elastic.co/cn/downloads/kibana">https://www.elastic.co/cn/downloads/kibana</a></p><p>解压后的目录</p><p><img src="https://hopestation.top/upload/2020/12/kibana01-518e3c2d296148a0b35a4ca7d1da86d4.png" alt="kibana01"></p><p>运行 <code>kibana-7.10.1-windows-x86_64\bin\kibana.bat</code></p><p>访问：<a href="http://localhost:5601/">http://localhost:5601</a></p><p>默认是英文界面，我用谷歌翻译了一下</p><p><img src="https://hopestation.top/upload/2020/12/es05-04b34807d02e4f5a89f289fb10d66def.png" alt="es05"></p><p>测试工具有：</p><p>postman、curl、head、谷歌浏览器插件，但还是推荐Kibana</p><p>来输入命令测试一下：</p><p>接着上面那个图，点击 <strong>独自探索</strong>，然后选择 <strong>DevTool</strong></p><p><img src="https://hopestation.top/upload/2020/12/kibanda02-0b427135911f498185c2f57d3cfd6fd9.png" alt="kibanda02"></p><p>输入命令，运行</p><p><img src="https://hopestation.top/upload/2020/12/kibanda03-63ef92543f64479286cf441a7851cd04.png" alt="kibanda03"></p><h4 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h4><p>修改 <code>kibana-7.10.1-windows-x86_64\config\kibana.yml</code> 最下面一段话 配置语言</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Specifies locale to be used for all localizable strings, dates and number formats.</span></span><br><span class="line"><span class="comment"># Supported languages are the following: English - en , by default , Chinese - zh-CN .</span></span><br><span class="line"><span class="comment">#i18n.locale: &quot;en&quot;</span></span><br><span class="line">i18n.locale: <span class="string">&quot;zh-CN&quot;</span></span><br></pre></td></tr></table></figure><p>在运行了的程序后，我们再通过head来查看一下，es的情况</p><p>也就是说ES默认就是集群，而集群名称就是 elasticsearch</p><p><img src="https://hopestation.top/upload/2020/12/es06-3f493f2266d746818ff19192b36f2774.png" alt="es06"></p><p>集群名称</p><p><img src="https://hopestation.top/upload/2020/12/es07-1f9d7ddea8964072b1909eb8db7d579e.png" alt="es07"></p><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><p>ES是面向文档的，同时一切都是 JSON 格式</p><table><thead><tr><th>DB</th><th>ES</th></tr></thead><tbody><tr><td>数据库（database）</td><td>索引(indexs)</td></tr><tr><td>表(tables)</td><td>types (慢慢会被弃用，可能8.0开始)</td></tr><tr><td>rows</td><td>documents</td></tr><tr><td>columns</td><td>fileds</td></tr></tbody></table><p><strong>在es中</strong>：</p><p>es（集群）中可以包含多个索引（数据库），每个索引可以包含多个类型（表），每个类型下又包含多个 文档（行），每个文档中又包含多个字段（列）</p><p><strong>1 物理设计：</strong></p><p>es在后台把每个索引划分成多个分片，每个分片可以在集群汇总</p><p><strong>2 逻辑设计</strong>：<br>一个索引类型中，包含多个文档，比如说文档1，文档2。当我们索引一篇文档时，可以通过这样的一各顺序找到它：索引 -&gt; 类型 -&gt; 文档ID，通过这个组合我们就能索引到某个具体的文档。注意：ID不必是整数，实际上它是个字符串。</p><p><strong>3 文档</strong><br>之前说elasticsearch是面向文档的，那么就意味着索引和搜索数据的最小单位是文档，elasticsearch中，文档有几个 重要属性：</p><ul><li>自我包含，一篇文档同时包含字段和对应的值，也就是同时包含key:value！</li><li>可以是层次型的，一个文档中包含自文档，复杂的逻辑实体就是这么来的！(就是一个JSON对象，fastjson可以自动转换)</li><li>灵活的结构，文档不依赖预先定义的模式，我们知道关系型数据库中，要提前定义字段才能使用，在elasticsearch中，对于字段是非常灵活的，有时候，我们可以忽略该字段，或者动态的添加一个新的字段。</li></ul><p>尽管我们可以随意的新增或者忽略某个字段，但是，每个字段的类型非常重要，比如一个年龄字段类型，可以是字符 串也可以是整形。因为elasticsearch会保存字段和类型之间的映射及其他的设置。这种映射具体到每个映射的每种类型，这也是为什么在elasticsearch中，类型有时候也称为映射类型。</p><p><strong>4 类型</strong></p><p>类型是文档的逻辑容器，就像关系型数据库一样，表格是行的容器。 类型中对于字段的定义称为映射，比如 name 映 射为字符串类型。 我们说文档是无模式的，它们不需要拥有映射中所定义的所有字段，比如新增一个字段，那么elasticsearch是怎么做的呢？elasticsearch会自动的将新字段加入映射，但是这个字段的不确定它是什么类型，elasticsearch就开始猜，如果这个值是18，那么elasticsearch会认为它是整形。但是elasticsearch也可能猜不对，所以最安全的方式就是提前定义好所需要的映射，这点跟关系型数据库殊途同归了，先定义好字段，然后再使用，别整什么幺蛾子。</p><p><strong>5 索引</strong> </p><p>索引是映射类型的容器，elasticsearch中的索引是一个非常大的文档集合。索引存储了映射类型的字段和其他设置。然后它们被存储到了各个分片上了。我们来研究下分片是如何工作的。<br>物理设计：节点和分片如何工作<br>一个集群至少有一个节点，而一个节点就是一个elasricsearch进程，节点可以有多个索引默认的，如果你创建索引，那么索引将会有个5个分片(primary shard,又称主分片)构成的，每一个主分片会有一个副本(replica shard，又称复制分片)</p><h2 id="IK分词器安装"><a href="#IK分词器安装" class="headerlink" title="IK分词器安装"></a>IK分词器安装</h2><p>分词：即把一段中文或者别的划分成<strong>一个个的关键字</strong></p><p>也是windows的安装</p><p><a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a></p><p>1 下载后解压，然后使用进入解压目录执行，maven打包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -DskipTests</span><br></pre></td></tr></table></figure><p>2 进入target—&gt;release：是一个压缩包，然后解压</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/223145-168311.png" alt="image-20210118235641685"></p><p>3 放入插件目录</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/223146-904483.png" alt="image-20210118235908488"></p><p>接下来需要重启ES</p><p>要保证IK分词器，和ES的版本支持，不然会出现ES闪退，无法打开的情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#版本不支持 异常</span></span><br><span class="line">java.lang.IllegalArgumentException: Plugin [analysis-ik] was built <span class="keyword">for</span> Elasticsearch version 7.10.0 but version 7.10.1 is running</span><br><span class="line">        at org.elasticsearch.plugins.PluginsService.verifyCompatibility(PluginsService.java:352)</span><br><span class="line">        at org.elasticsearch.plugins.PluginsService.loadBundle(PluginsService.java:622)</span><br><span class="line">        at org.elasticsearch.plugins.PluginsService.loadBundles(PluginsService.java:479)</span><br><span class="line">        at org.elasticsearch.plugins.PluginsService.&lt;init&gt;(PluginsService.java:168)</span><br><span class="line">        at org.elasticsearch.node.Node.&lt;init&gt;(Node.java:346)</span><br><span class="line">        at org.elasticsearch.node.Node.&lt;init&gt;(Node.java:289)</span><br><span class="line">        at org.elasticsearch.bootstrap.Bootstrap<span class="variable">$5</span>.&lt;init&gt;(Bootstrap.java:227)</span><br><span class="line">        at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:227)</span><br><span class="line">        at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:393)</span><br><span class="line">        at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:170)</span><br><span class="line">        at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:161)</span><br><span class="line">        at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:86)</span><br><span class="line">        at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:127)</span><br><span class="line">        at org.elasticsearch.cli.Command.main(Command.java:90)</span><br><span class="line">        at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:126)</span><br><span class="line">        at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:92)</span><br><span class="line">For complete error details, refer to the <span class="built_in">log</span> at F:\CodeSoft\elasticsearch\elasticsearch-7.10.1\logs\elasticsearch.log</span><br></pre></td></tr></table></figure><p>没关系修改一下，这个就好了：<code>elasticsearch-7.10.1\plugins\ik\plugin-descriptor.properties</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &#x27;elasticsearch.version&#x27; version of elasticsearch compiled against</span></span><br><span class="line"><span class="comment"># You will have to release a new version of the plugin for each new</span></span><br><span class="line"><span class="comment"># elasticsearch release. This version is checked when the plugin</span></span><br><span class="line"><span class="comment"># is loaded so Elasticsearch will refuse to start in the presence of</span></span><br><span class="line"><span class="comment"># plugins with the incorrect elasticsearch.version.</span></span><br><span class="line"><span class="comment">#修改成你的 es 版本</span></span><br><span class="line">elasticsearch.version=7.10.0</span><br></pre></td></tr></table></figure><p>使用插件命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xxx\elasticsearch-<span class="number">7</span>.<span class="number">10</span>.<span class="number">1</span>\bin&gt;elasticsearch-plugin list</span><br><span class="line">future versions of Elasticsearch will require Java <span class="number">11</span>; your Java version from [C:\Program Files\Java\jdk1.<span class="number">8</span>.<span class="number">0</span>_221\jre] does <span class="keyword">not</span> meet this requirement</span><br><span class="line">ik</span><br><span class="line"><span class="function">WARNING: <span class="title">plugin</span> [<span class="title">analysis</span>-<span class="title">ik</span>] <span class="title">was</span> <span class="title">built</span> <span class="title">for</span> <span class="title">Elasticsearch</span> <span class="title">version</span> 7.4.0 <span class="title">but</span> <span class="title">version</span> 7.10.1 <span class="title">is</span> <span class="title">required</span></span></span><br></pre></td></tr></table></figure><h3 id="使用IK"><a href="#使用IK" class="headerlink" title="使用IK"></a>使用IK</h3><p>1 启动es</p><p>2 启动kibana</p><p><strong>分词</strong>：即把一段中文或者别的划分成<strong>一个个的关键字</strong>,我们在搜索时候会把自己的信息进行分词，会把数据库中或者索引库中的数据进行分词，然后进行一个匹配操作，默认的中文分词是将每个字看成一个词，比如“我爱中国”会被分为”我”，“爱”，“中”，“过” ,这显然是不符合要求的，所以我们需要安装中文分词器ik来解决这个问题。</p><p>IK提供了两个分词算法: <code>ik_ smart</code>和<code>ik_ max_ word</code> ，</p><p>其中</p><ul><li><code>ik_ smart</code>为最少切分</li><li>ik_ max_ word`为最细粒度划分!（穷尽词库的所有可能）</li></ul><p>下面来使用kibana进行请求，感受一下结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span>,</span><br><span class="line">  <span class="string">&quot;text&quot;</span>: <span class="string">&quot;我爱吃汉堡包&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span>,</span><br><span class="line">  <span class="string">&quot;text&quot;</span>: <span class="string">&quot;中国共产党&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span>,</span><br><span class="line">  <span class="string">&quot;text&quot;</span>: <span class="string">&quot;我爱吃汉堡包&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span>,</span><br><span class="line">  <span class="string">&quot;text&quot;</span>: <span class="string">&quot;中国共产党&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后一条一条的执行。自行查看结果，如下：</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/223148-138123.png" alt="image-20210119224517800"></p><p>但有时候我们的单词，并没有再词库了。会被拆分，那如何添加自己的词库呢？</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/223151-418354.png" alt="image-20210119225138371"></p><p>首先ES的插件配置文件中增加配置：elasticsearch-7.10.1\plugins\ik\config\IKAnalyzer.cfg.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">properties</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 : 配置我自己的字典取名叫hope.dic --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span>hope.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_stopwords&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后新建一个文件 elasticsearch-7.10.1\plugins\ik\config\hope.dic</p><p>内容就是你的单词，咱们先只加一个试一试</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">狂神说</span><br></pre></td></tr></table></figure><p>然后重启，再次执行请求。就好了，so easy, too happy</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/223155-844001.png" alt="image-20210119225904657"></p><p>就记录到这里了。</p><p>发现这篇博客总结的比我好一些 - -！</p><blockquote><p>推荐一下吧：<a href="https://blog.csdn.net/qq_40087648/article/details/110664047?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-7&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/qq_40087648/article/details/110664047?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-7&amp;spm=1001.2101.3001.4242</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ElasticSearch&quot;&gt;&lt;a href=&quot;#ElasticSearch&quot; class=&quot;headerlink&quot; title=&quot;ElasticSearch&quot;&gt;&lt;/a&gt;ElasticSearch&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;版本 ElasticSea</summary>
      
    
    
    
    
    <category term="ElasticSearch" scheme="http://blog.under2.cn/tags/ElasticSearch/"/>
    
  </entry>
  
</feed>
