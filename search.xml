<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>RabbitMQ集群搭建</title>
      <link href="/2024/05/13/Rabbit%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/05/13/Rabbit%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="RabbitMQ集群搭建"><a href="#RabbitMQ集群搭建" class="headerlink" title="RabbitMQ集群搭建"></a>RabbitMQ集群搭建</h1><p>RabbitMQ部署模式有三种</p><ul><li>单机模式</li><li>普通集群</li><li>镜像集群（普通集群基础上配置策略）</li></ul><p>使用docker搭建</p><blockquote><p>docker run 参数解释<br><code>--hostname</code>， 指定容器的主机名<br><code>--name</code>， 指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字<br><code>-p</code>， 指定容器暴露的端口<br><code>-v, --volume=[]</code>， 给容器挂载存储卷，挂载到容器的某个目录<br><code>-e, --env=[]</code>， 指定环境变量，容器中可以使用该环境变量</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取最新镜像</span></span><br><span class="line">docker pull rabbitmq</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动三个容器 这里的RABBITMQ_ERLANG_COOKIE必须一致（erlang集群要求）</span></span><br><span class="line">docker run -d --hostname rabbitmq01 --name rabbitmq01 -p 15672:15672 -p 5672:5672  -e RABBITMQ_ERLANG_COOKIE=<span class="string">&#x27;rabbitmqCookie&#x27;</span> rabbitmq</span><br><span class="line"></span><br><span class="line">docker run -d --hostname rabbitmq02 --name rabbitmq02 -p 15673:15672 -p 5673:5672  -e RABBITMQ_ERLANG_COOKIE=<span class="string">&#x27;rabbitmqCookie&#x27;</span> --<span class="built_in">link</span> rabbitmq01 rabbitmq</span><br><span class="line"></span><br><span class="line">docker run -d --hostname rabbitmq03 --name rabbitmq03 -p 15674:15672 -p 5674:5672  -e RABBITMQ_ERLANG_COOKIE=<span class="string">&#x27;rabbitmqCookie&#x27;</span> --<span class="built_in">link</span> rabbitmq01 --<span class="built_in">link</span> rabbitmq02  rabbitmq</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入rabbitmq01 容器开启管理插件 (ctrl + P + Q 退出) </span></span><br><span class="line">docker <span class="built_in">exec</span> -it rabbitmq01 bash</span><br><span class="line"><span class="built_in">cd</span> plugins</span><br><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入rabbitmq02 容器开启管理插件 (ctrl + P + Q 退出) </span></span><br><span class="line">docker <span class="built_in">exec</span> -it rabbitmq02 bash</span><br><span class="line"><span class="built_in">cd</span> plugins</span><br><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入rabbitmq03 容器开启管理插件 (ctrl + P + Q 退出) </span></span><br><span class="line">docker <span class="built_in">exec</span> -it rabbitmq03 bash</span><br><span class="line"><span class="built_in">cd</span> plugins</span><br><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> MQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty源码编译</title>
      <link href="/2024/05/13/Netty/"/>
      <url>/2024/05/13/Netty/</url>
      
        <content type="html"><![CDATA[<h2 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h2><p>源码编译</p><ul><li><p>设置JDK1.8</p></li><li><pre><code>cd commonmvn clean compile  -D&quot;checkstyle.skip&quot;=true</code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> NIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/05/13/hello-world/"/>
      <url>/2024/05/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PostgreSQL安装</title>
      <link href="/2022/04/28/PostgreSQL%E5%AE%89%E8%A3%85-postgresql%E5%AE%89%E8%A3%85/"/>
      <url>/2022/04/28/PostgreSQL%E5%AE%89%E8%A3%85-postgresql%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="PostgreSQL的安装"><a href="#PostgreSQL的安装" class="headerlink" title="PostgreSQL的安装"></a>PostgreSQL的安装</h1><ol><li><a href="https://www.enterprisedb.com/downloads/postgres-postgresql-downloads">官网下载地址</a>，根据对应的版本和操作系统点击下载即可</li></ol><p><img src="https://hopestation.top/upload/2022/04/postgres-ini-01-c2654fc687e845b1b25719e51c62f6f9.png" alt="postgres-ini-01"></p><ol start="2"><li>点击下载后，会下载对应的文件并跳转至如下页面，参照安装介绍进行安装。（基本一路默认即可，数据库初始密码可设置成：postgres）</li></ol><p><img src="https://hopestation.top/upload/2022/04/postgres-ini-022-6013129a58ad4170b771684d5ce97773.png" alt="postgres-ini-022"></p><ol start="3"><li>安装的最后一步，可以取消勾选直接finsh</li></ol><p><img src="https://hopestation.top/upload/2022/04/postgres-ini-03-83372864b86342199639c6b3f301a03e.png" alt="postgres-ini-03"></p><p>4.查找pgadmin4进入可视化界面，sqlshell使用命令行直接操作数据库。（也可使用dbeaver、navicat等工具连接PostgreSQL）</p><p><img src="https://hopestation.top/upload/2022/04/postgres-ini-04-fa08273b4b7b43cc96d6785c6faeb426.png" alt="postgres-ini-04"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> PostgreSQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud整合Dubbo</title>
      <link href="/2021/11/29/SpringCloud%E6%95%B4%E5%90%88Dubbo-springcloud%E6%95%B4%E5%90%88dubbo/"/>
      <url>/2021/11/29/SpringCloud%E6%95%B4%E5%90%88Dubbo-springcloud%E6%95%B4%E5%90%88dubbo/</url>
      
        <content type="html"><![CDATA[<h2 id="Dubbo远程调用"><a href="#Dubbo远程调用" class="headerlink" title="Dubbo远程调用"></a>Dubbo远程调用</h2><blockquote><p><a href="https://github.com/alibaba/spring-cloud-alibaba/tree/master/spring-cloud-alibaba-examples/spring-cloud-alibaba-dubbo-examples">官网参考文档</a> | <a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-examples/spring-cloud-alibaba-dubbo-examples/README_CN.md">官网参考项目</a> | <a href="https://hopestation.top/categories/dubbo-zk">Dubbo+ZK文档</a></p></blockquote><h4 id="三个步骤"><a href="#三个步骤" class="headerlink" title="三个步骤"></a>三个步骤</h4><ol><li>编写Interface接口</li><li>提供者实现Interface接口</li><li>消费者调用Interface接口</li></ol><h4 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h4><p>项目中我们可以把<code>编写Interface接口</code>这个步骤抽离成了一个单独的模块，然后提供者、消费者引入此目录。这个单独模块叫<code>dubbo-api模块</code></p><ol><li>POM</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            我这里为了使用DubboService\DubboRefrence注解，所以故意引入了2.7.7版本。</span></span><br><span class="line"><span class="comment">            而没有使用 ubbo Spring Cloud Starter 因为目前这个依赖最高支持 2.7.6</span></span><br><span class="line"><span class="comment">            旧版本需要使用与Spring同名称的Service注解，不太合适。新版已经弃用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  为了将Dubbo接口，注册进入Nacos来进行注册与发现。也可以使用ZK  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-registry-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">scan:</span></span><br><span class="line">    <span class="comment"># dubbo 服务扫描基准包</span></span><br><span class="line">    <span class="attr">base-packages:</span> <span class="string">top.hopestation.service</span></span><br><span class="line">  <span class="attr">protocol:</span></span><br><span class="line">    <span class="comment"># dubbo 协议</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo</span></span><br><span class="line">    <span class="comment"># dubbo 协议端口（ -1 表示自增端口，从 20880 开始）</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="comment"># 挂载到 Spring Cloud 注册中心 此处需要dubbo-registry-nacos依赖包支持</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">nacos://127.0.0.1:8848</span></span><br><span class="line"><span class="comment"># 配置了启动时暂不扫描接口，好像失效了，暂时没查出原因</span></span><br><span class="line">    <span class="attr">check:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">subscribed-services:</span> <span class="string">xx-user;</span> <span class="string">xx-store</span></span><br></pre></td></tr></table></figure></li><li><p>启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增加此注解</span></span><br><span class="line"><span class="meta">@EnableDubbo</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyUserApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DictUserApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>api项目中增加接口，对应此步骤<code>1.编写Interface接口</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserServiceRemote</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户ID查询用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title function_">findUserById</span><span class="params">(String userId)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>提供者增加接口实现类,对应此步骤<code>2.提供者实现Interface接口</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DubboService</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceRemoteImpl</span> <span class="keyword">implements</span> <span class="title class_">UserServiceRemote</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">findUserById</span><span class="params">(String userId)</span> &#123;</span><br><span class="line">        <span class="comment">// init user</span></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>消费者调用接口，对应此步骤<code>3.消费者调用Interface接口</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/store&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StoreController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DubboReference</span></span><br><span class="line">    <span class="keyword">private</span> UserServiceRemote userServiceRemote;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟查询词典、用户数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findStoreAndUser&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findStoreAndUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// userServiceRemote.findUserById 为Dubbo远程调用</span></span><br><span class="line">        Map&lt;String, Object&gt; userObj = userServiceRemote.findUserById(<span class="string">&quot;1234&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Store is testStore,And User is &quot;</span> + userObj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>启动项目,访问路径：<br><a href="http://localhost:8899/store/findStoreAndUser">http://localhost:8899/store/findStoreAndUser</a> </p><p>出现以下结果则为Dubbo远程调用成功。<br><img src="https://hopestation.top/upload/2021/11/dubbo-test-3955c958a4394db69ca072a6a0054038.png" alt="dubbo-test"></p><ol start="2"><li><p>同时Nacos的服务列表也会出现两个服务，实际上是Dubbo的接口</p></li><li><p>建议Debug调试DubboService\DubboRefrence接口处，来观察情况</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx + SSL证书 配置HTTPS</title>
      <link href="/2021/05/17/Nginx%20+%20SSL%E8%AF%81%E4%B9%A6%20%E9%85%8D%E7%BD%AEHTTPS-nginxssl%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AEhttps/"/>
      <url>/2021/05/17/Nginx%20+%20SSL%E8%AF%81%E4%B9%A6%20%E9%85%8D%E7%BD%AEHTTPS-nginxssl%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AEhttps/</url>
      
        <content type="html"><![CDATA[<h2 id="Nginx-SSL证书-配置HTTPS"><a href="#Nginx-SSL证书-配置HTTPS" class="headerlink" title="Nginx + SSL证书 配置HTTPS"></a>Nginx + SSL证书 配置HTTPS</h2><h2 id="1-阿里云申请免费的SSL"><a href="#1-阿里云申请免费的SSL" class="headerlink" title="1 阿里云申请免费的SSL"></a>1 阿里云申请免费的SSL</h2><ol><li>控制台搜索“ssl”，进入ssl证书页面</li></ol><p><img src="https://hopestation.top/upload/2021/05/image-20210517151855426-be264cc12a814bd68a5573fbb4ffa279.png" alt="image-20210517151855426"></p><p><img src="https://hopestation.top/upload/2021/05/image-20210517151646888-a4891893dc054641bf9982fdfaedad68.png" alt="image-20210517151646888"></p><ol start="2"><li>按步骤提示进行即可，我用的是域名解析的验证方式</li><li>下载证书</li></ol><p><img src="https://hopestation.top/upload/2021/05/image-20210517152235338-8fea4c765b6a4bb290c2388fbbcec7ff.png" alt="image-20210517152235338"></p><h2 id="2-配置Nginx"><a href="#2-配置Nginx" class="headerlink" title="2 配置Nginx"></a>2 配置Nginx</h2><ol><li><p>将下载好的文件放在nginx&#x2F;conf&#x2F;cert目录下</p></li><li><p>修改nginx配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#http 转 https</span></span><br><span class="line"><span class="string">server</span> &#123;</span><br><span class="line">    <span class="string">listen</span> <span class="number">80</span><span class="string">;</span></span><br><span class="line">    <span class="string">server_name</span> <span class="string">hopestation.top</span> <span class="string">www.hopestation.top;</span></span><br><span class="line">     <span class="string">rewrite</span> <span class="string">^(.*)</span> <span class="string">https://$server_name</span> <span class="string">permanent;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">server</span> &#123;</span><br><span class="line">    <span class="string">listen</span> <span class="number">443</span> <span class="string">ssl;</span></span><br><span class="line">    <span class="string">server_name</span> <span class="string">hopestation.top</span> <span class="string">www.hopestation.top;</span></span><br><span class="line">    <span class="comment">#SSL证书</span></span><br><span class="line">    <span class="string">ssl_certificate</span> <span class="string">cert/5649438_hopestation.top.pem;</span></span><br><span class="line">    <span class="string">ssl_certificate_key</span> <span class="string">cert/5649438_hopestation.top.key;</span></span><br><span class="line">   </span><br><span class="line">   <span class="string">ssl_session_timeout</span> <span class="string">5m;</span></span><br><span class="line">    <span class="string">ssl_ciphers</span> <span class="string">ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span></span><br><span class="line">    <span class="string">ssl_protocols</span> <span class="string">TLSv1</span> <span class="string">TLSv1.1</span> <span class="string">TLSv1.2;</span></span><br><span class="line">    <span class="string">ssl_prefer_server_ciphers</span> <span class="string">on;</span></span><br><span class="line">    <span class="string">location</span> <span class="string">/</span> &#123;</span><br><span class="line">        <span class="string">proxy_set_header</span> <span class="string">HOST</span> <span class="string">$host;</span></span><br><span class="line">        <span class="string">proxy_set_header</span> <span class="string">X-Forwarded-Proto</span> <span class="string">$scheme;</span></span><br><span class="line">        <span class="string">proxy_set_header</span> <span class="string">X-Real-IP</span> <span class="string">$remote_addr;</span></span><br><span class="line">        <span class="string">proxy_set_header</span> <span class="string">X-Forwarded-For</span> <span class="string">$proxy_add_x_forwarded_for;</span></span><br><span class="line">        <span class="string">proxy_pass</span> <span class="string">http://ip:端口/;</span>  <span class="comment">#请求转发到</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>让配置文件生效、重启nginx</p></li></ol><blockquote><p>注：需放行 443端口</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka之简单的生产、消费 （三）</title>
      <link href="/2021/04/27/Kafka%E4%B9%8B%E7%AE%80%E5%8D%95%E7%9A%84%E7%94%9F%E4%BA%A7%E3%80%81%E6%B6%88%E8%B4%B9%20%EF%BC%88%E4%B8%89%EF%BC%89-kafka%E4%B9%8B%E7%AE%80%E5%8D%95%E7%9A%84%E7%94%9F%E4%BA%A7%E6%B6%88%E8%B4%B9%E4%B8%89/"/>
      <url>/2021/04/27/Kafka%E4%B9%8B%E7%AE%80%E5%8D%95%E7%9A%84%E7%94%9F%E4%BA%A7%E3%80%81%E6%B6%88%E8%B4%B9%20%EF%BC%88%E4%B8%89%EF%BC%89-kafka%E4%B9%8B%E7%AE%80%E5%8D%95%E7%9A%84%E7%94%9F%E4%BA%A7%E6%B6%88%E8%B4%B9%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<p>目录<br>[TOC]</p><h2 id="1-利用Kafka提供的命令测试"><a href="#1-利用Kafka提供的命令测试" class="headerlink" title="1 利用Kafka提供的命令测试"></a>1 利用Kafka提供的命令测试</h2><h3 id="1-1-创建主题"><a href="#1-1-创建主题" class="headerlink" title="1.1 创建主题"></a>1.1 创建主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#由于之前没有创建Kafka集群这里，先把副本和分区设置为1了</span></span><br><span class="line">[root@hopestation kafka_2.13-2.8.0]<span class="comment"># bin/kafka-topics.sh --zookeeper localhost:2181/kafka --create --topic topic-demo --replication-factor 1 --partitions 1</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>–zookeeper</td><td>指定了Kafka所连接的Zookeeper服务地址</td></tr><tr><td>–create</td><td>创建主题的命令</td></tr><tr><td>–topic</td><td>指定了所要创建主题的名称</td></tr><tr><td>–replication-factor</td><td>指定了副本银子</td></tr><tr><td>–partitions</td><td>指定了分区个数</td></tr></tbody></table><h3 id="1-2-消费者"><a href="#1-2-消费者" class="headerlink" title="1.2 消费者"></a>1.2 消费者</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#参数描述</span></span><br><span class="line"><span class="comment">#--bootstrap-server指定了连接的Kafka集群地址</span></span><br><span class="line"><span class="comment">#--topic指定了消费者订阅的主题</span></span><br><span class="line">[root@hopestation kafka_2.13-2.8.0]<span class="comment"># bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic topic-demo</span></span><br><span class="line"><span class="comment">#监听topic-demo主题，等待生产消息</span></span><br></pre></td></tr></table></figure><h3 id="1-3-生产者"><a href="#1-3-生产者" class="headerlink" title="1.3 生产者"></a>1.3 生产者</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#上一个消费者窗口不要动，打开一个新的Shell创建生产者</span></span><br><span class="line"><span class="comment">#参数描述</span></span><br><span class="line"><span class="comment">#--broker-list 指定了连接的Kafka集群地址</span></span><br><span class="line"><span class="comment">#--topic指定了消费者订阅的主题</span></span><br><span class="line">[root@hopestation kafka_2.13-2.8.0]<span class="comment"># bin/kafka-console-producer.sh --broker-list localhost:9092 --topic topic-demo</span></span><br><span class="line">&gt;hello,kafka</span><br><span class="line">&gt;NICE</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h3 id="1-4-测试"><a href="#1-4-测试" class="headerlink" title="1.4 测试"></a>1.4 测试</h3><p>然后就会发现消费者窗口变成了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@hopestation kafka_2.13-2.8.0]<span class="comment"># bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic topic-demo</span></span><br><span class="line">hello,kafka</span><br><span class="line">NICE</span><br><span class="line"><span class="comment">#说明消费成功</span></span><br></pre></td></tr></table></figure><h2 id="2-Java客户端测试"><a href="#2-Java客户端测试" class="headerlink" title="2 Java客户端测试"></a>2 Java客户端测试</h2><p>使用本地Java程序连接服务器kafka进行简单消费</p><ul><li><p>创建普通的Java程序即可</p></li><li><p>POM</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;kafka-clients&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-1-生产者"><a href="#2-1-生产者" class="headerlink" title="2.1 生产者"></a>2.1 生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hopestation.simplekafka;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.KafkaProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者客户端</span></span><br><span class="line"><span class="comment"> * Created by HopeStation on 2021/4/27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerFastStart</span> &#123;</span><br><span class="line">    <span class="comment">//brokerList = 你的Kafka服务器IP:9092</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">brokerList</span> <span class="operator">=</span> <span class="string">&quot;yourHostIp:9092&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">topic</span> <span class="operator">=</span> <span class="string">&quot;topic-demo&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.put(<span class="string">&quot;key.serializer&quot;</span>,<span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;value.serializer&quot;</span>,<span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;bootstrap.servers&quot;</span>,brokerList);</span><br><span class="line">        <span class="comment">//配置生产者客户端参数并创建KafkaProducer实例</span></span><br><span class="line">        KafkaProducer&lt;String,String&gt; producer = <span class="keyword">new</span> <span class="title class_">KafkaProducer</span>&lt;&gt;(properties);</span><br><span class="line">        <span class="comment">//构建所需要发送的消息</span></span><br><span class="line">        ProducerRecord&lt;String,String&gt; record = <span class="keyword">new</span> <span class="title class_">ProducerRecord</span>&lt;&gt;(topic,<span class="string">&quot;hello,Kafka!&quot;</span>);</span><br><span class="line">        <span class="comment">//发送消息</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            producer.send(record);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭生产者客户端实例</span></span><br><span class="line">        producer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-消费者"><a href="#2-2-消费者" class="headerlink" title="2.2 消费者"></a>2.2 消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hopestation.simplekafka;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者客户端</span></span><br><span class="line"><span class="comment"> * Created by HopeStation on 2021/4/27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerFastStart</span> &#123;</span><br><span class="line">    <span class="comment">//brokerList = 你的Kafka服务器IP:9092</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">brokerList</span> <span class="operator">=</span> <span class="string">&quot;yourHostIp:9092&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">topic</span> <span class="operator">=</span> <span class="string">&quot;topic-demo&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">groupId</span> <span class="operator">=</span> <span class="string">&quot;group.demo&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.put(<span class="string">&quot;key.deserializer&quot;</span>,<span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;value.deserializer&quot;</span>,<span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;bootstrap.servers&quot;</span>,brokerList);</span><br><span class="line">        <span class="comment">//设置消费组的名称</span></span><br><span class="line">        properties.put(<span class="string">&quot;group.id&quot;</span>,groupId);</span><br><span class="line">        <span class="comment">//创建一个消费者客户端实例</span></span><br><span class="line">        KafkaConsumer&lt;String,String&gt; consumer = <span class="keyword">new</span> <span class="title class_">KafkaConsumer</span>&lt;&gt;(properties);</span><br><span class="line">        <span class="comment">//订阅主题</span></span><br><span class="line">        consumer.subscribe(Collections.singletonList(topic));</span><br><span class="line">        <span class="comment">//循环消费消息</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            ConsumerRecords&lt;String,String&gt; records = consumer.poll(Duration.ofMillis(<span class="number">1000</span>));</span><br><span class="line">            <span class="keyword">for</span>(ConsumerRecord&lt;String,String&gt; record : records)&#123;</span><br><span class="line">                System.err.println(<span class="string">&quot;record.value() = &quot;</span> + record.value());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-3-测试"><a href="#2-3-测试" class="headerlink" title="2.3 测试"></a>2.3 测试</h3><p>先运行消费者，再运行生产者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ConsumerFastStart消费者的控制台输出</span></span><br><span class="line">record.value() = hello,Kafka!</span><br></pre></td></tr></table></figure><h3 id="2-4-异常以及解决"><a href="#2-4-异常以及解决" class="headerlink" title="2.4 异常以及解决"></a>2.4 异常以及解决</h3><p>若出现异常：Connection refused: no further information</p><ol><li><p>注意服务器放行9092端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以用WIndows命令行来测试 端口是否被放行</span></span><br><span class="line">telnet IP Port</span><br><span class="line">比如：telnet 192.168.1.1 9092</span><br></pre></td></tr></table></figure></li><li><p>修改Kafka安装目录的config&#x2F;server.properties </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#listeners==&gt;固定0.0.0.0:9092</span></span><br><span class="line">listeners = PLAINTEXT://0.0.0.0:9092</span><br><span class="line"><span class="comment">#advertised.listeners==&gt;你的服务器IP:9092</span></span><br><span class="line">advertised.listeners=PLAINTEXT://xx.xx.xx.xx:9092</span><br></pre></td></tr></table></figure></li></ol><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li>深入理解Kafka-核心设计与实践原理</li><li>Kafka官网：<a href="http://kafka.apache.org/">http://kafka.apache.org</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka之安装配置 （二）</title>
      <link href="/2021/04/24/Kafka%E4%B9%8B%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%20%EF%BC%88%E4%BA%8C%EF%BC%89-kafka%E4%B9%8B%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E4%BA%8C/"/>
      <url>/2021/04/24/Kafka%E4%B9%8B%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%20%EF%BC%88%E4%BA%8C%EF%BC%89-kafka%E4%B9%8B%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<p>目录<br>[TOC]</p><h2 id="Kafka之安装配置"><a href="#Kafka之安装配置" class="headerlink" title="Kafka之安装配置"></a>Kafka之安装配置</h2><p>本篇基于Linux CentOS来介绍安装的，需要先安装好JDK</p><h2 id="1-Zookeeper安装配置"><a href="#1-Zookeeper安装配置" class="headerlink" title="1 Zookeeper安装配置"></a>1 Zookeeper安装配置</h2><p>Zookeeper是安装Kafka集群的必要组件，Kafka通过Zookeeper来实施对于元数据信息的管理，包括集群、borker、主题、分区等内容。</p><p>Zookeeper是一个开源的分布式协调服务。分布式应用程序可以基于Zookeeper实现注入数据发布&#x2F;订阅、负载均衡、命名服务、分布式协调&#x2F;通知、集群管理、Master选举、配置维护等功能。</p><p>在Zookeeper中共有3个角色：</p><ul><li>leader</li><li>follower</li><li>observer</li></ul><p>observer不参与投票，默认情况下Zookeeper中只有leader与follower两个角色</p><p>也可以通过我的这篇文章来了解一下：<a href="https://hopestation.top/archives/zookeeper">Zookeeper</a></p><h3 id="1-1-下载ZK"><a href="#1-1-下载ZK" class="headerlink" title="1.1 下载ZK"></a>1.1 下载ZK</h3><p>官网：<a href="https://zookeeper.apache.org/releases.html">https://zookeeper.apache.org/releases.html</a></p><h3 id="1-2-安装配置"><a href="#1-2-安装配置" class="headerlink" title="1.2 安装配置"></a>1.2 安装配置</h3><p>下载好安装包后将其复制到&#x2F;opt目录下，具体命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#切换到/opt目录下</span></span><br><span class="line">[root@hopestation opt]<span class="comment"># cd /opt</span></span><br><span class="line"><span class="comment">#显示详细信息</span></span><br><span class="line">[root@hopestation opt]<span class="comment"># ll apache-zookeeper-3.6.2-bin.tar.gz </span></span><br><span class="line">-rwxr-xr-x 1 root root 12515974 Apr 14 22:55 apache-zookeeper-3.6.2-bin.tar.gz</span><br><span class="line"><span class="comment">#解压文件</span></span><br><span class="line">[root@hopestation opt]<span class="comment"># tar zxvf apache-zookeeper-3.6.2-bin.tar.gz </span></span><br><span class="line"><span class="comment">#进入到解压后的文件夹</span></span><br><span class="line">[root@hopestation opt]<span class="comment"># cd apache-zookeeper-3.6.2-bin</span></span><br><span class="line"><span class="comment">#查看当前目录</span></span><br><span class="line">[root@hopestation apache-zookeeper-3.6.2-bin]<span class="comment"># pwd</span></span><br><span class="line">/opt/apache-zookeeper-3.6.2-bin</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编辑/etc/profile</span></span><br><span class="line">[root@hopestation apache-zookeeper-3.6.2-bin]<span class="comment"># vim /etc/profile</span></span><br></pre></td></tr></table></figure><ul><li>增加这句话：export ZOOKEEPER_HOME&#x3D;&#x2F;opt&#x2F;apache-zookeeper-3.6.2-bin</li><li>然后把它放到环境变量里就ok了，注意与已经存在的编辑变量用“冒号”分割</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ZOOKEEPER_HOME=/opt/apache-zookeeper-3.6.2-bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/lib/erlang/bin:/usr/local/rabbitmq_server-3.8.3/sbin:<span class="variable">$ZOOKEEPER_HOME</span>/bin</span><br><span class="line"><span class="comment">#然后 wq退出</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使环境变量生效</span></span><br><span class="line">[root@hopestation apache-zookeeper-3.6.2-bin]<span class="comment"># source /etc/profile</span></span><br><span class="line"><span class="comment">#查看环境变量</span></span><br><span class="line">[root@hopestation apache-zookeeper-3.6.2-bin]<span class="comment"># echo $PATH</span></span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/usr/local/lib/erlang/bin:/usr/local/rabbitmq_server-3.8.3/sbin:/root/bin:/usr/local/lib/erlang/bin:/usr/local/rabbitmq_server-3.8.3/sbin:/opt/apache-zookeeper-3.6.2-bin/bin</span><br></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入zk的pwdconf目录</span></span><br><span class="line">[root@hopestation apache-zookeeper-3.6.2-bin]<span class="comment"># cd conf</span></span><br><span class="line"><span class="comment">#当前目录</span></span><br><span class="line">[root@hopestation conf]<span class="comment"># pwd</span></span><br><span class="line">/opt/apache-zookeeper-3.6.2-bin/conf</span><br><span class="line"><span class="comment">#复制一份新的配置文件 因为zk启动会需要名为zoo.cfg的文件</span></span><br><span class="line">[root@hopestation conf]<span class="comment"># cp zoo_sample.cfg zoo.cfg</span></span><br><span class="line">[root@hopestation conf]<span class="comment"># ls</span></span><br><span class="line">configuration.xsl  log4j.properties  zoo.cfg  zoo_sample.cfg</span><br><span class="line"><span class="comment">#编辑zoo.cfg</span></span><br><span class="line">[root@hopestation conf]<span class="comment"># vim zoo.cfg</span></span><br><span class="line"><span class="comment">#然后按i，进入编辑模式。编辑：wq退出</span></span><br></pre></td></tr></table></figure><p>zoo.cfg 内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># the directory where the snapshot is stored.</span></span><br><span class="line"><span class="comment"># do not use /tmp for storage, /tmp here is just </span></span><br><span class="line"><span class="comment"># example sakes.</span></span><br><span class="line">dataDir=/tmp/zookeeper/data</span><br><span class="line">dataLogDir=/tmp/zookeeper/log</span><br><span class="line"><span class="comment">#其他内容不变</span></span><br></pre></td></tr></table></figure><p>而默认情况下linux是没有这两个目录的，所以需要创建出来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建</span></span><br><span class="line">[root@hopestation conf]<span class="comment"># mkdir -p /tmp/zookeeper/data</span></span><br><span class="line">[root@hopestation conf]<span class="comment"># mkdir -p /tmp/zookeeper/log</span></span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line">[root@hopestation conf]<span class="comment"># cd /tmp/zookeeper</span></span><br><span class="line">[root@hopestation zookeeper]<span class="comment"># ls</span></span><br><span class="line">data  <span class="built_in">log</span></span><br><span class="line"><span class="comment">#然后需要在 data目录下创建一个myid文件，并写入一个数值作为服务器的编号</span></span><br><span class="line">[root@hopestation zookeeper]<span class="comment"># cd data</span></span><br><span class="line">[root@hopestation data]<span class="comment"># touch myid</span></span><br><span class="line">[root@hopestation data]<span class="comment"># vim myid</span></span><br><span class="line"><span class="comment">#i编写，比如写入0 然后:wq退出</span></span><br><span class="line">[root@hopestation data]<span class="comment"># cat myid</span></span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>启动zookeeper</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@hopestation conf]<span class="comment"># zkServer.sh start</span></span><br><span class="line">/usr/bin/java</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /opt/apache-zookeeper-3.6.2-bin/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br><span class="line">[root@hopestation conf]<span class="comment"># zkServer.sh status</span></span><br><span class="line">/usr/bin/java</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /opt/apache-zookeeper-3.6.2-bin/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost. Client SSL: <span class="literal">false</span>.</span><br><span class="line">Error contacting service. It is probably not running.</span><br></pre></td></tr></table></figure><h2 id="2-Kafka安装配置"><a href="#2-Kafka安装配置" class="headerlink" title="2 Kafka安装配置"></a>2 Kafka安装配置</h2><p>官网下载地址：<a href="http://kafka.apache.org/downloads.html">http://kafka.apache.org/downloads.html</a></p><p><img src="https://hopestation.top/upload/2021/04/image-20210424225331528-c0d3418095a34f48b7353562a3cae950.png" alt="image-20210424225331528"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解压</span></span><br><span class="line">[root@hopestation opt]<span class="comment"># tar zxvf kafka_2.13-2.8.0.tgz </span></span><br></pre></td></tr></table></figure><p>将kafka目录添加到环境变量里：&#x2F;opt&#x2F;kafka_2.13-2.8.0</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编辑</span></span><br><span class="line">[root@hopestation opt]<span class="comment"># vim /etc/profile</span></span><br><span class="line"><span class="built_in">export</span> KAFKA_HOME=/opt/kafka_2.13-2.8.0</span><br><span class="line"><span class="built_in">export</span> ZOOKEEPER_HOME=/opt/apache-zookeeper-3.6.2-bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/lib/erlang/bin:/usr/local/rabbitmq_server-3.8.3/sbin:<span class="variable">$ZOOKEEPER_HOME</span>/bin:<span class="variable">$KAFKA_HOME</span></span><br><span class="line"><span class="comment">#生效</span></span><br><span class="line">[root@hopestation opt]<span class="comment"># source /etc/profile</span></span><br></pre></td></tr></table></figure><p>参考下图</p><p><img src="https://hopestation.top/upload/2021/04/image-20210424225902377-ac24ed50f6114a21836309fa2879a018.png" alt="image-20210424225902377"><br>修改broker配置文件$KAFKA_HOME&#x2F;conf&#x2F;server.properties</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@hopestation config]<span class="comment"># vim server.properties </span></span><br><span class="line"><span class="comment">#broker的编号，若集群中有多个broker，则每个broker的编号需要设置的不同</span></span><br><span class="line">broker.id=0</span><br><span class="line"><span class="comment">#broker对外提供服务的入口地址</span></span><br><span class="line">listeners = PLAINTEXT://localhost:9092</span><br><span class="line"><span class="comment">#存放消息日志文件的地址</span></span><br><span class="line">log.dirs=/tmp/kafka-logs</span><br><span class="line"><span class="comment">#Kafka所需的Zookeeper集群的地址，我们假设Kafka和Zookeeper都安装在本机</span></span><br><span class="line">zookeeper.connect=localhost:2181</span><br></pre></td></tr></table></figure><p>配置好了之后就可以启动Kafka了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动</span></span><br><span class="line">[root@hopestation kafka_2.13-2.8.0]<span class="comment"># bin/kafka-server-start.sh config/server.properties </span></span><br><span class="line"><span class="comment">#查看是否有Kafak进程</span></span><br><span class="line">[root@hopestation kafka_2.13-2.8.0]<span class="comment"># jps -l</span></span><br><span class="line">29936 kafka.Kafka <span class="comment">#这个就是了</span></span><br><span class="line">29697 org.apache.zookeeper.server.quorum.QuorumPeerMain</span><br></pre></td></tr></table></figure><h3 id="错误及解决"><a href="#错误及解决" class="headerlink" title="错误及解决"></a>错误及解决</h3><p>连接Zookeeper失败</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[2021-04-24 23:19:12,074] INFO Opening socket connection to server localhost/127.0.0.1:2181. Will not attempt to authenticate using SASL (unknown error) (org.apache.zookeeper.ClientCnxn)</span><br><span class="line"></span><br><span class="line">kafka.zookeeper.ZooKeeperClientTimeoutException: Timed out waiting <span class="keyword">for</span> connection <span class="keyword">while</span> <span class="keyword">in</span> state: CONNECTING</span><br></pre></td></tr></table></figure><p>解决</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#关闭zookeeper</span></span><br><span class="line">[root@hopestation ~]<span class="comment"># zkServer.sh stop</span></span><br><span class="line"><span class="comment">#再次启动 查看log</span></span><br><span class="line">[root@hopestation ~]<span class="comment">#  zkServer.sh start-foreground</span></span><br><span class="line"><span class="comment">#绑定8080端口 失败，端口占用</span></span><br><span class="line">org.apache.zookeeper.server.admin.AdminServer<span class="variable">$AdminServerException</span>: Problem starting AdminServer on address 0.0.0.0, port 8080 and <span class="built_in">command</span> URL /commands   org.apache.zookeeper.server.admin.JettyAdminServer.start(JettyAdminServer.java:171)</span><br><span class="line">Caused by: java.net.BindException: Address already <span class="keyword">in</span> use</span><br></pre></td></tr></table></figure><ul><li>可以直接关闭掉占用8080端口的程序</li><li>也可以修改zookeeper的zoo.cfg配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@hopestation opt]<span class="comment"># cd apache-zookeeper-3.6.2-bin/conf</span></span><br><span class="line">[root@hopestation conf]<span class="comment"># vim zoo.cfg</span></span><br><span class="line"><span class="comment">#增加这句话，使用空闲的端口就可以了</span></span><br><span class="line">admin.serverPort=2182</span><br></pre></td></tr></table></figure><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li>深入理解Kafka-核心设计与实践原理</li><li>Kafka官网：<a href="http://kafka.apache.org/">http://kafka.apache.org</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven将Jar包存放到本地仓库</title>
      <link href="/2021/04/12/Maven%E5%B0%86Jar%E5%8C%85%E5%AD%98%E6%94%BE%E5%88%B0%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93-maven%E5%B0%86jar%E5%8C%85%E5%AD%98%E6%94%BE%E5%88%B0%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/"/>
      <url>/2021/04/12/Maven%E5%B0%86Jar%E5%8C%85%E5%AD%98%E6%94%BE%E5%88%B0%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93-maven%E5%B0%86jar%E5%8C%85%E5%AD%98%E6%94%BE%E5%88%B0%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="Maven将Jar包存放到本地仓库"><a href="#Maven将Jar包存放到本地仓库" class="headerlink" title="Maven将Jar包存放到本地仓库"></a>Maven将Jar包存放到本地仓库</h2><ul><li>环境：Windows</li><li>需求：将已有的一个jar包，放到本地Maven仓库</li><li>在该jar包的位置处，打开cmd命令行</li></ul><p>执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file &quot;-Dfile=F:\xx\xx-3.1.jar&quot; &quot;-DgroupId=top.hopestation&quot; &quot;-DartifactId=xx&quot;  &quot;-Dversion=3.1&quot;  &quot;-Dpackaging=jar&quot;</span><br></pre></td></tr></table></figure><p>解释</p><ul><li><p>-Dfile：jar包位置，需要写<strong>绝对路径</strong>，注意路径中<strong>不要带有空格</strong></p></li><li><p>-DgroupId ： 组id，在本地仓库会存放在该目录下</p></li><li><p>-DartifactId：建议和jar同名</p></li><li><p>-Dversion：版本号</p></li><li><p>-Dpackaging：打包方式</p></li></ul><p>遇到的问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ERROR] The goal you specified requires a project to execute but there is no POM in this directory (F:\xx\xx). Please verify you invoked Maven from the correct directory. -&gt; [Help 1]</span><br></pre></td></tr></table></figure><p>解决</p><ul><li>-Dfile：jar包位置，需要写<strong>绝对路径</strong>，注意路径中<strong>不要带有空格</strong></li><li>命令的各个参数，像上面一样加双引号“”试试</li><li>检查全英文字符</li><li>不要换行</li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Kafka之概念认知（一）</title>
      <link href="/2021/04/08/Kafka%E4%B9%8B%E6%A6%82%E5%BF%B5%E8%AE%A4%E7%9F%A5%EF%BC%88%E4%B8%80%EF%BC%89-kafka%E4%B9%8B%E6%A6%82%E5%BF%B5%E8%AE%A4%E7%9F%A5%E4%B8%80/"/>
      <url>/2021/04/08/Kafka%E4%B9%8B%E6%A6%82%E5%BF%B5%E8%AE%A4%E7%9F%A5%EF%BC%88%E4%B8%80%EF%BC%89-kafka%E4%B9%8B%E6%A6%82%E5%BF%B5%E8%AE%A4%E7%9F%A5%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p>目录<br>[TOC]</p><h1 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h1><h2 id="1-What’s-Kafka？"><a href="#1-What’s-Kafka？" class="headerlink" title="1 What’s Kafka？"></a>1 What’s Kafka？</h2><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h3><ul><li><p><strong>起初</strong>是由LinkedIn公司采用Scala语言开发的一个多分区、多副本且基于Zookeeper协调的<strong>分布式消息系统</strong></p></li><li><p><strong>目前</strong>kafka已经定位为一个<strong>分布式流式处理平台</strong>，具有高吞吐量、可持久化、可水平拓展、支持流数据处理特性</p></li></ul><h3 id="1-2-作用"><a href="#1-2-作用" class="headerlink" title="1.2 作用"></a>1.2 作用</h3><ul><li><p><strong>消息系统:</strong> 可以让你发布和订阅流式的记录。这一方面与消息队列或者企业消息系统类似。</p></li><li><p><strong>存储系统:</strong> 可以储存流式的记录，并且有较好的容错性。</p></li><li><p><strong>流处理平台:</strong> 可以在流式记录产生时就进行处理。</p></li></ul><h2 id="2-一些概念"><a href="#2-一些概念" class="headerlink" title="2 一些概念"></a>2 一些概念</h2><p>一个典型的Kafaka体系架构包括若干Producer、若干Broker、若干Consumer，以及一个Zookeeper集群。Zookeeper集群是Kafka用来负责集群元数据的管理、控制器的选举等操作的。Producer将消息发送到Broker，Broker负责将收到的消息存储到磁盘中，Consumer负责从Broker订阅并消费消息。</p><blockquote><p>Kafka里面的细节概念还有很多，这里只说明一些主要概念</p></blockquote><h3 id="2-1-Producer"><a href="#2-1-Producer" class="headerlink" title="2.1 Producer"></a>2.1 Producer</h3><p><code>生产者</code>：也就是发送消息的一方。生产者负责创建消息，然后将其投递到Kafka中。</p><h4 id="2-2-Consumer"><a href="#2-2-Consumer" class="headerlink" title="2.2 Consumer"></a>2.2 Consumer</h4><p><code>消费者</code>：也就是接受消息的一方。消费者连接到Kakfa上并接受消息</p><h4 id="2-3-Broker"><a href="#2-3-Broker" class="headerlink" title="2.3 Broker"></a>2.3 Broker</h4><p><code>服务代理节点</code>：Broker可以简单地看成一个独立的kafka服务实例或服务节点。大多数情况下也可以将其看作一台Kafka服务器，前提是这个服务器上只部署了一个Kafka实例</p><h4 id="2-4-Topic"><a href="#2-4-Topic" class="headerlink" title="2.4 Topic"></a>2.4 Topic</h4><p><code>主题</code>：Kafka中的消息以主题为单位进行归类，生产者负责将消息发送到特定的主题，而消费者负责订阅主题并进行消费。【发送到Kafka集群中的每一条消息都要指定一个主题】</p><h4 id="2-5-Partition"><a href="#2-5-Partition" class="headerlink" title="2.5 Partition"></a>2.5 Partition</h4><p><code>分区</code>：主题是一个逻辑上的概念，它还可以细分为多个分区，一个分区只属于单个主题，很多时候也会把分区称为主题分区（Topic-Partition）。</p><ul><li><p>分区在存储层面可以看作是一个可追加的日志（Log）文件，消息在被追加时会被分配一个偏移量（Offset）</p><p><code>Offset</code>是消息在分区中的唯一标识，通过它来保证消息的顺序性，Offset不跨分区，即Kafka保证的是分区有序而不是主题有序。</p></li><li><p>分区可以分布在不同的<strong>borker</strong>上，每一条消息在被发送&#96;<strong>broker</strong>前，会根据分区规则选择存储到哪个具体的分区。通过修改分区的数量可以实现水平拓展，防止某个服务器机器I&#x2F;O成为性能瓶颈</p></li></ul><h4 id="2-6-Replica"><a href="#2-6-Replica" class="headerlink" title="2.6 Replica"></a>2.6 Replica</h4><p><code>副本</code>：上面说一个消息需要被发送到一个主题，而主题又划分成了多个分区。而kafka为了提升容灾能力就引入了多副本机制，一个分区可以有多个副本。副本之间是“一主多从”的关系，其中Leader副本负责处理读写请求，follower副本只负责与leader副本的消息同步。</p><ul><li>当副本处于不同的broker中，当leader副本出现故障时，从follower副本中重新选举新的leader副本对外提供服务。保证了集群中单个broker失效仍能对外提供服务。</li><li>在同一个时刻，副本（包括leader、follower）之间的数据本非完全一样，存在滞后可能。</li></ul><blockquote><p>副本，一般不对外提供服务，单纯的备份功能。假如对外提供服务的话，可以会出现数据不一致的情况（与后面的ISR、OSR有关）</p></blockquote><h4 id="2-7-AR、ISR、OSR"><a href="#2-7-AR、ISR、OSR" class="headerlink" title="2.7 AR、ISR、OSR"></a>2.7 AR、ISR、OSR</h4><p><code>AR</code>：分区中所有副本统称为AR(Assigned Replicas)，包括leader与follow</p><p><code>ISR</code>：所有与leader副本保持一定程度同步的副本（包括leader副本）组成<strong>ISR</strong>(In-Sync Replicas），ISR集合是AR集合中的一个子集。</p><p><code>OSR</code>：与leader副本同步滞后过多的副本（不包括leader副本）组成<strong>OSR</strong>(Out-of-Sync Replicas)。</p><blockquote><p>消息会先发送的leader副本，然后follower副本才能从leader副本中拉取消息进行同步，同步期间follower相对于leader而言会有一定程度的滞后。前面所说的“一定程度的同步”是指可以忍受的之后范围，此范围可以通过参数配置。即：在此范围内的就是ISR，以外为OSR。正常情况OSR为空集。AR&#x3D;ISR</p></blockquote><h4 id="2-8-HW、LEO"><a href="#2-8-HW、LEO" class="headerlink" title="2.8 HW、LEO"></a>2.8 HW、LEO</h4><p>HW：高水位<br>LEO：待写入消息的Offset</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li>深入理解Kafka-核心设计与实践原理</li><li>Kafka官网：<a href="http://kafka.apache.org/">http://kafka.apache.org</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiro</title>
      <link href="/2021/03/28/Shiro-shiro/"/>
      <url>/2021/03/28/Shiro-shiro/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>Apache Shiro™</strong><br>是一个功能强大且易于使用的Java安全框架，它执行身份验证，授权，加密和会话管理。使用Shiro易于理解的API，您可以快速轻松地保护任何应用程序-从最小的移动应用程序到最大的Web和企业应用程序。</p></blockquote><p>自己总结的几个点：</p><p><img src="https://hopestation.top/upload/2021/03/image-20210328204849312-15eae303f5f94b119d22fd5a77cd9262.png" alt="image20210328204849312.png"><img src="https://hopestation.top/upload/2021/03/image-20210328205125945-f3039290968e48a997e3f1d4d06f7428.png" alt="image20210328205125945.png"><img src="https://hopestation.top/upload/2021/03/image-20210328205151343-f139cec99a3f4436b672f7ecb178b7b6.png" alt="image20210328205151343.png"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《Spring之拦截器、过滤器》</title>
      <link href="/2021/02/04/%E3%80%8ASpring%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8%E3%80%81%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%8B-spring%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
      <url>/2021/02/04/%E3%80%8ASpring%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8%E3%80%81%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%8B-spring%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>拦截器</strong></p><p>实现上基于<a href="http://www.07net01.com/tags-Java-0.html">Java</a>的反射机制，属于面向切面<a href="http://www.07net01.com/">编程</a>（AOP）的一种运用。用于处理请求咱们Controller之前之后的的一些操作。</p><p><strong>过滤器</strong></p><p>依赖于servlet容器。在实现上基于函数回调，可以对几乎所有请求进行过滤</p><p>（拦截器既可以用于WEB，也可以用于Application、Swing中）</p></blockquote><h2 id="1-拦截器实现"><a href="#1-拦截器实现" class="headerlink" title="1 拦截器实现"></a>1 拦截器实现</h2><p>主要步骤</p><ul><li>定义拦截器：实现<code>HandlerInterceptor</code>,重写方法</li><li>注册拦截器：实现<code>WebMvcConfigurer</code>,添加<code>@Configuration</code></li></ul><ol><li>定义拦截器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span>&#123;</span><br><span class="line"> <span class="comment">//在请求处理之前进行调用（Controller方法调用之前</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;preHandle被调用\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;   </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//请求处理之后进行调用，但是在视图被渲染之前（Controller方法调用之后）</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postHandle被调用\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//在整个请求结束之后被调用，也就是在DispatcherServlet 渲染了对应的视图之后执行（主要是用于进行资源清理工作）</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion被调用\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>注册拦截器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">MyInterceptor</span>()).addPathPatterns(<span class="string">&quot;/**&quot;</span>).excludePathPatterns(<span class="string">&quot;/a.do&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里的拦截器是new出来的，在Spring框架中可以交给IOC进行依赖注入，直接使用@Autowired注入</span></span><br><span class="line">        <span class="comment">// addPathPatterns 用于添加拦截的规则，excludePathPatterns 用于排除拦截的规则</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拦截的规则是支持通配符的，写法如下：</p><table><thead><tr><th>通配符</th><th>说明</th></tr></thead><tbody><tr><td><code>*</code></td><td>匹配单个字符，如<code>/user/*</code>匹配到<code>/user/a</code>等，又如<code>/user/*/ab</code>匹配到<code>/user/p/ab</code>；</td></tr><tr><td><code>**</code></td><td>匹配任意多字符（包括多级路径），如<code>/user/**</code>匹配到<code>user/a</code>、<code>/user/abs/po</code>等；</td></tr></tbody></table><p>上述也可以混合使用，如<code>/user/po*/**</code>、<code>/user/&#123;userId&#125;/*</code>（pathValue是可以和通配符共存的）；</p><blockquote><p>注：</p><ol><li>Spring boot 2.0 后<code>WebMvcConfigurerAdapter</code>已经过时，所以这里并不是继承它，而是继承<code>WebMvcConfigurer</code>；</li><li>这里在实操时，使用IDEA工具继承<code>WebMvcConfigurer</code>接口时，使用快捷键Alt+Enter已经无论如何没有提示，进入查看发现这个接口中所有的方法变成了<code>default</code>方法（JDK8新特性，这个修饰符修饰的方法必须要有方法体，此时接口中允许有具体的方法，在实现该接口时，用户可以选择是否重写该方法，而不是必须重写了），所以没有提示，可以手动进入接口中复制对应的方法名（不包括<code>default</code>修饰符）。</li></ol></blockquote><h2 id="2-过滤器实现"><a href="#2-过滤器实现" class="headerlink" title="2 过滤器实现"></a>2 过滤器实现</h2><p>SpringBoot中使用过滤器不需要在web.xml中配置filter，只需要</p><ul><li>添加注解<code>@WebFilter</code></li><li>实现<code>Filter</code>接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns = &quot;/*&quot;, filterName = &quot;test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig arg0)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;过滤器初始化&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span></span><br><span class="line"><span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">System.out.printf(<span class="string">&quot;过滤器实现&quot;</span>);</span><br><span class="line">System.out.println(((HttpServletRequest) servletRequest).getRequestURI());</span><br><span class="line">filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;过滤器销毁了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-应用场景"><a href="#3-应用场景" class="headerlink" title="3 应用场景"></a>3 应用场景</h2><p>可以参考：<a href="https://blog.csdn.net/xiaoyaotan_111/article/details/53817918">https://blog.csdn.net/xiaoyaotan_111/article/details/53817918</a></p><p>未完待续..</p><hr><p>参考文献:</p><ul><li><p>SpringBoot中的过滤器和拦截器的实现：<a href="https://blog.csdn.net/zyf69172/article/details/79679071">https://blog.csdn.net/zyf69172/article/details/79679071</a></p></li><li><p>Spring中拦截器和过滤器的使用：<a href="https://blog.csdn.net/jacksonary/article/details/84572701">https://blog.csdn.net/jacksonary/article/details/84572701</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Spring之AOP、IOC》</title>
      <link href="/2021/02/03/%E3%80%8ASpring%E4%B9%8BAOP%E3%80%81IOC%E3%80%8B-spring%E4%B9%8Baopioc/"/>
      <url>/2021/02/03/%E3%80%8ASpring%E4%B9%8BAOP%E3%80%81IOC%E3%80%8B-spring%E4%B9%8Baopioc/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇总结了一些工作中常用的和关键的Spring知识。</p></blockquote><p>[TOC]</p><h2 id="0-Spring"><a href="#0-Spring" class="headerlink" title="0. Spring"></a>0. Spring</h2><p><img src="https://hopestation.top/upload/2020/12/sp01-c4606869d31840c6a2381c09b1a35e06.png" alt="sp01.png"></p><blockquote><p>模块概括如下</p></blockquote><h3 id="核心容器-Core-Container"><a href="#核心容器-Core-Container" class="headerlink" title="核心容器(Core Container)"></a>核心容器(Core Container)</h3><ol><li>核心容器由<code>spring-core</code>， <code>spring-beans</code>，<code>spring-context</code>，<code>spring-context-support</code>，和<code>spring-expression(Spring Expression Language)</code> 5个模块组成。</li><li><code>spring-core</code>和<code>spring-beans</code>模块提供框架的基本零件，包括IOC和依赖注入特征。<code>BeanFactory</code>是一个复杂的工厂模式实施。它消除了对程序化单例的需求，并允许将实际程序逻辑中的依赖关系的配置和规范分离。</li><li>Context (<code>spring-context</code>) 模块建立由设置在固体基体上的核心和豆类模块：它是访问一个框架式的方式是类似于一个JNDI注册表对象的装置。Context模块从Beans模块中继承了它的特性，并增加了对国际化（例如使用资源包），事件传播，资源加载以及例如Servlet容器的上下文透明创建的支持。Context模块还支持Java EE功能，如EJB，JMX和基本远程处理。该<code>ApplicationContext</code>接口是语境模块的焦点。 <code>spring-context-support</code> 提供了将常见的第三方库集成到Spring应用程序上下文中的支持，特别是用于缓存（EhCache，JCache）和调度（CommonJ，Quartz）。</li><li><code>spring-expression</code>模块提供了强大的表达式语言，用于在运行时查询和操作对象图。它是JSP 2.1规范中规定的统一表达式语言（统一EL）的扩展。该语言支持设置和获取属性值，属性赋值，方法调用，访问数组的内容，集合和索引器，逻辑和算术运算符，命名变量以及从Spring的IoC容器中按名称检索对象。它还支持列表预测和选择以及常用列表聚合。</li></ol><h3 id="AOP-and-Instrumentation（仪表）"><a href="#AOP-and-Instrumentation（仪表）" class="headerlink" title="AOP and Instrumentation（仪表）"></a>AOP and Instrumentation（仪表）</h3><ol><li><code>spring-aop</code>模块提供了符合AOP联盟的面向方面编程实现，允许您定义方法拦截器和切入点，以干净地分离实现应该分离的功能的代码。使用源代码级元数据功能，您还可以将行为信息以类似于.NET属性的方式整合到您的代码中。</li><li><code>spring-aspects</code>模块提供与AspectJ的集成。</li><li><code>spring-instrument</code>模块提供了在特定应用程序服务器中使用的类工具支持和类加载器实现。</li><li><code>spring-instrument-tomcat</code> 模块包含Tomcat的Spring工具代理。</li></ol><h3 id="Messaging"><a href="#Messaging" class="headerlink" title="Messaging"></a>Messaging</h3><p>Spring框架4包括<code>spring-messaging</code>从关键抽象模块 Spring集成项目，例如<code>Message</code>，<code>MessageChannel</code>，<code>MessageHandler</code>，和其他人作为基于消息的应用奠定了基础。该模块还包括一组用于将消息映射到方法的注释，类似于基于Spring MVC注释的编程模型。</p><h3 id="Data-Access-Integration（数据访问-集成）"><a href="#Data-Access-Integration（数据访问-集成）" class="headerlink" title="Data Access&#x2F;Integration（数据访问&#x2F;集成）"></a>Data Access&#x2F;Integration（数据访问&#x2F;集成）</h3><blockquote><p>所述数据访问&#x2F;集成层由JDBC，ORM，OXM，JMS和交易模块。</p></blockquote><ol><li><code>spring-jdbc</code>模块提供了一个JDBC -abstraction层消除了需要冗长的JDBC编码和数据库厂商特有的错误代码解析。</li><li><code>spring-tx</code>模块支持编程和声明式事务 管理，用于实现特殊接口和所有POJO（普通Java对象）的类。</li><li><code>spring-orm</code>模块为流行的对象关系映射 API 提供了集成层 ，包括JPA和 Hibernate。使用<code>spring-orm</code>模块，您可以将这些O &#x2F; R映射框架与Spring提供的所有其他功能（如前面提到的简单的声明式事务管理功能）结合使用。</li><li><code>spring-oxm</code>模块提供了支持JAXB，Castor，JiBX和XStream等对象&#x2F; XML映射实现的抽象层。</li><li><code>spring-jms</code>模块（Java消息服务）包含用于生成和使用消息的功能。自Spring Framework 4.1以来，它提供了与<code>spring-messaging</code>模块的集成 。</li></ol><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><p>网络层由 <code>spring-web</code>, <code>spring-webmvc</code> and <code>spring-websocket</code> 模块组成。</p><ol><li><p><code>spring-web</code>模块提供基本的面向Web的集成功能，如多部分文件上传功能，使用Servlet侦听器的IoC容器的初始化以及面向Web的应用程序上下文。它还包含一个HTTP客户端和Spring远程处理支持的Web相关部分。</p></li><li><p>spring-webmvc模块（也称为Web-Servlet模块）包含Spring的模型 - 视图 - 控制器（MVC）和Web应用程序的REST Web服务实现。Spring的MVC框架提供了域模型代码和Web表单之间的清晰分离，并且与Spring框架的所有其他功能集成在一起。</p></li></ol><h3 id="Test（测试）"><a href="#Test（测试）" class="headerlink" title="Test（测试）"></a>Test（测试）</h3><p><code>spring-test</code>模块支持使用 JUnit 或 TestNG 对 Spring 组件进行单元测试和 集成测试。它提供了一致的Spring 的加载 ApplicationContext 和这些上下文的缓存。它还提供了模拟对象，您可以使用它来单独测试您的代码。</p><h2 id="1-AOP"><a href="#1-AOP" class="headerlink" title="1. AOP"></a>1. AOP</h2><h3 id="1-1-OOP（面向对象编程）"><a href="#1-1-OOP（面向对象编程）" class="headerlink" title="1.1 OOP（面向对象编程）"></a>1.1 OOP（面向对象编程）</h3><p>比如C语言是采用<strong>面向过程</strong>来写代码的，但在企业级开发中，重复代码会有很多，而业务场景对应的恰恰是一些生活中的事物，同一类事物，必然会有一些共同点（比如：人、桌子、合同..）那么OOP就是将事物再代码中对应成对象，从而减少冗余，方便了代码的统一管理，易扩展。由于继承、封装、多态的特性,自然设计出高内聚、低耦合的系统结构,使得系统更灵活…</p><blockquote><p>由事物的<strong>共同属性</strong>  —抽象成了–&gt;  <strong>对象</strong></p></blockquote><h3 id="1-2-AOP（面向切面编程）"><a href="#1-2-AOP（面向切面编程）" class="headerlink" title="1.2 AOP（面向切面编程）"></a>1.2 AOP（面向切面编程）</h3><p>AOP 采用<strong>横向抽取机制</strong>,取代了传统纵向继承体系的重复代码.在运行期通过代理方式向目标类织入增强代码。</p><p><img src="https://hopestation.top/upload/2020/12/image-31a6597620344bde993706eb7cc9dea2.png" alt="image.png"></p><p>横向抽取 ?<br>比如‘人’这个对象，由于都有身高体重等等属性..于是我们抽象成了OOP。然后再企业开发中，我有一些需求：</p><ul><li>这个人一吃饭（运行：eat方法）就输出一个Log日志</li><li>这个人一登录系统（运行：login方法）就先来判断权限身份是否正确</li><li>这个人一睡觉（运行：sleep）就停止某些应用的运行</li></ul><p>你可能会说ok没问题，写在方法后面、用继承、用工厂模式！<br>其实这些并不适用，在敏捷开发的今天，产品需求可能会不断改动、拓展！<br>那么在修改、或者新增删除这种方法的时候以上就会改动较大。AOP就是来解决这个问题的。</p><blockquote><p>由事物的<strong>共同方法</strong>  —抽象成了–&gt;  <strong>织面</strong><br>或者直接说 统一管理了在某一个情况下都要执行的方法：日志、鉴权、配置等</p></blockquote><h3 id="1-3-AOP-使用"><a href="#1-3-AOP-使用" class="headerlink" title="1.3  AOP 使用"></a>1.3  AOP 使用</h3><h4 id="AspectJ-推荐）"><a href="#AspectJ-推荐）" class="headerlink" title="AspectJ (推荐）"></a>AspectJ (推荐）</h4><p>它是一个基于Java语言的AOP框架,Spring 2.0以后新增了对AspectJ切点表达式支持。是基于注解方式的，比较方便的。</p><ol><li>pom -&gt; <code>aspectjweaver</code> </li><li>切面类上加注解 -&gt;  <code>@Aspect</code> </li><li>找切点 -&gt; <code>execution(* top.hopesattion.ProductDao.save(..))&quot;</code></li><li>定义前置通知 -&gt; <code>@Before</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置通知：在 ProductDao.save 方法之前运行</span></span><br><span class="line"><span class="comment">     * value 定义切入点:在save的时候进行校验</span></span><br><span class="line"><span class="comment">     * JoinPoint 获得切点信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(* top.hopesattion.ProductDao.save(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----before 日志、鉴权、配置等操作可以在这执行---&quot;</span> + joinPoint);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h4><p>@Before 前置通知,相当于BeforeAdvice</p><p>@AfterReturning 后置通知,相当于AfterReturningAdvice</p><p>@Around 环绕通知,相当于MethodInterceptor</p><p>@AfterThrowing 异常抛出通知,相当于ThrowAdvice</p><p>@After 最终final通知,不管是否异常,该通知都会执行</p><h4 id="切入点"><a href="#切入点" class="headerlink" title="切入点"></a>切入点</h4><p>在lue处定义</p><p>语法：execution(&lt;访问修饰符&gt;?&lt;返回类型&gt;&lt;方法名&gt;(&lt;参数&gt;)&lt;异常&gt; </p><p><strong>切点的另一种定义方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每个通知内定义切点,会造成工作量大,不易维护,对于重复的切点,可以使用@Pointcut进行定义</span></span><br><span class="line"><span class="comment">//统一定义，方便管理和使用</span></span><br><span class="line"><span class="comment">//myPointcut1</span></span><br><span class="line"><span class="meta">@Pointcut(value = &quot;execution(* com.prim.aspectj.ProductDao.save(..))&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">myPointcut1</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//myPointcut2</span></span><br><span class="line"><span class="meta">@Pointcut(value = &quot;execution(* com.prim.aspectj.ProductDao.update(..))&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">myPointcut2</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//value处直接调用</span></span><br><span class="line"><span class="meta">@Before(value = &quot;myPointcut1()||myPointcut2()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;--before--&quot;</span> + joinPoint);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>AspectJ 也可以基于XML来进行配置AOP，不太推荐就不介绍了。</p></blockquote><h3 id="1-4-AOP-原理"><a href="#1-4-AOP-原理" class="headerlink" title="1.4 AOP 原理"></a>1.4 AOP 原理</h3><h4 id="Java-动态代理。"><a href="#Java-动态代理。" class="headerlink" title="Java 动态代理。"></a>Java 动态代理。</h4><p>具体有如下四步骤：</p><ol><li>通过实现 InvocationHandler 接口创建自己的调用处理器；</li><li>通过为 Proxy 类指定 ClassLoader 对象和一组 interface 来创建动态代理类；</li><li>通过反射机制获得动态代理类的构造函数，其唯一参数类型是调用处理器接口类型；</li><li>通过构造函数创建动态代理类实例，构造时调用处理器对象作为参数被传入。</li></ol><h4 id="GCLIB代理"><a href="#GCLIB代理" class="headerlink" title="GCLIB代理"></a>GCLIB代理</h4><ul><li>cglib（Code Generation Library  ）是一个强大的,高性能,高质量的Code生成类库。它可以在运行期扩展Java类与实现Java接口。</li><li>cglib封装了asm，可以在运行期动态生成新的class。</li><li>cglib用于AOP，jdk中的proxy必须基于接口，cglib却没有这个限制。&gt;</li></ul><blockquote><p>原理区别：</p><p>java动态代理是利用反射机制生成一个实现代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理。而cglib动态代理是利用asm开源包，对代理对象类的class文件加载进来，通过修改其字节码生成子类来处理。</p></blockquote><h4 id="Spring使用的是哪种代理？"><a href="#Spring使用的是哪种代理？" class="headerlink" title="Spring使用的是哪种代理？"></a>Spring使用的是哪种代理？</h4><p>Spring在运行期,生成动态代理对象,不需要特殊的编辑器</p><p>Spring AOP的底层就是通过JDK动态代理或CGlib动态代理技术为目标bean执行横向织入</p><ol><li><p>若目标对象实现了若干接口,Spring使用JDK的java.lang.reflect.Proxy类代理，</p><p>（通过配置可强制使用CGLIB实现AOP）</p></li><li><p>若目标对象没有实现任何接口,Spring使用CGlib库生成目标对象的子类</p></li></ol><blockquote><p>程序中应该优先对接口创建代理,便于程序解耦维护</p><p>Spring只支持方法连接点,不提供属性连接点</p><p>标记的final方法,不能被代理,因为无法进行覆盖</p><ol><li>JDK动态代理,是针对接口生成子类,接口中方法不能使用final修饰</li><li>CGlib是针对目标类生产子类,因此类或方法不能使final的</li></ol></blockquote><h4 id="如何强制使用CGLIB实现AOP？"><a href="#如何强制使用CGLIB实现AOP？" class="headerlink" title="如何强制使用CGLIB实现AOP？"></a>如何强制使用CGLIB实现AOP？</h4><ul><li>添加CGLIB库，SPRING_HOME&#x2F;cglib&#x2F;*.jar</li><li>在spring配置文件中加入&lt;aop:aspectj-autoproxy proxy-target-class&#x3D;”true”&#x2F;&gt;</li></ul><h2 id="2-IOC"><a href="#2-IOC" class="headerlink" title="2. IOC"></a>2. IOC</h2><p><strong>IOC【Inversion of Control】 控制反转</strong></p><ul><li><p>控制：指的是对象创建（实例化、管理）的权利</p></li><li><p>反转：控制权交给外部环境了（spring框架、IoC容器）</p></li><li><p><strong>传统开发⽅式</strong>：⽐如类A依赖于类B，往往会在类A中new⼀个B的对象</p></li><li><p><strong>IoC思想下开发⽅式</strong>：我们不⽤⾃⼰去new对象了，⽽是由IoC容器（Spring框架）去帮助我们实例化对象，并且管理它的内部的依赖关系。</p></li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>动态代理：<a href="https://www.jianshu.com/p/c97f1f83171f">https://www.jianshu.com/p/c97f1f83171f</a></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引</title>
      <link href="/2021/02/01/MySQL%E7%B4%A2%E5%BC%95-mysql%E7%B4%A2%E5%BC%95/"/>
      <url>/2021/02/01/MySQL%E7%B4%A2%E5%BC%95-mysql%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<p>目录</p><p>[TOC]</p><h2 id="1-什么是索引？"><a href="#1-什么是索引？" class="headerlink" title="1 什么是索引？"></a>1 什么是索引？</h2><h3 id="1-1-官方定义"><a href="#1-1-官方定义" class="headerlink" title="1.1 官方定义"></a>1.1 官方定义</h3><p>帮助MYSQL提高查询效率的<strong>数据结构(B+树）</strong></p><h3 id="1-2-优点-作用"><a href="#1-2-优点-作用" class="headerlink" title="1.2 优点&amp;作用"></a>1.2 优点&amp;作用</h3><p>大大加快数据查询速度</p><h3 id="1-3-缺点"><a href="#1-3-缺点" class="headerlink" title="1.3 缺点"></a>1.3 缺点</h3><ul><li>索引需要占据磁盘空间、数据库资源</li><li>对数据进行增删改的时候，同时也需要维护索引，速度会受到影响</li></ul><h2 id="2-索引的分类（重点）"><a href="#2-索引的分类（重点）" class="headerlink" title="2 索引的分类（重点）"></a>2 索引的分类（重点）</h2><p><strong>InnoDB引擎支持的索引有以下几种：</strong></p><ul><li><strong>主键索引</strong>：设定为主键后数据库会自动建立索引（如果这表没有主键，那么Innodb为默认建立一个聚簇索引）</li><li><strong>普通索引</strong>：即一个索引只包含单个列，一个表可以有多个普通索引（也称为  <strong>单列索引</strong>、<strong>单值索引</strong>）</li><li><strong>唯一索引</strong>：索引列的值必须唯一。允许有且只有一个NULL值</li><li><strong>复合索引</strong>：即一个索引包含多个列（也称为 <strong>联合索引</strong>、<strong>组合索引</strong>）</li></ul><blockquote><p>Full Text全文索引 （MySQL5.7版本之前 只能用于 MyISAM引擎）</p><p>全文索引类型为FULL TEXT，再定义索引的列上支持值的全文查找，允许在这些索引中插入重复值和空值。全文索引可以再Char、Varchar、text、类型列上创建。【使用概率不大】</p></blockquote><h2 id="3-索引的基本操作"><a href="#3-索引的基本操作" class="headerlink" title="3  索引的基本操作"></a>3  索引的基本操作</h2><h3 id="3-1-创建主键索引"><a href="#3-1-创建主键索引" class="headerlink" title="3.1  创建主键索引"></a>3.1  创建主键索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 先创建个user表，id设为主键。供我们练习使用</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_user(id <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">PRIMARY</span> KEY,name <span class="type">VARCHAR</span>(<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看索引</span></span><br><span class="line"><span class="keyword">show</span> index <span class="keyword">from</span> t_user</span><br></pre></td></tr></table></figure><p>最后我们发现设为主键后，mysql会自动帮我们把它设为主键索引。虽然是常识了..截图一下</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/31/202114-843195.png" alt="image-20210131202113016"></p><h3 id="3-2-创建普通索引"><a href="#3-2-创建普通索引" class="headerlink" title="3.2  创建普通索引"></a>3.2  创建普通索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 给name添加索引</span></span><br><span class="line"><span class="keyword">create</span> index name_idx <span class="keyword">on</span> t_user(name) </span><br><span class="line"></span><br><span class="line">语法结构是：</span><br><span class="line"><span class="keyword">create</span> index 索引名（随便起） <span class="keyword">on</span> 表名（列名）</span><br></pre></td></tr></table></figure><p>再次查看索引 <code>show index from t_user</code></p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/31/202625-819181.png" alt="image-20210131202610541"></p><p>或者也可以随着创建表的时候创建索引，效果是一样的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--又创建了user2表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_user2 (</span><br><span class="line">id <span class="type">VARCHAR</span> (<span class="number">20</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">NAME <span class="type">VARCHAR</span> (<span class="number">20</span>),</span><br><span class="line">age <span class="type">VARCHAR</span> (<span class="number">20</span>),</span><br><span class="line">KEY (age) <span class="comment">--为age字段创建普通索引，默认索引名就是列名</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/31/203543-811919.png" alt="image-20210131203539463"></p><h3 id="3-3-创建唯一索引"><a href="#3-3-创建唯一索引" class="headerlink" title="3.3  创建唯一索引"></a>3.3  创建唯一索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 给name添加唯一索引</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index name_idx <span class="keyword">on</span> t_user2(name) </span><br><span class="line"></span><br><span class="line">语法结构是：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index 索引名（随便起） <span class="keyword">on</span> 表名（列名）</span><br></pre></td></tr></table></figure><p>或者也可以随着创建表的时候创建索引，效果是一样的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_user3 (</span><br><span class="line">id <span class="type">VARCHAR</span> (<span class="number">20</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">NAME <span class="type">VARCHAR</span> (<span class="number">20</span>),</span><br><span class="line">age <span class="type">VARCHAR</span> (<span class="number">20</span>),</span><br><span class="line"><span class="keyword">unique</span> (age) <span class="comment">-- 唯一索引 age列</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>发现在 show index 的结果中和普通索引没看出什么区别</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/31/205156-794809.png" alt="image-20210131205155493"></p><h3 id="3-4-创建复合索引"><a href="#3-4-创建复合索引" class="headerlink" title="3.4 创建复合索引"></a>3.4 创建复合索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 给name age添加复合索引</span></span><br><span class="line"><span class="keyword">create</span> index name_age <span class="keyword">on</span> t_user5(name,age) </span><br><span class="line"></span><br><span class="line">语法结构是：（和创建普通索引很像，列是多个就可以了）</span><br><span class="line"><span class="keyword">create</span> index 索引名（随便起） <span class="keyword">on</span> 表名（列名<span class="number">1</span>，列名<span class="number">2</span>，列名<span class="number">3.</span>..)  </span><br></pre></td></tr></table></figure><p>或者也可以随着创建表的时候创建索引，效果是一样的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_user4(</span><br><span class="line">id <span class="type">VARCHAR</span> (<span class="number">20</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">name <span class="type">VARCHAR</span> (<span class="number">20</span>),</span><br><span class="line">age <span class="type">VARCHAR</span> (<span class="number">20</span>),</span><br><span class="line">key (name,age) <span class="comment">-- 组合索引</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>复合索引的结果是这样显示的</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/31/205339-731846.png" alt="image-20210131205336533"></p><h3 id="最左匹配原则"><a href="#最左匹配原则" class="headerlink" title="最左匹配原则"></a>最左匹配原则</h3><p>也称<strong>最左前缀匹配原则</strong>，都一样</p><p>指的是在创建的时候，比如创建了该复合索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 给 name age hobby 添加复合索引</span></span><br><span class="line"><span class="keyword">create</span> index name_age <span class="keyword">on</span> t_user5(name,age,hobby) </span><br></pre></td></tr></table></figure><p>那么以下语句在查询时会用到该复合索引吗 ？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 正常查询，可以走索引</span></span><br><span class="line"><span class="keyword">select</span> ... <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;xx&#x27;</span> ,age <span class="operator">=</span> <span class="string">&#x27;xx&#x27;</span>, hobby <span class="operator">=</span> <span class="string">&#x27;xx&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调换一下顺序呢？ 也可以 优化器会自动调整顺序</span></span><br><span class="line"><span class="keyword">select</span> ... <span class="keyword">where</span> hobby <span class="operator">=</span> <span class="string">&#x27;xx&#x27;</span> ,name <span class="operator">=</span> <span class="string">&#x27;xx&#x27;</span> , age <span class="operator">=</span> <span class="string">&#x27;xx&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 少了一个 hobby 或者 hobby和age 呢？ 也可以走这个复合索引</span></span><br><span class="line"><span class="keyword">select</span> ... <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;xx&#x27;</span> ,age <span class="operator">=</span> <span class="string">&#x27;xx&#x27;</span></span><br><span class="line"><span class="keyword">select</span> ... <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;xx&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/31/225559-102662.png" alt="image-20210131225559232"></p><p>这种情况呢？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 少了一个 name 呢？ 不可以</span></span><br><span class="line"><span class="keyword">select</span> ... <span class="keyword">where</span> age <span class="operator">=</span> <span class="string">&#x27;xx&#x27;</span>, hobby <span class="operator">=</span> <span class="string">&#x27;xx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 少了一个 name和age 呢？ 也不可以</span></span><br><span class="line"><span class="keyword">select</span> ... <span class="keyword">where</span>  hobby <span class="operator">=</span> <span class="string">&#x27;xx&#x27;</span></span><br></pre></td></tr></table></figure><p>但是这两个sql再执行计划里type为index，近似于全表扫描</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/31/225329-383301.png" alt="image-20210131225327549"></p><p><strong>总结</strong></p><p>在创建(name,age,hobby) 类似的复合索引时，需要符合最左原则：</p><p>也就是说</p><ul><li>name</li><li>name,age</li><li>name,age,hobby</li></ul><p>最左优先，以最左边的为起点任何连续的索引都能匹配上。<br><strong>但是,</strong> 同时遇到范围查询(&gt;、&lt;、or、between、like)就会停止匹配。</p><blockquote><p>再给出几个参考链接：</p><ul><li><a href="https://blog.csdn.net/sinat_41917109/article/details/88944290?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161210240416780271550695%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=161210240416780271550695&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~top_click~default-1-88944290.pc_v2_rank_blog_default&utm_term=%E6%9C%80%E5%B7%A6%E5%8C%B9%E9%85%8D%E5%8E%9F%E5%88%99+&spm=1018.2226.3001.4450">Mysql最左匹配原则</a></li><li><a href="https://chensj.blog.csdn.net/article/details/108540362?utm_medium=distribute.pc_relevant.none-task-blog-OPENSEARCH-3.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-3.control">MySQL最左匹配原则，道儿上兄弟都得知道的原则</a></li><li><a href="https://blog.csdn.net/dennis211/article/details/78170079">mysql中explain的type的解释</a></li></ul></blockquote><h2 id="4-聚簇索引、非聚簇索引"><a href="#4-聚簇索引、非聚簇索引" class="headerlink" title="4 聚簇索引、非聚簇索引"></a>4 聚簇索引、非聚簇索引</h2><p>上面说了索引的分类，那么其实索引也可以分为这两大种</p><h3 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a>聚簇索引</h3><p>将数据存储与索引放到了一块，索引结构的叶子节点保存了行数据</p><p>（或者简单说：聚簇索引的叶节点就是数据节点。）</p><blockquote><p>因为聚集索引决定了表的存储时的排序，一个表只能有一个物理存储排序,所以只能有一个聚集索引</p></blockquote><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202102/01/001029-442492.png" alt="image-20210201001028792"></p><h3 id="非聚簇索引"><a href="#非聚簇索引" class="headerlink" title="非聚簇索引"></a>非聚簇索引</h3><p>将数据与索引分开存储，索引结构的叶子节点指向了数据对应的位置</p><p>（或者简单说：非聚簇索引的叶节点仍然是索引节点）</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202102/01/001017-452979.png" alt="image-20210201001015940"></p><p><strong>注意：</strong></p><p>在Innodb中，在聚簇索引之上创建的索引称为辅助索引，非聚簇索引都是辅助索引（复合索引、唯一索引、组合索引）。辅助索引叶子节点存储的不再是行的物理位置，而是主键值，辅助索引访问数据总是<strong>需要二次查找</strong>，这就是我们常说的<strong>回表</strong>。</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202102/01/002046-534887.png" alt="image-20210201002045649"></p><p><strong>1.InnoDB中</strong></p><ul><li>InnoDB使用的是聚簇索引，将主键组织到一棵B+树中，而行数据就储存在叶子节点上，若使用“where id&#x3D;14”这样的条件查找主键，则按照B+树的检索算法即可查找到对应的叶节点，之后获得行数据。</li><li>若对Name列进行条件搜索，则需要两个步骤：第一步在辅助索引8+树中检索Name，到达其叶子节点获取对应的主键。第二步使用主键在主索引B+树种再执行一次B+树检索操作，最姿到达叶子节点即可获取整行数据。(重点在于通过其他键需要建立辅助索引)</li><li><strong>聚簇索引默认是主键</strong>，如果表中没有定义主键，InnoDB会选择一个唯一且非空的索引代替。如果没有这样的索引，InnoDB会隐式定义一个主键(类似oracle中的Rowld)来作为聚簇索引。如果已经设置了主键为聚簇素引又希望再单独设置聚簇索引，必须先删除主键，然后添加我们想要的聚簇素引，最后恢复设置主键即可。</li></ul><p><strong>2 MYISAM</strong><br>MyISAM使用的是非聚簇索引，非聚簇索引的两裸B+树看上去没什么不同，节点的结构完全一致只是存储的内容不同而已，主键索引B+树的节点存储了主键，辅助键索引B+树存储了辅助键。表数据存储在独立的地方，这两颗B+树的叶子节点都使用一个地址指向真正的表数据，对于表数据来说，这两个键没有任何差别。由于索引树是独立的，通过辅助键检索无需访问主键的索引树。</p>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx（转）</title>
      <link href="/2021/01/29/Nginx%EF%BC%88%E8%BD%AC%EF%BC%89-nginx%E8%BD%AC/"/>
      <url>/2021/01/29/Nginx%EF%BC%88%E8%BD%AC%EF%BC%89-nginx%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>！本文为转载文章<br>原文连接：<a href="https://www.kuangstudy.com/bbs/1353634800149213186">https://www.kuangstudy.com/bbs/1353634800149213186</a></p></blockquote><h1 id="Nginx-学相伴"><a href="#Nginx-学相伴" class="headerlink" title="Nginx - 学相伴"></a>Nginx - 学相伴</h1><blockquote><p>分享人：秦疆（遇见狂神说）</p></blockquote><h2 id="公司产品出现瓶颈？"><a href="#公司产品出现瓶颈？" class="headerlink" title="公司产品出现瓶颈？"></a>公司产品出现瓶颈？</h2><p>我们公司项目刚刚上线的时候，并发量小，用户使用的少，所以在低并发的情况下，一个jar包启动应用就够了，然后内部tomcat返回内容给用户。<br><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudy98b25257-71be-48f3-8afe-e1226ebc4589.png" alt="img"><br>但是慢慢的，使用我们平台的用户越来越多了，并发量慢慢增大了，这时候一台服务器满足不了我们的需求了。<br><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudy1d77bc35-df30-46fb-8c41-61ff4468d0c9.png" alt="img"><br>于是我们横向扩展，又增加了服务器。这个时候几个项目启动在不同的服务器上，用户要访问，就需要增加一个代理服务器了，通过代理服务器来帮我们转发和处理请求。<br><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudy33ee7313-9356-46e6-a0b2-fc1ed8ef9a62.png" alt="img"><br>我们希望这个代理服务器可以帮助我们接收用户的请求，然后将用户的请求按照规则帮我们转发到不同的服务器节点之上。这个过程用户是无感知的，用户并不知道是哪个服务器返回的结果，我们还希望他可以按照服务器的性能提供不同的权重选择。保证最佳体验！所以我们使用了Nginx。</p><h2 id="什么是Nginx？"><a href="#什么是Nginx？" class="headerlink" title="什么是Nginx？"></a>什么是Nginx？</h2><p>Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP&#x2F;POP3&#x2F;SMTP服务。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。2011年6月1日，nginx 1.0.4发布。</p><p>其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。在全球活跃的网站中有12.18%的使用比率，大约为2220万个网站。</p><p>Nginx 是一个安装非常的简单、配置文件非常简洁（还能够支持perl语法）、Bug非常少的服务。Nginx 启动特别容易，并且几乎可以做到7*24不间断运行，即使运行数个月也不需要重新启动。你还能够不间断服务的情况下进行软件版本的升级。</p><p>Nginx代码完全用C语言从头写成。官方数据测试表明能够支持高达 50,000 个并发连接数的响应。</p><h2 id="Nginx作用？"><a href="#Nginx作用？" class="headerlink" title="Nginx作用？"></a>Nginx作用？</h2><blockquote><p>Http代理，反向代理：作为web服务器最常用的功能之一，尤其是反向代理。</p></blockquote><p>正向代理<br><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudy46bdad36-d3e0-43b0-a223-43360b7e8fc7.png" alt="img"><br>反向代理<br><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudy62a15097-6e2a-4dbe-bcf5-f0d7cab81089.png" alt="img"></p><blockquote><p>Nginx提供的负载均衡策略有2种：内置策略和扩展策略。内置策略为轮询，加权轮询，Ip hash。扩展策略，就天马行空，只有你想不到的没有他做不到的。</p></blockquote><p>轮询<br><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudy4d33dfac-1949-4b2d-abb8-fe0b6e65b8dc.png" alt="img"><br>加权轮询<br><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudyb1e3e440-4159-4259-a174-528b56cb04b2.png" alt="img"><br>iphash对客户端请求的ip进行hash操作，然后根据hash结果将同一个客户端ip的请求分发给同一台服务器进行处理，可以解决session不共享的问题。<br><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudy64acb9a3-cd1a-4c0e-a1fa-9b220046a95a.png" alt="img"></p><blockquote><p>动静分离，在我们的软件开发中，有些请求是需要后台处理的，有些请求是不需要经过后台处理的（如：css、html、jpg、js等等文件），这些不需要经过后台处理的文件称为静态文件。让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作。提高资源响应的速度。</p></blockquote><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudyedb1bbd6-e530-4aba-8fde-68658a10e73f.png" alt="img"></p><p>目前，通过使用Nginx大大提高了我们网站的响应速度，优化了用户体验，让网站的健壮性更上一层楼！</p><h1 id="Nginx的安装"><a href="#Nginx的安装" class="headerlink" title="Nginx的安装"></a>Nginx的安装</h1><h2 id="windows下安装"><a href="#windows下安装" class="headerlink" title="windows下安装"></a>windows下安装</h2><p><strong>1、下载nginx</strong></p><p><a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a> 下载稳定版本。<br>以nginx&#x2F;Windows-1.16.1为例，直接下载 nginx-1.16.1.zip。<br>下载后解压，解压后如下：</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudyb5a1d538-352c-4aa6-88f7-23d18f0588ab.png" alt="img"></p><p><strong>2、启动nginx</strong></p><p>有很多种方法启动nginx</p><p>(1)直接双击nginx.exe，双击后一个黑色的弹窗一闪而过</p><p>(2)打开cmd命令窗口，切换到nginx解压目录下，输入命令 <code>nginx.exe</code> ，回车即可</p><p><strong>3、检查nginx是否启动成功</strong></p><p>直接在浏览器地址栏输入网址 <a href="http://localhost/">http://localhost:80</a> 回车，出现以下页面说明启动成功！</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudya21688c8-159e-4caa-8e65-3dc056b6b78e.png" alt="img"></p><p><strong>4、配置监听</strong></p><p>nginx的配置文件是conf目录下的nginx.conf，默认配置的nginx监听的端口为80，如果80端口被占用可以修改为未被占用的端口即可。</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudyf23105c4-b0b2-4e22-a1bf-b8098f40c144.png" alt="img"></p><p>当我们修改了nginx的配置文件nginx.conf 时，不需要关闭nginx后重新启动nginx，只需要执行命令 <code>nginx -s reload</code> 即可让改动生效</p><p><strong>5、关闭nginx</strong></p><p>如果使用cmd命令窗口启动nginx， 关闭cmd窗口是不能结束nginx进程的，可使用两种方法关闭nginx</p><p>(1)输入nginx命令 <code>nginx -s stop</code>(快速停止nginx) 或 <code>nginx -s quit</code>(完整有序的停止nginx)</p><p>(2)使用taskkill <code>taskkill /f /t /im nginx.exe</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill是用来终止进程的，/f是强制终止 ./t终止指定的进程和任何由此启动的子进程。/im示指定的进程名称 .</span><br></pre></td></tr></table></figure><h2 id="linux下安装"><a href="#linux下安装" class="headerlink" title="linux下安装"></a>linux下安装</h2><p><strong>1、安装gcc</strong></p><p>安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境，则需要安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++</span><br></pre></td></tr></table></figure><p><strong>2、PCRE pcre-devel 安装</strong></p><p>PCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库。nginx也需要此库。命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure><p><strong>3、zlib 安装</strong></p><p>zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y zlib zlib-devel</span><br></pre></td></tr></table></figure><p><strong>4、OpenSSL 安装</strong><br>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。<br>nginx 不仅支持 http 协议，还支持 https（即在ssl协议上传输http），所以需要在 Centos 安装 OpenSSL 库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure><p><strong>5、下载安装包</strong></p><p>手动下载.tar.gz安装包，地址：<a href="https://nginx.org/en/download.html">https://nginx.org/en/download.html</a></p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudyf51b946d-fda4-4675-b913-2084e028a5c0.png" alt="img"></p><p>下载完毕上传到服务器上 &#x2F;root</p><p><strong>6、解压</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.18.0.tar.gzcd nginx-1.18.0</span><br></pre></td></tr></table></figure><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudyd8290598-ede7-4b4b-875b-2f447a9c001f.png" alt="img"></p><p><strong>7、配置</strong></p><p>使用默认配置，在nginx根目录下执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configuremakemake install</span><br></pre></td></tr></table></figure><p>查找安装路径： <code>whereis nginx</code></p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudyf80f8dc2-d5df-4bc2-933d-6ce11f388f6e.png" alt="img"></p><h2 id="Nginx常用命令"><a href="#Nginx常用命令" class="headerlink" title="Nginx常用命令"></a>Nginx常用命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin/./nginx  启动./nginx -s stop  停止./nginx -s quit  安全退出./nginx -s reload  重新加载配置文件ps aux|grep nginx  查看nginx进程</span><br></pre></td></tr></table></figure><p>启动成功访问 服务器ip:80</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/25/kuangstudyd64b251b-817c-436b-b7a0-57da7bb48cd1.png" alt="img"></p><p>注意：如何连接不上，检查阿里云安全组是否开放端口，或者服务器防火墙是否开放端口！<br>相关命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 开启service firewalld start# 重启service firewalld restart# 关闭service firewalld stop# 查看防火墙规则firewall-cmd --list-all# 查询端口是否开放firewall-cmd --query-port=8080/tcp# 开放80端口firewall-cmd --permanent --add-port=80/tcp# 移除端口firewall-cmd --permanent --remove-port=8080/tcp#重启防火墙(修改配置后要重启防火墙)firewall-cmd --reload# 参数解释1、firwall-cmd：是Linux提供的操作firewall的一个工具；2、--permanent：表示设置为持久；3、--add-port：标识添加的端口；</span><br></pre></td></tr></table></figure><h1 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upstream lb&#123;    server 127.0.0.1:8080 weight=1;    server 127.0.0.1:8081 weight=1;&#125;location / &#123;    proxy_pass http://lb;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 高可用 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot（二）常用整合</title>
      <link href="/2021/01/24/SpringBoot%EF%BC%88%E4%BA%8C%EF%BC%89%E5%B8%B8%E7%94%A8%E6%95%B4%E5%90%88-springboot%E4%BA%8C%E5%B8%B8%E7%94%A8%E6%95%B4%E5%90%88/"/>
      <url>/2021/01/24/SpringBoot%EF%BC%88%E4%BA%8C%EF%BC%89%E5%B8%B8%E7%94%A8%E6%95%B4%E5%90%88-springboot%E4%BA%8C%E5%B8%B8%E7%94%A8%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p>目录</p><p>[TOC]</p><h1 id="Spring-Data"><a href="#Spring-Data" class="headerlink" title="Spring Data"></a>Spring Data</h1><h2 id="连接MYSQL"><a href="#连接MYSQL" class="headerlink" title="连接MYSQL"></a>连接MYSQL</h2><ul><li>pom 配置</li><li>application.yml 配置</li><li>src\test\java\com\chasing\spring03data\Spring03DataApplicationTests.java 编辑测试类</li></ul><p>pom引入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        JDBC--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        MYSQL--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#application.yml配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">密码</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/数据库名?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>src\test\java\com\chasing\spring03data\Spring03DataApplicationTests.java 编辑测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing.spring03data;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Spring03DataApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">//查看默认的数据源</span></span><br><span class="line">        System.out.println(dataSource.getClass());</span><br><span class="line">        <span class="comment">//获得数据库连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><p>目录</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/231634-7413.png" alt="image-20200827160623874"></p><p>增加Controller，结合网页get测试，直接操作数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing.spring03data.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCcontroller</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//查询数据库的所有信息</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/userList&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String,Object&gt;&gt; <span class="title function_">userList</span> <span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot; select * from account order by id limit 10&quot;</span>;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = jdbcTemplate.queryForList(sql);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(Map map:list)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;(&quot;</span>+ i++ + <span class="string">&quot;)==&gt; &quot;</span>+ map);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//增加</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addAccount</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into account(id,name,memberid,customerId,createTime) values(1,&#x27;小米&#x27;,101,400222000,&#x27;2018-08-27&#x27;)&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;addDONE&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/update/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">updateAccount</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update account set name=? where id=&quot;</span>+id;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">newName</span>  <span class="operator">=</span> <span class="string">&quot;小明&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql,newName);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;updateDONE&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/del/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delAccount</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from account  where id=&quot;</span>+id;</span><br><span class="line">        jdbcTemplate.update(sql);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;delDONE&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用Druid数据源</p><p>什么是druid，参考<a href="https://www.jianshu.com/p/4dc18f5bee47">此博主文章</a></p><ul><li>pom</li><li>application.yml</li><li>配置类</li><li>测试</li></ul><p>pom引入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        druid--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="comment">#?serverTimezone=UTC解决时区的报错</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/boottest01?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span></span><br><span class="line">    <span class="comment">#druid 数据源专有配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line">    <span class="comment">#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority</span></span><br><span class="line">    <span class="comment">#则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure><p>增加配置类com.chasing.spring03data.config.DruidConfig.java </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing.spring03data.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.StatViewServlet;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.WebStatFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidConfig</span> &#123;</span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">druidDataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//后台监控</span></span><br><span class="line">    <span class="comment">//因为Sping内置了servlet容器，所以没有web.xm了,代替方法 ServletRegistrationBean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletRegistrationBean <span class="title function_">a</span><span class="params">()</span>&#123;</span><br><span class="line">        ServletRegistrationBean&lt;StatViewServlet&gt; bean = <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">StatViewServlet</span>(), <span class="string">&quot;/druid/*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//后台需要有人登录，账号密码配置</span></span><br><span class="line">        HashMap&lt;String, String&gt; initParameters = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//增加配置</span></span><br><span class="line">        initParameters.put(<span class="string">&quot;loginUsername&quot;</span>,<span class="string">&quot;admin&quot;</span>);<span class="comment">//登录key 固定的loginUsername loginPassword</span></span><br><span class="line">        initParameters.put(<span class="string">&quot;loginPassword&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="comment">//允许谁可以访问</span></span><br><span class="line">        initParameters.put(<span class="string">&quot;allow&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">//禁止id访问  initParameters.put(&quot;xxx&quot;,&quot;192.xx.xx.xx&quot;);</span></span><br><span class="line"></span><br><span class="line">        bean.setInitParameters(initParameters);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//filter</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean <span class="title function_">webStartFilter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">FilterRegistrationBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line">        bean.setFilter(<span class="keyword">new</span> <span class="title class_">WebStatFilter</span>());</span><br><span class="line">        <span class="comment">//可以过滤那些请求呢</span></span><br><span class="line">        HashMap&lt;String, String&gt; initParameters = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//这些东西不进行统计</span></span><br><span class="line">        initParameters.put(<span class="string">&quot;exclusions&quot;</span>,<span class="string">&quot;*.js,*.css,/druid/*&quot;</span>);</span><br><span class="line">        bean.setInitParameters(initParameters);</span><br><span class="line">        <span class="keyword">return</span>  bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问<a href="http://localhost:8080/druid/login.html">http://localhost:8080/druid/login.html</a></p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/231638-994993.png" alt="image-20200827224336813"></p><p>显示druid自带的监控页面，输入在DruidConfig配置类里配置的用户名密码，就可以查看一些信息</p><h1 id="整合Mybatis"><a href="#整合Mybatis" class="headerlink" title="整合Mybatis"></a>整合Mybatis</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>mybatis-spring-boot-starter</p><ul><li>pom引入</li><li>application.yml 配置</li><li>编辑测试类</li></ul><p>pom引入</p><p>（也可以直接创建springboot项目，然后导入web，jdbcapi，mysql模块。最后再引入mybatis的starter即可）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.chasing<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot05-data<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot05-data<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  的</span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.chasing.Springboot05DataApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.yml 配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xxxx</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/数据库名?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>com\chasing\Springboot05DataApplicationTests.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot05DataApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        System.out.println(dataSource.getClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/232646-322027.png" alt="image-20200828233210077"></p><h2 id="CRUD-1"><a href="#CRUD-1" class="headerlink" title="CRUD"></a>CRUD</h2><p>目录<br><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/231643-981293.png" alt="image-20200830124531321"></p><p>表字段</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/231714-951537.png" alt="image-20200830124920014"></p><p>src\main\resources\mybatis\mapper\AccountMapper.xml</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.chasing.mapper.AccountMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    查询其全部--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAccountList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Account&quot;</span> &gt;</span></span><br><span class="line">        SELECT * from account LIMIT 15</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    根据id进行查询--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAccountById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Account&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        SELECT * from account WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    插入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addAccount&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Account&quot;</span>&gt;</span></span><br><span class="line">        INSERT INTO account (id,name,memberId,customerId,createTime) VALUES (#&#123;id&#125;,#&#123;name&#125;,#&#123;memberId&#125;,#&#123;customerId&#125;,NOW())</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    修改--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateAccount&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Account&quot;</span>&gt;</span></span><br><span class="line">        UPDATE account set name=#&#123;name&#125;,memberId=#&#123;memberId&#125;,customerId=#&#123;customerId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    删除--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delAccount&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> &gt;</span></span><br><span class="line">        DELETE FROM account where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>com\chasing\mapper\AccountMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.chasing.pojo.Account;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示这一个mybatis的mapper Dao</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountMapper</span> &#123;</span><br><span class="line">    <span class="comment">//查询全部</span></span><br><span class="line">    List&lt;Account&gt; <span class="title function_">queryAccountList</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//根据id查</span></span><br><span class="line">    Account <span class="title function_">queryAccountById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">    <span class="comment">//增加</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">addAccount</span><span class="params">(Account account)</span>;</span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateAccount</span><span class="params">(Account account)</span>;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">delAccount</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>src\main\java\com\chasing\controller\AccountController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing.controller;</span><br><span class="line"><span class="keyword">import</span> com.chasing.mapper.AccountMapper;</span><br><span class="line"><span class="keyword">import</span> com.chasing.pojo.Account;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Account&gt; <span class="title function_">queryAccountList</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Account&gt; accounts = accountMapper.queryAccountList();</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Account account:accounts )&#123;</span><br><span class="line">            System.out.println(count++ + <span class="string">&quot;==&gt;&quot;</span>+ account);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> accounts;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/findByid/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Account <span class="title function_">queryAccountById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> accountMapper.queryAccountById(id);</span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">add</span><span class="params">( )</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> accountMapper.addAccount(<span class="keyword">new</span> <span class="title class_">Account</span>(<span class="number">13</span>, <span class="string">&quot;19911110002&quot;</span>, <span class="string">&quot;333&quot;</span>, <span class="string">&quot;400222002&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>().toString()));</span><br><span class="line">        <span class="keyword">return</span> i.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> accountMapper.updateAccount(<span class="keyword">new</span> <span class="title class_">Account</span>(<span class="number">3</span>,<span class="string">&quot;新的&quot;</span>,<span class="string">&quot;102&quot;</span>,<span class="string">&quot;400222002&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>().toString()));</span><br><span class="line">        <span class="keyword">return</span> i.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/del/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">del</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> accountMapper.delAccount(id);</span><br><span class="line">        <span class="keyword">return</span> i.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h1><h3 id="简介参考此博客：链接"><a href="#简介参考此博客：链接" class="headerlink" title="简介参考此博客：链接"></a>简介参考此博客：<a href="https://blog.csdn.net/taojin12/article/details/88343990">链接</a></h3><h1 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h1><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>pom引入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建java<br><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/231655-671399.png" alt="image-20200904232114743"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span> <span class="comment">//开启Swagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问<br><a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></p><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><p>在上面的java文件中增加配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing.config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span> <span class="comment">//开启Swagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置swagger的Docket的bean实例2</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2).apiInfo(apiInfo());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//配置swagger信息=api info</span></span><br><span class="line">    <span class="keyword">public</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//作者信息</span></span><br><span class="line">        <span class="type">Contact</span> <span class="variable">DEFAULT_CONTACT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;作者名&quot;</span>, <span class="string">&quot;https://xxxx&quot;</span>, <span class="string">&quot;xxxx@qq.com&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfo</span>(</span><br><span class="line">                <span class="string">&quot;我的swagger API文档&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Api Documentation&quot;</span>,</span><br><span class="line">                <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;urn:tos&quot;</span>,</span><br><span class="line">                DEFAULT_CONTACT,</span><br><span class="line">                <span class="string">&quot;Apache 2.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayList</span>()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后：<br><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/231652-329048.png" alt="image-20200905101000032"></p><hr><h1 id="questions"><a href="#questions" class="headerlink" title="questions"></a>questions</h1><p>@Validated的作用</p><p>@ConfigurationProperties 与 @PropertySource的区别</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot（一）配置介绍、项目搭建</title>
      <link href="/2021/01/24/SpringBoot%EF%BC%88%E4%B8%80%EF%BC%89%E9%85%8D%E7%BD%AE%E4%BB%8B%E7%BB%8D%E3%80%81%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA-springboot%E4%B8%80%E9%85%8D%E7%BD%AE%E4%BB%8B%E7%BB%8D%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/"/>
      <url>/2021/01/24/SpringBoot%EF%BC%88%E4%B8%80%EF%BC%89%E9%85%8D%E7%BD%AE%E4%BB%8B%E7%BB%8D%E3%80%81%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA-springboot%E4%B8%80%E9%85%8D%E7%BD%AE%E4%BB%8B%E7%BB%8D%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>目录<br>[TOC]</p><hr><p><strong>martinfowler关于微服务的论文</strong></p><ul><li><p><a href="http://martinfowler.com/articles/microservices.html">微服务论文——原文链接</a></p></li><li><p><a href="http://mp.weixin.qq.com/s?__biz=MjM5MjEwNTEzOQ==&mid=401500724&idx=1&sn=4e42fa2ffcd5732ae044fe6a387a1cc3#rd">微服务论文——译文链接</a></p></li></ul><h2 id="1-项目搭建"><a href="#1-项目搭建" class="headerlink" title="1. 项目搭建"></a>1. 项目搭建</h2><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>IDEA：new project，然后spring initializr</p><p>springBoot的作用简单说就是：简化开发</p><p>写Demo时，直接再springBootApplication启动类 同级目录 创建 controller service dao等即可</p><p>比如 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package com.yue.springboot.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    @ResponseBody</span><br><span class="line">    @RequestMapping(&quot;/hello&quot;)</span><br><span class="line">    public String hello()&#123;</span><br><span class="line">        return  &quot;SpringBoot for WebCrud&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/success&quot;)</span><br><span class="line">    public String success(Map&lt;String,Object&gt; map)&#123;</span><br><span class="line">        map.put(&quot;user&quot;,&quot;胖子&quot;);</span><br><span class="line">        return &quot;success&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动后</p><p>浏览器通过<a href="http://localhost:8080/hello">http://localhost:8080/hello</a> 显示 <code>SpringBoot for WebCrud </code>字样</p><p>可以在 application.properties 通过 <code>server.port=8080</code>修改端口</p><h3 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h3><ol><li><p>首先需自动编译</p><ol><li>打开顶部工具栏  File -&gt; Settings -&gt; Default Settings -&gt; Build -&gt; Compiler  然后勾选 Build project automatically<br><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/231539-478277.png" alt="image-20200816193757349"></li><li>同时按住 Ctrl + Shift + Alt + &#x2F;  然后进入Registry ，勾选自动编译并调整延时参数。<img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/231538-421773.png" alt="image-20200816193612025"></li></ol></li><li><p>pom文件 添加热部署插件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="2-自动配置初探"><a href="#2-自动配置初探" class="headerlink" title="2. 自动配置初探"></a>2. 自动配置初探</h2><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><p>版本控制都在<code>spring-boot-dependencies-2.3.0.RELEASE.pom</code></p><h3 id="starter-启动器"><a href="#starter-启动器" class="headerlink" title="starter 启动器"></a>starter 启动器</h3><p>启动器：就是SpringBoot的启动场景</p><p>根据场景，使用对应的启动器就可以，<a href="https://www.springcloud.cc/spring-boot.html#using-boot-starter">starters 参考文档</a></p><h3 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h3><p>@SpringBootApplication</p><ul><li><p>@SpringBootConfiguration：SpringBoot的配置</p><ul><li>@Configuration：Spring配置类<ul><li>@Component：说明这也是Spring的一个组件</li></ul></li></ul></li><li><p>@EnableAutoConfiguration：自动配置</p><ul><li><p>@AutoConfigurationPackage：自动配置包</p><ul><li>@Import({Registrar.class})包注册</li></ul></li><li><p>@Import({AutoConfigurationImportSelector.class})：导入选择器</p><ul><li><p>List<String> configurations &#x3D; this.getCandidateConfigurations(annotationMetadata, attributes)：</p><p>获取候选的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">protected List&lt;String&gt; getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) &#123;</span><br><span class="line">    List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(this.getSpringFactoriesLoaderFactoryClass(), this.getBeanClassLoader());</span><br><span class="line">    Assert.notEmpty(configurations, &quot;No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct.&quot;);</span><br><span class="line">    return configurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><p>spring-boot-autoconfigure&#x2F;2.3.0.RELEASE&#x2F;spring-boot-autoconfigure-2.3.0.RELEASE.jar!&#x2F;META-INF&#x2F;spring.factories<br>核心配置文件</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/231934-306448.png" alt="image-20200817230359568"></p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/231537-316508.png" alt="image-20200817230359568"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> PropertiesLoaderUtils.loadProperties(resource);</span><br></pre></td></tr></table></figure><p>所有的资源加载到配置类中</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li><p>SpringBoot在启动的时候，从类路径下的<code>META-INF/spring.factories</code>获取指定的值：</p></li><li><p>将这些自动配置的类导入容器，自动配置就会生效</p></li></ol><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>SpringBoot所有自动配置是在启动的时候扫描并加载：<code>spring.factories</code>所有的自动配置类都在这里面，但是不一定会生效，要判断条件是否成立，只要导入了对应的start，就有对应的启动器了，有了启动器，我们自动装配就会生效，然后就配置成功！</p><h2 id="3-基础配置"><a href="#3-基础配置" class="headerlink" title="3. 基础配置"></a>3. 基础配置</h2><h3 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h3><p>也可以写做：yml</p><p><code>application.yaml</code>和<code>application.properties</code>可以作为Spring的配置文件，来更改SpringBoot的默认配置</p><p><code>application.yaml</code> 写法</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 写法是 key: value （value前面必须有个一个空格。用空格的多少来控制属性的同级or上下级关系）</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="comment">## 对象</span></span><br><span class="line"><span class="attr">student:</span></span><br><span class="line"> <span class="attr">name:</span> <span class="string">shangsan</span></span><br><span class="line"> <span class="attr">sex:</span> <span class="number">0</span></span><br><span class="line"><span class="comment">## 对象行内写法</span></span><br><span class="line"><span class="attr">person:</span> &#123;<span class="attr">name:</span> <span class="string">lisi</span>,<span class="attr">age:</span> <span class="number">18</span>&#125;</span><br><span class="line"><span class="comment">## 列表</span></span><br><span class="line"><span class="attr">pets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pig</span></span><br><span class="line"><span class="comment">## 列表行内写法</span></span><br><span class="line"><span class="attr">pets:</span> [<span class="string">cat</span>,<span class="string">dog</span>,<span class="string">pig</span>]</span><br></pre></td></tr></table></figure><p><code>application.properties</code> 写法</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">student.name</span>=<span class="string">zhangsan</span></span><br><span class="line"><span class="attr">student.sex</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure><h3 id="Demo：配置文件读取"><a href="#Demo：配置文件读取" class="headerlink" title="Demo：配置文件读取"></a>Demo：配置文件读取</h3><ul><li>写配置文件</li><li>创建实体类<ul><li>Person.java</li><li>Dog.java</li></ul></li><li>测试</li></ul><p>代码</p><p><code>application.yaml</code>配置文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 1. yaml支持松散绑定 比如 last-name 可以匹配 lastName 属性</span></span><br><span class="line"><span class="comment">## 2. 可以利用$&#123;&#125;来插入一些东西，比如$&#123;randomm.uuid&#125;等等</span></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line"> <span class="attr">name:</span> <span class="string">小明</span></span><br><span class="line"> <span class="attr">sex:</span> <span class="string">男</span></span><br><span class="line"> <span class="attr">happy:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">brithday:</span> <span class="number">2019</span><span class="string">/11/02</span></span><br><span class="line"> <span class="attr">maps:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>,<span class="attr">k2:</span> <span class="string">v2</span>,<span class="attr">k3:</span> <span class="string">v3</span>&#125;</span><br><span class="line"> <span class="attr">dog:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">黑黑</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">6</span></span><br><span class="line">  <span class="attr">friends:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">小明</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">小明2</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">小明3</span></span><br></pre></td></tr></table></figure><p>实体类</p><ol><li><code>Person.java</code>:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing.pojo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用<span class="doctag">@ConfigurationProperties</span>注解 需要在pom文件中添加依赖</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;dependency&gt;</span></span><br><span class="line"><span class="comment"> *             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment"> *             &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment"> *             &lt;optional&gt;true&lt;/optional&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  要是自己建立别的配置文件 比如：myconfig.properties</span></span><br><span class="line"><span class="comment"> *  就不能用<span class="doctag">@ConfigurationProperties</span> </span></span><br><span class="line"><span class="comment"> *      而是需要用这个注解 来指定配置文件 <span class="doctag">@PropertySource</span>(value = &quot;classpath:myconfig.properties&quot;)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> *  并且 需要配合SPEL表达式，如：</span></span><br><span class="line"><span class="comment"> *      <span class="doctag">@Value</span>(&quot;$&#123;name1&#125;&quot;)</span></span><br><span class="line"><span class="comment"> *      private String name;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex ;</span><br><span class="line">    <span class="keyword">private</span> Boolean happy;</span><br><span class="line">    <span class="keyword">private</span> Date brithday;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">public</span>  <span class="title function_">Person</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, String sex, Boolean happy, Date brithday, Map&lt;String, Object&gt; maps, Dog dog)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.happy = happy;</span><br><span class="line">        <span class="built_in">this</span>.brithday = brithday;</span><br><span class="line">        <span class="built_in">this</span>.maps = maps;</span><br><span class="line">        <span class="built_in">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//toString + Getter + Setter 省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>Dog.java</code>:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing.pojo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> List friends;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name, Integer age, List friends)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.friends = friends;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//toString + Getter + Setter 省略</span></span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试，利用自带的测试类</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/232120-481917.png" alt="image-20200818220107944"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing;</span><br><span class="line"><span class="keyword">import</span> com.chasing.pojo.Dog;</span><br><span class="line"><span class="keyword">import</span> com.chasing.pojo.Person;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot02ConfigApplicationTests</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Person p1;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(p1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行：<img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/233224-435299.png" alt="image-20200818221013873"></p><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person&#123;name=<span class="string">&#x27;小明&#x27;</span>, sex=<span class="string">&#x27;男&#x27;</span>, happy=<span class="literal">true</span>, brithday=Sat Nov <span class="number">02</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">2019</span>, maps=&#123;k1=v1, k2=v2, k3=v3&#125;, dog=Dog&#123;name=<span class="string">&#x27;黑黑&#x27;</span>, age=<span class="number">6</span>, friends=[小明, 小明<span class="number">2</span>, 小明<span class="number">3</span>]&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在实际使用中，推荐使用<code>yml</code>的方式</p><h3 id="JSR303校验"><a href="#JSR303校验" class="headerlink" title="JSR303校验"></a>JSR303校验</h3><ol><li><p>加入pom依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用</p><ul><li><pre><code class="java">@Component@Validated //@validated来校验数据，如果数据异常则会统一抛出异常，方便异常中心统一处理。@ConfigurationProperties(prefix = &quot;blackdog&quot;)public class Dog &#123;     //2.在属性上进行校验 这里的意思是年龄超过51 报错信息为‘年龄错了’    @Max(value = 5l,message = &quot;年龄错了&quot;)    private Integer age;    private List friends;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">其他校验注解</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">@NotNull(message=&quot;名字不能为空&quot;)</span><br><span class="line">private String userName;</span><br><span class="line">@Max(value=120,message=&quot;年龄最大不能查过120&quot;)</span><br><span class="line">private int age;</span><br><span class="line">@Email(message=&quot;邮箱格式错误&quot;)</span><br><span class="line">private String email;</span><br><span class="line"></span><br><span class="line">空检查</span><br><span class="line">@Null       验证对象是否为null</span><br><span class="line">@NotNull    验证对象是否不为null, 无法查检长度为0的字符串</span><br><span class="line">@NotBlank   检查约束字符串是不是Null还有被Trim的长度是否大于0,只对字符串,且会去掉前后空格.</span><br><span class="line">@NotEmpty   检查约束元素是否为NULL或者是EMPTY.</span><br><span class="line">    </span><br><span class="line">Booelan检查</span><br><span class="line">@AssertTrue     验证 Boolean 对象是否为 true  </span><br><span class="line">@AssertFalse    验证 Boolean 对象是否为 false  </span><br><span class="line">    </span><br><span class="line">长度检查</span><br><span class="line">@Size(min=, max=) 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内  </span><br><span class="line">@Length(min=, max=) string is between min and max included.</span><br><span class="line"></span><br><span class="line">日期检查</span><br><span class="line">@Past       验证 Date 和 Calendar 对象是否在当前时间之前  </span><br><span class="line">@Future     验证 Date 和 Calendar 对象是否在当前时间之后  </span><br><span class="line">@Pattern    验证 String 对象是否符合正则表达式的规则</span><br><span class="line"></span><br><span class="line">.......等等</span><br><span class="line">除此以外，我们还可以自定义一些数据校验规则</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ol><h3 id="配置文件的加载及优先级"><a href="#配置文件的加载及优先级" class="headerlink" title="配置文件的加载及优先级"></a>配置文件的加载及优先级</h3><p>1。 springboot启动会扫描以下位置的application.properties或者application.yml作为默认的配置文件</p><ul><li><p>工程根目录:.&#x2F;config&#x2F;</p></li><li><p>工程根目录：.&#x2F;</p></li><li><p>classpath:&#x2F;config&#x2F;</p></li><li><p>classpath:&#x2F;</p><p>加载的优先级顺序是从上向下加载，并且所有的文件都会被加载，高优先级的内容会覆盖底优先级的内容，形成互补配置</p></li></ul><ol start="2"><li>也可以通过指定配置spring.config.location来改变默认配置，一般在项目已经打包后，我们可以通过指令 　　java -jar xxxx.jar –spring.config.location&#x3D;D:&#x2F;kawa&#x2F;application.yml来加载外部的配置</li></ol><h3 id="多环境切换"><a href="#多环境切换" class="headerlink" title="多环境切换"></a>多环境切换</h3><p><strong>方式一：</strong></p><ol><li><p>建立一个 application配置文件</p></li><li><p>建立其他配置文件（名字格式必须是<code>application-xxx</code>）</p><p>比如 开发环境是<code>application-dev.yaml</code>，&#96;&#96;application-dev.test&#96;是测试环境1</p></li></ol><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/231032-644390.png" alt="image-20200819232647583"></p><p>3.文件中通过<img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/232222-749101.png" alt="image-20200819232909507">来指定配置文件，来方便的切换</p><p><strong>方式二：</strong></p><p>只写一个配置文件<code>application.yml</code> 通过<code>active</code>来指定配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"> <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="comment"># 启动dev的1配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">profiles:</span></span><br><span class="line">  <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 配置一</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"> <span class="attr">port:</span> <span class="number">8084</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 配置二</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"> <span class="attr">port:</span> <span class="number">8086</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="静态资源优先级"><a href="#静态资源优先级" class="headerlink" title="静态资源优先级"></a>静态资源优先级</h3><p>resources &gt; static &gt; public</p><p>首页：在resources、 static、 public中刃任意一个放如index.html即可</p><p>templates下的文件只能通过 controller来进行跳转</p><h3 id="Thymeleaf"><a href="#Thymeleaf" class="headerlink" title="Thymeleaf"></a>Thymeleaf</h3><h4 id="配置Thymeleaf"><a href="#配置Thymeleaf" class="headerlink" title="配置Thymeleaf"></a>配置Thymeleaf</h4><ol><li>pom引入</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;!--thymeleaf--&gt;</span></span><br><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line">　　<span class="string">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">　　<span class="string">&lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>Html引入</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>在setting中开始输入提示</li></ol><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/231230-719796.png" alt="image-20200821221356141"></p><h4 id="Demo-1"><a href="#Demo-1" class="headerlink" title="Demo"></a>Demo</h4><ul><li>test.HTML</li><li>HelloController.java</li></ul><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/231339-519699.png" alt="image-20200821222449699"></p><p>test.HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>SpringBoot<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>  &gt;</span>Done<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>HelloController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(Model modle)</span>&#123;</span><br><span class="line">        modle.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;i can ! &quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/231355-208750.png" alt="image-20200821222711706">s’sss</p><h2 id="4-员工管理系统"><a href="#4-员工管理系统" class="headerlink" title="4. 员工管理系统"></a>4. 员工管理系统</h2><h3 id="4-1-准备工作"><a href="#4-1-准备工作" class="headerlink" title="4.1 准备工作"></a>4.1 准备工作</h3><p>概要</p><ul><li>安装<code>lombok</code></li><li>编写实体类 <code>Department.java Employee.java</code> 部门和员工类</li><li>编写Dao <code>DepartmentDao.java EmployeeDao.java</code>（不用装数据库，暂时在Dao中模拟数据）</li><li>导入前台模板</li></ul><h4 id="使用lombok简化开发"><a href="#使用lombok简化开发" class="headerlink" title="使用lombok简化开发"></a>使用<code>lombok</code>简化开发</h4><blockquote><p>LomBok作用：简单说就是通过<strong>加注解</strong>的方式，帮你<strong>自动生成</strong>toString\Getter\Setter\构造函数\equals方法等等，不用我们手动去编写，代码也看起来更加简洁</p></blockquote><ol><li><p>pom引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>安装lombok插件。（两种情况）<br>现在新版本的IDEA可能在商场里搜不到<code>lombok</code>插件，先试着搜插件，若能搜到就<strong>Install</strong>。进入第三步<br><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/231500-172708.png" alt="image-20200823090201181"></p><p>若搜索不到</p><p>进入<a href="https://plugins.jetbrains.com/plugin/6317-lombok/versions">该网址下载lombok</a>插件，要根据你的IDEA版本下载<br><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/231613-403847.png" alt="image-20200823090449769"></p><p>下载后安装lombok</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/232315-690478.png" alt="image-20200823091721045"></p><p>然后找到你下载的lombok <img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/232408-147082.png" alt="image-20200823091908092"> 进行安装即可，提示restart就restart</p></li><li><p>使用lombok<br>根据需要在类上加注解，即可<br><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/232319-805115.png" alt="image-20200823090946293"></p><p>注解含义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">常用注解：</span><br><span class="line"><span class="meta">@Setter</span> ：注解在类或字段，注解在类时为所有字段生成setter方法，注解在字段上时只为该字段生成setter方法。</span><br><span class="line"><span class="meta">@Getter</span> ：使用方法同上，区别在于生成的是getter方法。</span><br><span class="line"><span class="meta">@ToString</span> ：注解在类，添加toString方法。</span><br><span class="line"><span class="meta">@EqualsAndHashCode</span>： 注解在类，生成hashCode和equals方法。</span><br><span class="line"><span class="meta">@NoArgsConstructor</span>： 注解在类，生成无参的构造方法。</span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span>： 注解在类，为类中需要特殊处理的字段生成构造方法，比如<span class="keyword">final</span>和被<span class="meta">@NonNull</span>注解的字段。</span><br><span class="line"><span class="meta">@AllArgsConstructor</span>： 注解在类，生成包含类中所有字段的构造方法。</span><br><span class="line"><span class="meta">@Data</span>： 注解在类，生成setter/getter、equals、canEqual、hashCode、toString方法，如为<span class="keyword">final</span>属性，则不会为该属性生成setter方法。</span><br><span class="line"><span class="meta">@Slf4j</span>： 注解在类，生成log变量，严格意义来说是常量。</span><br></pre></td></tr></table></figure></li></ol><h4 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h4><p><code>src\main\java\com\chasing\pojo\Department.java</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Department</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//id</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">//部门名字</span></span><br><span class="line">    <span class="keyword">private</span> String departmentName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>src\main\java\com\chasing\pojo\Employee.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Integer gender; <span class="comment">// 0 famle ,1 male</span></span><br><span class="line">    <span class="keyword">private</span> Department department;</span><br><span class="line">    <span class="keyword">private</span> Date brith;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(Integer id, String lastName, String email, Integer gender, Department department)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.lastName = lastName;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">        <span class="built_in">this</span>.department = department;</span><br><span class="line">        <span class="built_in">this</span>.brith = <span class="keyword">new</span> <span class="title class_">Date</span>();<span class="comment">//每次都用当前时间代替</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写Dao"><a href="#编写Dao" class="headerlink" title="编写Dao"></a>编写Dao</h4><p><code>src\main\java\com\chasing\dao\EmployeeDao.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing.dao;</span><br><span class="line"><span class="keyword">import</span> com.chasing.pojo.Department;</span><br><span class="line"><span class="keyword">import</span> com.chasing.pojo.Employee;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DepartmentDao departmentDao;</span><br><span class="line">    <span class="comment">//模拟数据库中的员工数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Employee&gt; employees = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        employees = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Employee&gt;();</span><br><span class="line">        employees.put(<span class="number">1001</span>,<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1001</span>,<span class="string">&quot;小米&quot;</span>,<span class="string">&quot;4832747382@qq.com&quot;</span>,<span class="number">1</span>,<span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">104</span>,<span class="string">&quot;建设部&quot;</span>)));</span><br><span class="line">        employees.put(<span class="number">1002</span>,<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1002</span>,<span class="string">&quot;小黄&quot;</span>,<span class="string">&quot;6122212@qq.com&quot;</span>,<span class="number">0</span>,<span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">102</span>,<span class="string">&quot;体育部&quot;</span>)));</span><br><span class="line">        employees.put(<span class="number">1003</span>,<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1003</span>,<span class="string">&quot;小名&quot;</span>,<span class="string">&quot;1025047382@qq.com&quot;</span>,<span class="number">0</span>,<span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">101</span>,<span class="string">&quot;教学部&quot;</span>)));</span><br><span class="line">        employees.put(<span class="number">1004</span>,<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1004</span>,<span class="string">&quot;小分&quot;</span>,<span class="string">&quot;233747382@qq.com&quot;</span>,<span class="number">1</span>,<span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">105</span>,<span class="string">&quot;学习部&quot;</span>)));</span><br><span class="line">        employees.put(<span class="number">1005</span>,<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1005</span>,<span class="string">&quot;小五&quot;</span>,<span class="string">&quot;8789482@qq.com&quot;</span>,<span class="number">1</span>,<span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">103</span>,<span class="string">&quot;图书部&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主键自增</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">initId</span> <span class="operator">=</span> <span class="number">1006</span>;</span><br><span class="line">    <span class="comment">//增加一个员工</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(employee.getId() == <span class="literal">null</span>)&#123;</span><br><span class="line">            employee.setId(initId++);</span><br><span class="line">        &#125;</span><br><span class="line">        employee.setDepartment(departmentDao.getDepartmentByid(employee.getDepartment().getId()));</span><br><span class="line">        employees.put(employee.getId(),employee);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询全部员工信息</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;Employee&gt; <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employees.values();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据id查询员工</span></span><br><span class="line">    <span class="keyword">public</span> Employee <span class="title function_">getEmployeeeById</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employees.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除员工通过id</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delEmployeeeById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        employees.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>src\main\java\com\chasing\dao\DepartmentDao.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing.dao;</span><br><span class="line"><span class="keyword">import</span> com.chasing.pojo.Department;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="comment">//部门Dao</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DepartmentDao</span> &#123;</span><br><span class="line">    <span class="comment">//模拟数据库中的部门数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Department&gt; departments = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        departments = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Department&gt;();</span><br><span class="line">        departments.put(<span class="number">101</span>,<span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">101</span>,<span class="string">&quot;教学部&quot;</span>));</span><br><span class="line">        departments.put(<span class="number">101</span>,<span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">102</span>,<span class="string">&quot;体育部&quot;</span>));</span><br><span class="line">        departments.put(<span class="number">101</span>,<span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">103</span>,<span class="string">&quot;学习部&quot;</span>));</span><br><span class="line">        departments.put(<span class="number">101</span>,<span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">104</span>,<span class="string">&quot;建设部&quot;</span>));</span><br><span class="line">        departments.put(<span class="number">101</span>,<span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">105</span>,<span class="string">&quot;图书部&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取所有的部门信息</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;Department&gt; <span class="title function_">getDepartment</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  departments.values();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据id获取部门</span></span><br><span class="line">    <span class="keyword">public</span> Department <span class="title function_">getDepartmentByid</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> departments.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="导入前台模板"><a href="#导入前台模板" class="headerlink" title="导入前台模板"></a>导入前台模板</h4><ul><li><p>链接：<a href="https://pan.baidu.com/s/1mr3L6PB47aOuVBzUSB2CCw">https://pan.baidu.com/s/1mr3L6PB47aOuVBzUSB2CCw</a> </p><ul><li>提取码：5vrg</li></ul></li><li><p>模板样式</p></li></ul><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/231622-889945.png" alt="image-20200823095357517"></p><ul><li>如图copy到项目<br><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/231623-788551.png" alt="image-20200823095206084"></li></ul><h3 id="4-2-登录功能和拦截器"><a href="#4-2-登录功能和拦截器" class="headerlink" title="4.2 登录功能和拦截器"></a>4.2 登录功能和拦截器</h3><ul><li>在<code>index.html</code>的表单加入name属性，并加入</li><li>编写<code>LoginController.java</code>控制器</li><li>编写<code>LoginHandlerInterceptor.java</code>拦截器</li><li>编写<code>MyMvcConfig.java</code>配置mvc</li></ul><p><code>src\main\resources\templates\index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;h3 mb-3 font-weight-normal&quot;</span>&gt;</span>Please sign in<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--若登录错误，在界面上显示提示信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;not #strings.isEmpty(msg)&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--加上name=uname字段，便于和后台交互--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Username&quot;</span> <span class="attr">required</span>=<span class="string">&quot;&quot;</span> <span class="attr">autofocus</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--加上name=pwd字段，便于和后台交互--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span> <span class="attr">required</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>src\main\java\com\chasing\controller\LoginController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing.controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpCookie;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(<span class="meta">@RequestParam(&quot;uname&quot;)</span> String uname,</span></span><br><span class="line"><span class="params">                        <span class="meta">@RequestParam(&quot;pwd&quot;)</span> String pwd,</span></span><br><span class="line"><span class="params">                        Model model, HttpSession session)</span>&#123;</span><br><span class="line">        <span class="comment">//若登录成功 则重定向到主界面（简单判断用户名不为空 和 密码=121）</span></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(uname) &amp;&amp; <span class="string">&quot;121&quot;</span>.equals(pwd))&#123;</span><br><span class="line">           <span class="comment">//将用户名存入session 便于 拦截器 进行判断</span></span><br><span class="line">            session.setAttribute(<span class="string">&quot;loginUser&quot;</span>,uname);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/main&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//否则，告诉用户登陆失败</span></span><br><span class="line">            model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;用户名或者密码错误!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>src\main\java\com\chasing\config\LoginHandlerInterceptor.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing.config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginHandlerInterceptor</span>  <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//登录时候应该有用户的session</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">loginUser</span> <span class="operator">=</span> request.getSession().getAttribute(<span class="string">&quot;loginUser&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(loginUser != <span class="literal">null</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        request.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;没有权限，请先登录！&quot;</span>);</span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/index&quot;</span>).forward(request,response);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>src\main\java\com\chasing\config\MyMvcConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chasing.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ViewControllerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/index&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/404&quot;</span>).setViewName(<span class="string">&quot;404&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/main&quot;</span>).setViewName(<span class="string">&quot;dashboard&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/list&quot;</span>).setViewName(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//addInterceptor(new LoginHandlerInterceptor()) 拦截后进入我们自定义的拦截器</span></span><br><span class="line">        <span class="comment">//addPathPatterns(&quot;/**&quot;) 拦截所用请求</span></span><br><span class="line">        <span class="comment">//excludePathPatterns(&quot;/index&quot;,&quot;/&quot;,&quot;/user/login&quot;,&quot;/css/*&quot;,&quot;/js/**&quot;,&quot;/img/**&quot;); //但是，以上请求不拦截</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginHandlerInterceptor</span>())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/index&quot;</span>,<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/user/login&quot;</span>,<span class="string">&quot;/css/*&quot;</span>,<span class="string">&quot;/js/**&quot;</span>,<span class="string">&quot;/img/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2021/01/24/Docker-docker/"/>
      <url>/2021/01/24/Docker-docker/</url>
      
        <content type="html"><![CDATA[<p>Docker</p><p>[TOC]</p><h2 id="1-Docker-为什么会出现？"><a href="#1-Docker-为什么会出现？" class="headerlink" title="1. Docker 为什么会出现？"></a>1. Docker 为什么会出现？</h2><p>一款产品：开发-上线 两套环境 ！应用环境， 应用配置！</p><p>可以一个产品在开发环境可以正常运行！版本更新导致运维环境不可用！对运维人员考验比较大！</p><p>开发即运维！</p><p>环境配置十分的环境，配一个机器都要部署环境！（集群Redis..ES..Hadoop）费事费力</p><p>发布一个项目（Jar + （Redis 、 MYSQL 、JDK、ES…） ）配置太麻烦了，不能跨平台</p><p>开发Windows，最后发布在Linux！</p><p>传统：开发生产jar，然后交给运维！</p><p>现在：开发打包部署上线，一套流程做完！</p><p>Docker给以上的问题：提出了解决方案！</p><p>比如安卓应用：</p><p>apk - 应用商店 - 下载 - 安装 即可用！</p><p>java - jar - 打包项目带上环境 （镜像） + Docker（相当于商店） - 之后下载运行即可</p><h2 id="2-Docoker"><a href="#2-Docoker" class="headerlink" title="2. Docoker"></a>2. Docoker</h2><p>docker的思想来源于集装箱</p><p>Jre - 多个应用 （端口冲突） - 原来都是交叉的</p><p>隔离 - Docker核心思想</p><p>传统：水果 - 毒药</p><p>Docker：水果 | 毒药</p><p>Docker通过隔离机制，可以将服务器利用到极致！</p><p>本质：所有的技术都是因为出现了一些问题，我们需要去解决才去学习！</p><p>docker对比VM十分的小巧</p><blockquote><p>vm 虚拟机：</p><p>在Windows中装了一个Vmware通过这个软件我们可以虚拟出来一台或者多台电脑！笨重！</p><p>好几个G，启动 几分钟</p><p>docker：隔离，镜像（最核心的环境 4M + Jdk+mysql） 十分 的轻巧，秒级启动</p></blockquote><p>基于go语言</p><h2 id="3-Docker模型"><a href="#3-Docker模型" class="headerlink" title="3. Docker模型"></a>3. Docker模型</h2><p><img src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=3715698682,4278914997&fm=26&gp=0.jpg" alt="img"></p><p><strong>镜像(image)</strong></p><p>在镜像就好比是一个模板，可以通过这个模板来创建容器服务，tomcat镜像&#x3D;&#x3D;&gt; run &#x3D;&#x3D;&gt; tomcat01 容器(提供服务器)，通过这个镜像可以创建多个容器(最终服务运行或者项目运行就是在容器中的)。</p><p><strong>容器(container)</strong></p><p>Docker利用容器技术，独立运行一个或者一个组应用，通过镜像来创建的。<br>启动，停止，删除，基本命令！<br>目前就可以把这个容器理解为就是一个简易的linux系统</p><p><strong>仓库(repository)</strong></p><p>仓库就是存放镜像的地方！ 还原屏幕<br>仓库分为公有仓库和私有仓库！<br>Docker Hub I<br>阿里云…都有容器服务器</p><h2 id="4-Docker安装"><a href="#4-Docker安装" class="headerlink" title="4. Docker安装"></a>4. Docker安装</h2><blockquote><p>可以参考：<a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p></blockquote><h3 id="4-1-前提"><a href="#4-1-前提" class="headerlink" title="4.1 前提"></a>4.1 前提</h3><ul><li>Linux的基础</li><li>Linux服务器（这里以CentOS系统为例）</li></ul><p>环境查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看内核 需要 3.10 以上版本</span></span><br><span class="line">[root@hopestation ~]<span class="comment"># uname -r</span></span><br><span class="line">3.10.0-1062.18.1.el7.x86_64</span><br><span class="line"><span class="comment">#系统版本</span></span><br><span class="line">[root@hopestation ~]<span class="comment"># cat /etc/os-release</span></span><br><span class="line">NAME=<span class="string">&quot;CentOS Linux&quot;</span></span><br><span class="line">VERSION=<span class="string">&quot;7 (Core)&quot;</span></span><br><span class="line">ID=<span class="string">&quot;centos&quot;</span></span><br><span class="line">ID_LIKE=<span class="string">&quot;rhel fedora&quot;</span></span><br><span class="line">VERSION_ID=<span class="string">&quot;7&quot;</span></span><br><span class="line">PRETTY_NAME=<span class="string">&quot;CentOS Linux 7 (Core)&quot;</span></span><br><span class="line">ANSI_COLOR=<span class="string">&quot;0;31&quot;</span></span><br><span class="line">CPE_NAME=<span class="string">&quot;cpe:/o:centos:centos:7&quot;</span></span><br><span class="line">HOME_URL=<span class="string">&quot;https://www.centos.org/&quot;</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">&quot;https://bugs.centos.org/&quot;</span></span><br><span class="line"></span><br><span class="line">CENTOS_MANTISBT_PROJECT=<span class="string">&quot;CentOS-7&quot;</span></span><br><span class="line">CENTOS_MANTISBT_PROJECT_VERSION=<span class="string">&quot;7&quot;</span></span><br><span class="line">REDHAT_SUPPORT_PRODUCT=<span class="string">&quot;centos&quot;</span></span><br><span class="line">REDHAT_SUPPORT_PRODUCT_VERSION=<span class="string">&quot;7&quot;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-安装"><a href="#4-2-安装" class="headerlink" title="4.2 安装"></a>4.2 安装</h3><p>1 卸载已安装Docker组件（如果没有安装过Dokcer，跳过这一步）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                 docker-client \</span><br><span class="line">                 docker-client-latest \</span><br><span class="line">                 docker-common \</span><br><span class="line">                 docker-latest \</span><br><span class="line">                 docker-latest-logrotate \</span><br><span class="line">                 docker-logrotate \</span><br><span class="line">                 docker-engine</span><br></pre></td></tr></table></figure><p>2 安装yum软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure><p>3 设置阿里云镜像仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>4 更新软件包索引</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><p>5 安装Docker CE</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行过程中 需要进行两次确认 输入 y 回车即可</span></span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>6 启动Docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><p>7 查看Docker 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br><span class="line"><span class="comment">#如果出现一下内容就证明安装成功了</span></span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           20.10.0</span><br><span class="line"> API version:       1.41</span><br><span class="line"> Go version:        go1.13.15</span><br><span class="line"> Git commit:        7287ab3</span><br><span class="line"> Built:             Tue Dec  8 18:57:35 2020</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"> Experimental:      <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          20.10.0</span><br><span class="line">  API version:      1.41 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.13.15</span><br><span class="line">  Git commit:       eeddea2</span><br><span class="line">  Built:            Tue Dec  8 18:56</span><br><span class="line">  ....</span><br></pre></td></tr></table></figure><h3 id="4-3-HelloWorld"><a href="#4-3-HelloWorld" class="headerlink" title="4.3 HelloWorld"></a>4.3 HelloWorld</h3><p>1 运行helloworld镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@hopestation ~]<span class="comment">#  docker run hello-world</span></span><br><span class="line"><span class="comment">#一开始会提示本地没有找到</span></span><br><span class="line">Unable to find image <span class="string">&#x27;hello-world:latest&#x27;</span> locally</span><br><span class="line"><span class="comment"># 然后等待一下 他就会 去远程拉取</span></span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">0e03bdcc26d7: Pull complete </span><br><span class="line">Digest: sha256:1a523af650137b8accdaed439c17d684df61ee4d74feac151b5b337bd29e7eec</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"><span class="comment"># 运行成功 输出 Hello from Docker!</span></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the <span class="string">&quot;hello-world&quot;</span> image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image <span class="built_in">which</span> runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, <span class="built_in">which</span> sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure><p>2 查看所有镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@hopestation ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line"><span class="comment"># 这里有我们的helloworld</span></span><br><span class="line">hello-world   latest    bf756fb1ae65   11 months ago   13.3kB</span><br></pre></td></tr></table></figure><h3 id="4-4-镜像加速"><a href="#4-4-镜像加速" class="headerlink" title="4.4 镜像加速"></a>4.4 镜像加速</h3><p><img src="https://hopestation.top/upload/2020/12/docker01-3b37e7d5e3834a72a9828218bdbcc201.png" alt="docker01"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建目录</span></span><br><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://xxxxxx.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="4-5-卸载"><a href="#4-5-卸载" class="headerlink" title="4.5 卸载"></a>4.5 卸载</h3><ol><li><p>卸载Docker Engine，CLI和Containerd软件包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum remove docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li><li><p>主机上的映像，容器，卷或自定义配置文件不会自动删除。要删除所有图像，容器和卷：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure></li></ol><p>您必须手动删除所有已编辑的配置文件。</p><h2 id="5-Docker-run流程"><a href="#5-Docker-run流程" class="headerlink" title="5. Docker run流程"></a>5. Docker run流程</h2><p><img src="https://hopestation.top/upload/2020/12/docker02-b4c07828aa4b4b5ebdcaf645cad9c9a3.png" alt="docker02"></p><p>找不到时的结果：：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@hopestation ~]<span class="comment">#  docker run eq1dqw312</span></span><br><span class="line"><span class="comment">#本地没找到</span></span><br><span class="line">Unable to find image <span class="string">&#x27;helloyue666:latest&#x27;</span> locally</span><br><span class="line"><span class="comment">#远程也没找到</span></span><br><span class="line">docker: Error response from daemon: pull access denied <span class="keyword">for</span> eq1dqw312, </span><br><span class="line">repository does not exist or may require <span class="string">&#x27;docker login&#x27;</span>: denied: requested access to the resource is denied.</span><br><span class="line">See <span class="string">&#x27;docker run --help&#x27;</span>.</span><br></pre></td></tr></table></figure><h2 id="6-Docker基本原理"><a href="#6-Docker基本原理" class="headerlink" title="6. Docker基本原理"></a>6. Docker基本原理</h2><p>Docker是一个Client-Server结构的系统，Docker守护进程运行在主机上， 然后通过Socket连接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器。 容器，是一个运行时环境，就是我们前面说到的集装箱。</p><p><img src="https://img-blog.csdnimg.cn/20200112215409745.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvbGRfX19wbGF5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>为什么Docker比VM等虚拟机快</strong></p><ol><li>docker有着比虚拟机更少的抽象层。由亍docker不需要Hypervisor实现硬件资源虚拟化,运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。</li><li>docker利用的是宿主机的内核,而不需要Guest OS。因此,当新建一个容器时,docker不需要和虚拟机一样重新加载一个操作系统内核。仍而避免引寻、加载操作系统内核返个比较费时费资源的过程,当新建一个虚拟机时,虚拟机软件需要加载Guest OS,返个新建过程是分钟级别的。而docker由于直接利用宿主机的操作系统,则省略了返个过程,因此新建一个docker容器只需要几秒钟。</li></ol><table><thead><tr><th></th><th>Docker容器</th><th>虚拟机（VM）</th></tr></thead><tbody><tr><td>操作系统</td><td>与宿主机共享OS</td><td>宿主机OS上运行宿主机OS</td></tr><tr><td>存储大小</td><td>镜像小，便于存储与传输</td><td>镜像庞大（vmdk等）</td></tr><tr><td>运行性能</td><td>几乎无额外性能损失</td><td>操作系统额外的cpu、内存消耗</td></tr><tr><td>移植性</td><td>轻便、灵活、适用于Linux</td><td>笨重、与虚拟化技术耦合度高</td></tr><tr><td>硬件亲和性</td><td>面向软件开发者</td><td>面向硬件运维者</td></tr></tbody></table><h2 id="7-Docker命令"><a href="#7-Docker命令" class="headerlink" title="7. Docker命令"></a>7. Docker命令</h2><p><strong>帮助命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#显示版本信息</span></span><br><span class="line">docker version</span><br><span class="line"><span class="comment">#显示cick</span></span><br><span class="line">docker info</span><br><span class="line">docker 命令 --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><p><strong>docker images 镜像命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有本地的主机上的镜像</span></span><br><span class="line">docker images</span><br><span class="line">[root@hopestation ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">hello-world   latest    bf756fb1ae65   11 months ago   13.3kB</span><br><span class="line"><span class="comment"># 解释</span></span><br><span class="line">REPOSITORY 镜像的仓库源</span><br><span class="line">TAG 镜像的标签</span><br><span class="line">IMAGE ID 镜像的<span class="built_in">id</span></span><br><span class="line">CREATED 镜像的创建时间</span><br><span class="line">SIZE 镜像的大小</span><br><span class="line"><span class="comment"># 可选项</span></span><br><span class="line">-a， --a11 <span class="comment"># 列出所有镜像</span></span><br><span class="line">-q，--quiet <span class="comment">#只显示镜像的id</span></span><br></pre></td></tr></table></figure><p><strong>docker search 搜索镜像</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索镜像</span></span><br><span class="line">[root@hopestation ~]<span class="comment"># docker search mysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选项，通过搜藏来过滤 搜索出来的镜像就是STARS大于3000的</span></span><br><span class="line">[root@hopestation ~]<span class="comment"># docker search mysql --filter=stars=3000</span></span><br><span class="line">NAME      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql     MySQL is a widely used, open-source relation…   10247     [OK]       </span><br><span class="line">mariadb   MariaDB is a community-developed fork of MyS…   3785      [OK]       </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊聊 Elasticsearch 的倒排索引（转）</title>
      <link href="/2021/01/24/%E8%81%8A%E8%81%8A%20Elasticsearch%20%E7%9A%84%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95%EF%BC%88%E8%BD%AC%EF%BC%89-%E8%81%8A%E8%81%8Aelasticsearch%E7%9A%84%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95%E8%BD%AC/"/>
      <url>/2021/01/24/%E8%81%8A%E8%81%8A%20Elasticsearch%20%E7%9A%84%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95%EF%BC%88%E8%BD%AC%EF%BC%89-%E8%81%8A%E8%81%8Aelasticsearch%E7%9A%84%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic1.zhimg.com/v2-907cd298f05ca9a115d6dedee330eda9_1440w.jpg?source=172ae18b" alt="聊聊 Elasticsearch 的倒排索引"></p><h1 id="聊聊-Elasticsearch-的倒排索引"><a href="#聊聊-Elasticsearch-的倒排索引" class="headerlink" title="聊聊 Elasticsearch 的倒排索引"></a>聊聊 Elasticsearch 的倒排索引</h1><blockquote><p>本文转自知乎：<a href="https://zhuanlan.zhihu.com/p/76485252">https://zhuanlan.zhihu.com/p/76485252</a></p><p>原作者：Beautiful Java</p><p>同时推荐阅读：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/73585202">为什么需要 Elasticsearch</a> </li><li><a href="https://zhuanlan.zhihu.com/p/79611440">从 Lucene 到 Elasticsearch</a></li></ul></blockquote><h2 id="为什么需要倒排索引"><a href="#为什么需要倒排索引" class="headerlink" title="为什么需要倒排索引"></a><strong>为什么需要倒排索引</strong></h2><p>倒排索引，也是索引。</p><p>索引，初衷都是为了快速检索到你要的数据。</p><p><strong>每种数据库都有自己要解决的问题（或者说擅长的领域），对应的就有自己的数据结构，而不同的使用场景和数据结构，需要用不同的索引，才能起到最大化加快查询的目的。</strong></p><p>对 Mysql 来说，是 B+ 树，对 Elasticsearch&#x2F;Lucene 来说，是倒排索引。</p><blockquote><p>Elasticsearch 是建立在全文搜索引擎库 Lucene 基础上的搜索引擎，它隐藏了 Lucene 的复杂性，取而代之的提供一套简单一致的 RESTful API，不过掩盖不了它底层也是 Lucene 的事实。<br>Elasticsearch 的倒排索引，其实就是 Lucene 的倒排索引。</p></blockquote><h2 id="为什么叫倒排索引"><a href="#为什么叫倒排索引" class="headerlink" title="为什么叫倒排索引"></a><strong>为什么叫倒排索引</strong></h2><p>在没有搜索引擎时，我们是直接输入一个网址，然后获取网站内容，这时我们的行为是：</p><p>document -&gt; to -&gt; words</p><p>通过文章，获取里面的单词，此谓「正向索引」，forward index.</p><p>后来，我们希望能够输入一个单词，找到含有这个单词，或者和这个单词有关系的文章：</p><p>word -&gt; to -&gt; documents</p><p>于是我们把这种索引，成为inverted index，直译过来，应该叫「反向索引」，国内翻译成「倒排索引」，有点委婉了。</p><p>现在思考一下，如果让你来设计这个可以通过单词，反向找到文章的索引，你会怎么实现？</p><blockquote><p>关于 Elasticsearch 这类「搜索引擎」要解决的问题、它和传统关系型数据库的区别等等，可以看我之前写的文章：为什么需要 Elasticsearch（文末有链接）</p></blockquote><h2 id="倒排索引的内部结构"><a href="#倒排索引的内部结构" class="headerlink" title="倒排索引的内部结构"></a><strong>倒排索引的内部结构</strong></h2><p>首先，在数据生成的时候，比如爬虫爬到一篇文章，这时我们需要对这篇文章进行分析，将文本拆解成一个个单词。</p><p>这个过程很复杂，比如“生存还是死亡”，你要如何让分词器自动将它分解为“生存”、“还是”、“死亡”三个词语，然后把“还是”这个无意义的词语干掉。这里不展开，感兴趣的同学可以查看文末关于「分析器」的链接。</p><p>接着，把这两个词语以及它对应的文档id存下来：</p><p>word documentId</p><p>生存 1</p><p>死亡 1</p><p>接着爬虫继续爬，又爬到一个含有“生存”的文档，于是索引变成：</p><p>word documentId</p><p>生存 1,2</p><p>死亡 1</p><p>下次搜索“生存”，就会返回文档ID是 1、2两份文档。</p><p>然而上面这套索引的实现，给小孩子当玩具玩还行，要上生产环境，那还远着。</p><p>想想看，这个世界上那么多单词，中文、英文、日文、韩文 … 你每次搜索一个单词，我都要全局遍历一遍，很明显不行。</p><p>于是有了排序，我们需要对单词进行排序，像 B+ 树一样，可以在页里实现二分查找。</p><p>光排序还不行，你单词都放在磁盘呢，磁盘 IO 慢的不得了，所以 Mysql 特意把索引缓存到了内存。</p><p>你说好，我也学 Mysql 的，放内存，3，2，1，放，哐当，内存爆了。</p><p>哪本字典，会把所有单词都贴在目录里的？</p><p>所以，上图：</p><p><img src="https://pic1.zhimg.com/80/v2-b601cbe28ef7c822b393451cf2347e9c_720w.jpg" alt="img"></p><p>Lucene 的倒排索，增加了最左边的一层「字典树」term index，它不存储所有的单词，只存储单词前缀，通过字典树找到单词所在的块，也就是单词的大概位置，再在块里二分查找，找到对应的单词，再找到单词对应的文档列表。</p><p>当然，内存寸土寸金，能省则省，所以 Lucene 还用了 FST（Finite State Transducers）对它进一步压缩。</p><p>FST 是什么？这里就不展开了，这次重点想聊的，是最右边的 Posting List 的，别看它只是存一个文档 ID 数组，但是它在设计时，遇到的问题可不少。</p><h2 id="Frame-Of-Reference"><a href="#Frame-Of-Reference" class="headerlink" title="Frame Of Reference"></a><strong>Frame Of Reference</strong></h2><p>原生的 Posting List 有两个痛点：</p><ul><li><strong>如何压缩以节省磁盘空间</strong></li><li><strong>如何快速求交并集（intersections and unions）</strong></li></ul><p>先来聊聊压缩。</p><p>我们来简化下 Lucene 要面对的问题，假设有这样一个数组：</p><p>[73, 300, 302, 332, 343, 372]</p><p>如何把它进行尽可能的压缩？</p><p>Lucene 里，数据是按 Segment 存储的，每个 Segment 最多存 65536 个文档 ID， 所以文档 ID 的范围，从 0 到 2^16-1，所以如果不进行任何处理，那么每个元素都会占用 2 bytes ，对应上面的数组，就是 6 * 2 &#x3D; 12 bytes.</p><p>怎么压缩呢？</p><p><strong>压缩，就是尽可能降低每个数据占用的空间，同时又能让信息不失真，能够还原回来。</strong></p><p><strong>Step 1：Delta-encode —— 增量编码</strong></p><p>我们只记录元素与元素之间的增量，于是数组变成了：</p><p>[73, 227, 2, 30, 11, 29]</p><p><strong>Step 2：Split into blocks —— 分割成块</strong></p><p>Lucene里每个块是 256 个文档 ID，这样可以保证每个块，增量编码后，每个元素都不会超过 256（1 byte）.</p><p>为了方便演示，我们假设每个块是 3 个文档 ID：</p><p>[73, 227, 2], [30, 11, 29]</p><p><strong>Step 3：Bit packing —— 按需分配空间</strong></p><p>对于第一个块，[73, 227, 2]，最大元素是227，需要 8 bits，好，那我给你这个块的每个元素，都分配 8 bits的空间。</p><p>但是对于第二个块，[30, 11, 29]，最大的元素才30，只需要 5 bits，那我就给你每个元素，只分配 5 bits 的空间，足矣。</p><p>这一步，可以说是把吝啬发挥到极致，精打细算，按需分配。</p><p>以上三个步骤，共同组成了一项编码技术，Frame Of Reference（FOR）：</p><p><img src="https://pic4.zhimg.com/80/v2-a3ee78a1dbc82f9d660adcf940b26687_720w.jpg" alt="img"></p><h2 id="Roaring-bitmaps"><a href="#Roaring-bitmaps" class="headerlink" title="Roaring bitmaps"></a><strong>Roaring bitmaps</strong></h2><p>接着来聊聊 Posting List 的第二个痛点 —— 如何快速求交并集（intersections and unions）。</p><p>在 Lucene 中查询，通常不只有一个查询条件，比如我们想搜索：</p><ul><li>含有“生存”相关词语的文档</li><li>文档发布时间在最近一个月</li><li>文档发布者是平台的特约作者</li></ul><p>这样就需要根据三个字段，去三棵倒排索引里去查，当然，磁盘里的数据，上一节提到过，用了 FOR 进行压缩，所以我们要把数据进行反向处理，即解压，才能还原成原始的文档 ID，然后把这三个文档 ID 数组在内存中做一个交集。</p><blockquote><p>即使没有多条件查询， Lucene 也需要频繁求并集，因为 Lucene 是分片存储的。</p></blockquote><p>同样，我们把 Lucene 遇到的问题，简化成一道算法题。</p><p>假设有下面三个数组：</p><p>[64, 300, 303, 343]</p><p>[73, 300, 302, 303, 343, 372]</p><p>[303, 311, 333, 343]</p><p>求它们的交集。</p><p><strong>Option 1: Integer 数组</strong></p><p>直接用原始的文档 ID ，可能你会说，那就逐个数组遍历一遍吧，遍历完就知道交集是什么了。</p><p>其实对于有序的数组，用跳表（skip table）可以更高效，这里就不展开了，因为不管是从性能，还是空间上考虑，Integer 数组都不靠谱，假设有100M 个文档 ID，每个文档 ID 占 2 bytes，那已经是 200 MB，而这些数据是要放到内存中进行处理的，把这么大量的数据，从磁盘解压后丢到内存，内存肯定撑不住。</p><p><strong>Option 2: Bitmap</strong></p><p>假设有这样一个数组：</p><p>[3,6,7,10]</p><p>那么我们可以这样来表示：</p><p>[0,0,1,0,0,1,1,0,0,1]</p><p>看出来了么，对，<strong>我们用 0 表示角标对应的数字不存在，用 1 表示存在。</strong></p><p>这样带来了两个好处：</p><ul><li>节省空间：既然我们只需要0和1，那每个文档 ID 就只需要 1 bit，还是假设有 100M 个文档，那只需要 100M bits &#x3D; 100M * 1&#x2F;8 bytes &#x3D; 12.5 MB，比之前用 Integer 数组 的 200 MB，优秀太多</li><li>运算更快：0 和 1，天然就适合进行位运算，求交集，「与」一下，求并集，「或」一下，一切都回归到计算机的起点</li></ul><p><strong>Option 3: Roaring Bitmaps</strong></p><p>细心的你可能发现了，bitmap 有个硬伤，就是不管你有多少个文档，你占用的空间都是一样的，之前说过，Lucene Posting List 的每个 Segement 最多放 65536 个文档ID，举一个极端的例子，有一个数组，里面只有两个文档 ID：</p><p>[0, 65535]</p><p>用 Bitmap，要怎么表示？</p><p>[1,0,0,0,….(超级多个0),…,0,0,1]</p><p>你需要 65536 个 bit，也就是 65536&#x2F;8 &#x3D; 8192 bytes，而用 Integer 数组，你只需要 2 * 2 bytes &#x3D; 4 bytes</p><p>呵呵，死板的 bitmap。可见在文档数量不多的时候，使用 Integer 数组更加节省内存。</p><p>我们来算一下临界值，很简单，无论文档数量多少，bitmap都需要 8192 bytes，而 Integer 数组则和文档数量成线性相关，每个文档 ID 占 2 bytes，所以：</p><p>8192 &#x2F; 2 &#x3D; 4096</p><p>当文档数量少于 4096 时，用 Integer 数组，否则，用 bitmap.</p><p><img src="https://pic3.zhimg.com/80/v2-1c9f5518671ace1cae24f819cd8c049e_720w.jpg" alt="img"></p><blockquote><p>这里补充一下 Roaring bitmaps 和 之前讲的 Frame Of Reference 的关系。<br>Frame Of Reference 是压缩数据，减少磁盘占用空间，所以当我们从磁盘取数据时，也需要一个反向的过程，即解压，解压后才有我们上面看到的这样子的文档ID数组：[73, 300, 302, 303, 343, 372] ，接着我们需要对数据进行处理，求交集或者并集，这时候数据是需要放到内存进行处理的，我们有三个这样的数组，这些数组可能很大，而内存空间比磁盘还宝贵，于是需要更强有力的压缩算法，同时还要有利于快速的求交并集，于是有了Roaring Bitmaps 算法。<br>另外，Lucene 还会把从磁盘取出来的数据，通过 Roaring bitmaps 处理后，缓存到内存中，Lucene 称之为 filter cache.</p></blockquote><h2 id="升华与总结"><a href="#升华与总结" class="headerlink" title="升华与总结"></a><strong>升华与总结</strong></h2><p>文章的最后，如果来一段话总结（zhuang）升华（bi）一下，这篇文章就会得高分。</p><p>有什么总结，可以拔高这篇文章的高度呢？</p><p><strong>首先，你会发现，很多业务上、技术上要解决的问题，最后都可以抽象为一道算法题，复杂问题简单化。</strong></p><p>呃，这个“华”，升的还不够。</p><p>另一个具有高度的“华”，其实在开头已经讲出来了：</p><p><strong>每种数据库都有自己要解决的问题（或者说擅长的领域），对应的就有自己的数据结构，而不同的使用场景和数据结构，需要用不同的索引，才能起到最大化加快查询的目的。</strong></p><p>这篇文章讲的虽是 Lucene 如何实现倒排索引，如何精打细算每一块内存、磁盘空间、如何用诡谲的位运算加快处理速度，但往高处思考，再类比一下 Mysql，你就会发现，虽然都是索引，但是实现起来，截然不同。</p><p>这个往细讲，又是一篇文章：<strong>如此不同，如此成功 —— B+ 树索引 vs 倒排索引</strong></p><p>标题都想好了，就看各位爷了，点赞超 50 就写 …</p><p>可能没机会写了，那就 …</p><h2 id="留个作业吧"><a href="#留个作业吧" class="headerlink" title="留个作业吧"></a><strong>留个作业吧</strong></h2><p>知识要融合起来看才有意思。</p><p>来，放大招了，两个问题：</p><ul><li>Lucene 为什么不用 b+ 树来搜索数据？</li><li>Mysql 为什么不用 倒排索引来检索数据？</li></ul><p>附上两张图：</p><p><img src="https://pic2.zhimg.com/80/v2-2d1e16c1bd63e10701e36a9367403b9d_720w.jpg" alt="img">Mysql 的 B+树索引</p><p><img src="https://pic1.zhimg.com/80/v2-b601cbe28ef7c822b393451cf2347e9c_720w.jpg" alt="img">Lucene 的倒排索引</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a><strong>参考</strong></h2><ul><li><a href="https://link.zhihu.com/?target=https://www.elastic.co/blog/frame-of-reference-and-roaring-bitmaps">Frame of Reference and Roaring Bitmaps</a></li><li><a href="https://link.zhihu.com/?target=https://stackoverflow.com/questions/7727686/whats-the-difference-between-an-inverted-index-and-a-plain-old-index">Stackoverflow: What’s the difference between an inverted index and a plain old index?</a></li><li><a href="https://link.zhihu.com/?target=https://www.elastic.co/guide/cn/elasticsearch/guide/current/analysis-intro.html">Elasticsearch权威指南：分析与分析器</a></li><li><a href="https://link.zhihu.com/?target=https://www.cnblogs.com/jajian/p/10465519.html">Elasticsearch 技术分析（七）： Elasticsearch 的性能优化</a></li><li><a href="https://zhuanlan.zhihu.com/p/73585202">为什么需要 Elastic-search</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch（入门篇）</title>
      <link href="/2021/01/24/ElasticSearch%EF%BC%88%E5%85%A5%E9%97%A8%E7%AF%87%EF%BC%89-elasticsearch%E5%85%A5%E9%97%A8%E7%AF%87/"/>
      <url>/2021/01/24/ElasticSearch%EF%BC%88%E5%85%A5%E9%97%A8%E7%AF%87%EF%BC%89-elasticsearch%E5%85%A5%E9%97%A8%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h1><blockquote><p>版本 ElasticSearch 7.6.1</p><p>讲解初级阶段 ELK的 E 和 K</p></blockquote><h2 id="Why？"><a href="#Why？" class="headerlink" title="Why？"></a>Why？</h2><p>为什么要用ElasticSearch</p><p>原来SQL实现模糊查询时<code>%xxx%</code>，如果是大数据，就十分慢！可以使用索引！</p><p>ElasticSearchL：就是用来做搜索的！（百度、Github、淘宝电商）</p><h2 id="Lucene"><a href="#Lucene" class="headerlink" title="Lucene"></a>Lucene</h2><p>是一套信息检索工具包！jar包不包含所所引起系统！</p><p>包含的：索引结构！读写索引的工具！排序，搜索规则..工具类！</p><p>ElasticSearch是基于Lucene做了一些封装和增强。上手简单</p><p><strong>ElasticSearch vs Solr 总结</strong><br>1、es基本是开箱即用(解压就可以用！)，非常简单。Solr安装略微复杂一丢丢！</p><p>2.Solr利用Zookeeper进行分布式管理，而Elasticsearch自身带有分布式协调管理功能。</p><p>3、Solr支持更多格式的数据，比如JSON、XML、CSV，而Elasticsearch仅支持json文件格式。</p><p>4、Solr 官方提供的功能更多，而 Elasticsearch 本身更注重于核心功能，高级功能多有第三方插件提供，例如图形化界面需要kibana友好支撑-！</p><p>5、Solr 查询快，但更新索引时慢(即插入删除慢)，用于电商等查询多的应用；<br>·ES建立索引快(即查询慢)，即实时性查询快，用于facebook新浪等搜索。<br>· Solr是传统搜索应用的有力解决方案，但Elasticsearch更适用于新兴的实时搜索应用。</p><p>6、Solr比较成熟，有一个更大，更成熟的用户、开发和贡献者社区，而Elasticsearch相对开发维护者较少，更新太快，学习使用   成本较高。</p><h2 id="ElasticSearch概述"><a href="#ElasticSearch概述" class="headerlink" title="ElasticSearch概述"></a>ElasticSearch概述</h2><p>Elaticsearch，简称为es，es是一个开源的高扩展的<strong>分布式全文检索引擎</strong>，它可以近乎<strong>实时的存储</strong>、<strong>检索数据</strong>；本身扩展性很好，可以扩展到上百台服务器，处理PB级别的数据。es也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的<strong>RESTful API</strong>来隐藏Lucene的复杂性，从而让全文搜索变得简单。<br>据国际权威的数据库产品评测机构DB Engines的统计，在2016年1月，ElasticSearch已超过Solr等，成为<strong>排名第一的搜索引擎类应用</strong>。</p><p><strong>历史：</strong></p><p>多年前，一个叫做Shay Banon的刚结婚不久的失业开发者，由于妻子要去伦敦学习厨师，他便跟着也去了。在他找工作的过程中，为了给妻子构建一个食谱的搜索引擎，他开始构建一个早期版本的Lucene.<br>直接基于Lucene工作会比较困难，所以Shay开始抽象Lucene代码以便java程序员可以在应用中添加搜索功能。他发布了他的第一个开源项目，叫做“Compass”。<br>后来Shay找到一份工作，这份工作处在高性能和内存数据网格的分布式环境中，因此高性能的、实时的、分布式的搜索引擎也是理所当然需要的。然后他决定重写Compass库使其成为一个独立的服务叫做<strong>Elasticsearch</strong>.<br>第一个公开版本出现在2010年2月，在那之后Elasticsearch已经成为Github上最受欢迎的项目之一，代码贡献者超过300人。一家主营Elasticsearch的公司就此成立，他们一边提供商业支持一边开发新功能，不过Elasticsearch将永远开源且对所有人可用。</p><p>Shay的妻子依旧等待着她的食谱搜索…</p><p><strong>谁在用：</strong></p><p>谁在使用：<br>1、维基百科，类似百度百科，全文检索，高亮，搜索推荐&#x2F;2(权重)<br>2、The Guardian (国外新闻网站)，类似搜狐新闻，用户行为日志(点击，浏览，收藏，评论)+社交网络数据(对某某新闻的相关看法)，数据分析，给到每篇新闻文章的作者，让他知道他的文章的公众反馈(好，坏，热门，垃圾，鄙视，崇拜)<br>3、Stack Overflow(国外的程序异常讨论论坛)，IT问题，程序的报错，提交上去，有人会跟你讨论和回答，全文检索，搜索相关问题和答案，程序报错了，就会将报错信息粘贴到里面去，搜索有没有对应的答案<br>4、 GitHub (开源代码管理)，搜索上千亿行代码<br>5、电商网站，检索商品<br>6、日志数据分析，logstash采集日志，ES进行复杂的数据分析，ELK技术，elasticsearch+logstash+kibana<br>7、商品价格监控网站，用户设定某商品的价格闻值，当低于该崗值的时候，发送通知消息给用户，比如说订阅牙膏的监控，如果高露洁牙膏的家庭套装低于50块钱，就通知我，我就去买<br>10.0%<br>8、BI系统，商业智能，Business Intelligence。比如说有个大型商场集团，B1，分析一下某某区域最近3年的用户消费金额的趋势以及用户群体的组成构成，产出相关的数张报表，**区，最近3年，每年消费金额呈现100%的增长，而且用户群体85%是高级白领，开一个新商场。ES执行数据分析和挖掘，Kibana进行数据可视化</p><p>9、国内：站内搜索(电商，招聘，门户，等等)，IT系统搜索(OA，CRM，ERP，等等)，数据分析(ES热门<br>的一个使用场景)</p><blockquote><p>说明ElasticSearch还是非常重要的！</p></blockquote><h2 id="架构选择"><a href="#架构选择" class="headerlink" title="架构选择"></a>架构选择</h2><p>什么时候选 es?</p><p>什么时候选 solr?</p><p>什么时候选 luence?</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>这里介绍的是Windows版的安装</p></blockquote><h3 id="1-安装ES"><a href="#1-安装ES" class="headerlink" title="1 安装ES"></a>1 安装ES</h3><p>需要安装JDK1.8或以上版本</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/223128-12019.png" alt="image-20201210232953551"></p><p>解压</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/223756-984547.png" alt="img"></p><ul><li>bin 启动文件</li><li>config 配置文件</li><li>log4j2 口志配置文件</li><li>java虚拟机相关的配置</li><li>jvm.options</li><li>libelasticsearch.yml elasticsearch 的配置文件！ 默认 9200端口！跨域！</li><li>logs 相关jar包</li><li>日志！</li><li>modules 功能模块</li><li>plugins 插件！</li></ul><p>es是比较占内存的，假如怕内存不足的，开源修改这个文件：<code>elasticsearch-7.10.1\config\jvm.options</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Xms represents the initial size of total heap space</span></span><br><span class="line"><span class="comment"># Xmx represents the maximum size of total heap space</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 原来都是 -Xms1g 我怕电脑扛不住  就改成了 256 和 512</span></span><br><span class="line">-Xms256m</span><br><span class="line">-Xmx512m</span><br></pre></td></tr></table></figure><p>然后在 <code>elasticsearch-7.10.1\config\elasticsearch.yml</code> 文件底下增加两句话，解决跨域问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#注意 ‘:’后面是有空格的，需要符合yml的格式</span></span><br><span class="line">http.cors.enabled: <span class="literal">true</span></span><br><span class="line">http.cors.allow-origin: <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><p>访问 ：<a href="http://localhost:9200/">http://localhost:9200/</a> 结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;DESKTOP-xxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;cluster_name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;elasticsearch&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;cluster_uuid&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;nQIXkur2RMWFjO1_mLNMHQ&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;number&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;7.10.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build_flavor&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;default&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;zip&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build_hash&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1c34507e66d7db1211f66f3513706fdf548736aa&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build_date&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;2020-12-05T01:00:33.671820Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build_snapshot&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lucene_version&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;8.7.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;minimum_wire_compatibility_version&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;6.8.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;minimum_index_compatibility_version&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;6.0.0-beta1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tagline&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;You Know, for Search&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-安装-ES-head"><a href="#2-安装-ES-head" class="headerlink" title="2  安装 ES head"></a>2  安装 ES head</h3><p>Github下载：<a href="https://github.com/mobz/elasticsearch-head">https://github.com/mobz/elasticsearch-head</a></p><p>解压</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/223136-222638.png" alt="image-20201211000129666"></p><p>运行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm run start</span><br></pre></td></tr></table></figure><p>访问 ：<a href="http://localhost:9100/">http://localhost:9100/</a> 结果如下：</p><p><img src="https://hopestation.top/upload/2020/12/es01-0701069118cd45348b3b99c2d0c36caf.png" alt="es01"></p><p>如果在控制台出现，就是由于上面es的跨域配置没有配，或者没有重启</p><p><img src="https://hopestation.top/upload/2020/12/es02-29eb2d9444fb44edb9caa7df57ff478b.png" alt="es02"></p><h3 id="3-创建索引"><a href="#3-创建索引" class="headerlink" title="3 创建索引"></a>3 创建索引</h3><p>随便写一个索引名称，我写的是<code>hopestation</code></p><p><img src="https://hopestation.top/upload/2020/12/es03-3e51e0642f02409d9bdaf448c86f9c06.png" alt="es03"></p><p>暂时把索引当成一个数据库，创界成功后显示</p><p><img src="https://hopestation.top/upload/2020/12/es04-1ebe6d62ba274fb4bfff143ca9632c73.png" alt="es04"></p><p>建议只把head当做一个数据展示工具！后面的查询在 Kibana里做</p><h2 id="ELK"><a href="#ELK" class="headerlink" title="ELK"></a>ELK</h2><p>不太理解 先占坑</p><h2 id="Kibana安装"><a href="#Kibana安装" class="headerlink" title="Kibana安装"></a>Kibana安装</h2><p>下载地址：<a href="https://www.elastic.co/cn/downloads/kibana">https://www.elastic.co/cn/downloads/kibana</a></p><p>解压后的目录</p><p><img src="https://hopestation.top/upload/2020/12/kibana01-518e3c2d296148a0b35a4ca7d1da86d4.png" alt="kibana01"></p><p>运行 <code>kibana-7.10.1-windows-x86_64\bin\kibana.bat</code></p><p>访问：<a href="http://localhost:5601/">http://localhost:5601</a></p><p>默认是英文界面，我用谷歌翻译了一下</p><p><img src="https://hopestation.top/upload/2020/12/es05-04b34807d02e4f5a89f289fb10d66def.png" alt="es05"></p><p>测试工具有：</p><p>postman、curl、head、谷歌浏览器插件，但还是推荐Kibana</p><p>来输入命令测试一下：</p><p>接着上面那个图，点击 <strong>独自探索</strong>，然后选择 <strong>DevTool</strong></p><p><img src="https://hopestation.top/upload/2020/12/kibanda02-0b427135911f498185c2f57d3cfd6fd9.png" alt="kibanda02"></p><p>输入命令，运行</p><p><img src="https://hopestation.top/upload/2020/12/kibanda03-63ef92543f64479286cf441a7851cd04.png" alt="kibanda03"></p><h4 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h4><p>修改 <code>kibana-7.10.1-windows-x86_64\config\kibana.yml</code> 最下面一段话 配置语言</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Specifies locale to be used for all localizable strings, dates and number formats.</span></span><br><span class="line"><span class="comment"># Supported languages are the following: English - en , by default , Chinese - zh-CN .</span></span><br><span class="line"><span class="comment">#i18n.locale: &quot;en&quot;</span></span><br><span class="line">i18n.locale: <span class="string">&quot;zh-CN&quot;</span></span><br></pre></td></tr></table></figure><p>在运行了的程序后，我们再通过head来查看一下，es的情况</p><p>也就是说ES默认就是集群，而集群名称就是 elasticsearch</p><p><img src="https://hopestation.top/upload/2020/12/es06-3f493f2266d746818ff19192b36f2774.png" alt="es06"></p><p>集群名称</p><p><img src="https://hopestation.top/upload/2020/12/es07-1f9d7ddea8964072b1909eb8db7d579e.png" alt="es07"></p><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><p>ES是面向文档的，同时一切都是 JSON 格式</p><table><thead><tr><th>DB</th><th>ES</th></tr></thead><tbody><tr><td>数据库（database）</td><td>索引(indexs)</td></tr><tr><td>表(tables)</td><td>types (慢慢会被弃用，可能8.0开始)</td></tr><tr><td>rows</td><td>documents</td></tr><tr><td>columns</td><td>fileds</td></tr></tbody></table><p><strong>在es中</strong>：</p><p>es（集群）中可以包含多个索引（数据库），每个索引可以包含多个类型（表），每个类型下又包含多个 文档（行），每个文档中又包含多个字段（列）</p><p><strong>1 物理设计：</strong></p><p>es在后台把每个索引划分成多个分片，每个分片可以在集群汇总</p><p><strong>2 逻辑设计</strong>：<br>一个索引类型中，包含多个文档，比如说文档1，文档2。当我们索引一篇文档时，可以通过这样的一各顺序找到它：索引 -&gt; 类型 -&gt; 文档ID，通过这个组合我们就能索引到某个具体的文档。注意：ID不必是整数，实际上它是个字符串。</p><p><strong>3 文档</strong><br>之前说elasticsearch是面向文档的，那么就意味着索引和搜索数据的最小单位是文档，elasticsearch中，文档有几个 重要属性：</p><ul><li>自我包含，一篇文档同时包含字段和对应的值，也就是同时包含key:value！</li><li>可以是层次型的，一个文档中包含自文档，复杂的逻辑实体就是这么来的！(就是一个JSON对象，fastjson可以自动转换)</li><li>灵活的结构，文档不依赖预先定义的模式，我们知道关系型数据库中，要提前定义字段才能使用，在elasticsearch中，对于字段是非常灵活的，有时候，我们可以忽略该字段，或者动态的添加一个新的字段。</li></ul><p>尽管我们可以随意的新增或者忽略某个字段，但是，每个字段的类型非常重要，比如一个年龄字段类型，可以是字符 串也可以是整形。因为elasticsearch会保存字段和类型之间的映射及其他的设置。这种映射具体到每个映射的每种类型，这也是为什么在elasticsearch中，类型有时候也称为映射类型。</p><p><strong>4 类型</strong></p><p>类型是文档的逻辑容器，就像关系型数据库一样，表格是行的容器。 类型中对于字段的定义称为映射，比如 name 映 射为字符串类型。 我们说文档是无模式的，它们不需要拥有映射中所定义的所有字段，比如新增一个字段，那么elasticsearch是怎么做的呢？elasticsearch会自动的将新字段加入映射，但是这个字段的不确定它是什么类型，elasticsearch就开始猜，如果这个值是18，那么elasticsearch会认为它是整形。但是elasticsearch也可能猜不对，所以最安全的方式就是提前定义好所需要的映射，这点跟关系型数据库殊途同归了，先定义好字段，然后再使用，别整什么幺蛾子。</p><p><strong>5 索引</strong> </p><p>索引是映射类型的容器，elasticsearch中的索引是一个非常大的文档集合。索引存储了映射类型的字段和其他设置。然后它们被存储到了各个分片上了。我们来研究下分片是如何工作的。<br>物理设计：节点和分片如何工作<br>一个集群至少有一个节点，而一个节点就是一个elasricsearch进程，节点可以有多个索引默认的，如果你创建索引，那么索引将会有个5个分片(primary shard,又称主分片)构成的，每一个主分片会有一个副本(replica shard，又称复制分片)</p><h2 id="IK分词器安装"><a href="#IK分词器安装" class="headerlink" title="IK分词器安装"></a>IK分词器安装</h2><p>分词：即把一段中文或者别的划分成<strong>一个个的关键字</strong></p><p>也是windows的安装</p><p><a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a></p><p>1 下载后解压，然后使用进入解压目录执行，maven打包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -DskipTests</span><br></pre></td></tr></table></figure><p>2 进入target—&gt;release：是一个压缩包，然后解压</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/223145-168311.png" alt="image-20210118235641685"></p><p>3 放入插件目录</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/223146-904483.png" alt="image-20210118235908488"></p><p>接下来需要重启ES</p><p>要保证IK分词器，和ES的版本支持，不然会出现ES闪退，无法打开的情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#版本不支持 异常</span></span><br><span class="line">java.lang.IllegalArgumentException: Plugin [analysis-ik] was built <span class="keyword">for</span> Elasticsearch version 7.10.0 but version 7.10.1 is running</span><br><span class="line">        at org.elasticsearch.plugins.PluginsService.verifyCompatibility(PluginsService.java:352)</span><br><span class="line">        at org.elasticsearch.plugins.PluginsService.loadBundle(PluginsService.java:622)</span><br><span class="line">        at org.elasticsearch.plugins.PluginsService.loadBundles(PluginsService.java:479)</span><br><span class="line">        at org.elasticsearch.plugins.PluginsService.&lt;init&gt;(PluginsService.java:168)</span><br><span class="line">        at org.elasticsearch.node.Node.&lt;init&gt;(Node.java:346)</span><br><span class="line">        at org.elasticsearch.node.Node.&lt;init&gt;(Node.java:289)</span><br><span class="line">        at org.elasticsearch.bootstrap.Bootstrap<span class="variable">$5</span>.&lt;init&gt;(Bootstrap.java:227)</span><br><span class="line">        at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:227)</span><br><span class="line">        at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:393)</span><br><span class="line">        at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:170)</span><br><span class="line">        at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:161)</span><br><span class="line">        at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:86)</span><br><span class="line">        at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:127)</span><br><span class="line">        at org.elasticsearch.cli.Command.main(Command.java:90)</span><br><span class="line">        at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:126)</span><br><span class="line">        at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:92)</span><br><span class="line">For complete error details, refer to the <span class="built_in">log</span> at F:\CodeSoft\elasticsearch\elasticsearch-7.10.1\logs\elasticsearch.log</span><br></pre></td></tr></table></figure><p>没关系修改一下，这个就好了：<code>elasticsearch-7.10.1\plugins\ik\plugin-descriptor.properties</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &#x27;elasticsearch.version&#x27; version of elasticsearch compiled against</span></span><br><span class="line"><span class="comment"># You will have to release a new version of the plugin for each new</span></span><br><span class="line"><span class="comment"># elasticsearch release. This version is checked when the plugin</span></span><br><span class="line"><span class="comment"># is loaded so Elasticsearch will refuse to start in the presence of</span></span><br><span class="line"><span class="comment"># plugins with the incorrect elasticsearch.version.</span></span><br><span class="line"><span class="comment">#修改成你的 es 版本</span></span><br><span class="line">elasticsearch.version=7.10.0</span><br></pre></td></tr></table></figure><p>使用插件命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xxx\elasticsearch-<span class="number">7</span>.<span class="number">10</span>.<span class="number">1</span>\bin&gt;elasticsearch-plugin list</span><br><span class="line">future versions of Elasticsearch will require Java <span class="number">11</span>; your Java version from [C:\Program Files\Java\jdk1.<span class="number">8</span>.<span class="number">0</span>_221\jre] does <span class="keyword">not</span> meet this requirement</span><br><span class="line">ik</span><br><span class="line"><span class="function">WARNING: <span class="title">plugin</span> [<span class="title">analysis</span>-<span class="title">ik</span>] <span class="title">was</span> <span class="title">built</span> <span class="title">for</span> <span class="title">Elasticsearch</span> <span class="title">version</span> 7.4.0 <span class="title">but</span> <span class="title">version</span> 7.10.1 <span class="title">is</span> <span class="title">required</span></span></span><br></pre></td></tr></table></figure><h3 id="使用IK"><a href="#使用IK" class="headerlink" title="使用IK"></a>使用IK</h3><p>1 启动es</p><p>2 启动kibana</p><p><strong>分词</strong>：即把一段中文或者别的划分成<strong>一个个的关键字</strong>,我们在搜索时候会把自己的信息进行分词，会把数据库中或者索引库中的数据进行分词，然后进行一个匹配操作，默认的中文分词是将每个字看成一个词，比如“我爱中国”会被分为”我”，“爱”，“中”，“过” ,这显然是不符合要求的，所以我们需要安装中文分词器ik来解决这个问题。</p><p>IK提供了两个分词算法: <code>ik_ smart</code>和<code>ik_ max_ word</code> ，</p><p>其中</p><ul><li><code>ik_ smart</code>为最少切分</li><li>ik_ max_ word&#96;为最细粒度划分!（穷尽词库的所有可能）</li></ul><p>下面来使用kibana进行请求，感受一下结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span>,</span><br><span class="line">  <span class="string">&quot;text&quot;</span>: <span class="string">&quot;我爱吃汉堡包&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span>,</span><br><span class="line">  <span class="string">&quot;text&quot;</span>: <span class="string">&quot;中国共产党&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span>,</span><br><span class="line">  <span class="string">&quot;text&quot;</span>: <span class="string">&quot;我爱吃汉堡包&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span>,</span><br><span class="line">  <span class="string">&quot;text&quot;</span>: <span class="string">&quot;中国共产党&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后一条一条的执行。自行查看结果，如下：</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/223148-138123.png" alt="image-20210119224517800"></p><p>但有时候我们的单词，并没有再词库了。会被拆分，那如何添加自己的词库呢？</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/223151-418354.png" alt="image-20210119225138371"></p><p>首先ES的插件配置文件中增加配置：elasticsearch-7.10.1\plugins\ik\config\IKAnalyzer.cfg.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">properties</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 : 配置我自己的字典取名叫hope.dic --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span>hope.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_stopwords&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后新建一个文件 elasticsearch-7.10.1\plugins\ik\config\hope.dic</p><p>内容就是你的单词，咱们先只加一个试一试</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">狂神说</span><br></pre></td></tr></table></figure><p>然后重启，再次执行请求。就好了，so easy, too happy</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/24/223155-844001.png" alt="image-20210119225904657"></p><p>就记录到这里了。</p><p>发现这篇博客总结的比我好一些 - -！</p><blockquote><p>推荐一下吧：<a href="https://blog.csdn.net/qq_40087648/article/details/110664047?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-7&spm=1001.2101.3001.4242">https://blog.csdn.net/qq_40087648/article/details/110664047?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-7&amp;spm=1001.2101.3001.4242</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora自动上传图片</title>
      <link href="/2021/01/23/Typora%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87-typora%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"/>
      <url>/2021/01/23/Typora%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87-typora%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Typora是我们比较熟悉的编辑器了，但是默认图片是保存在本地的。<br>当我们复制文件到其他电脑上时，就发现图片都不见了。<br>那如何把我们的图片自动上传到云端呢？</p></blockquote><p>我使用的是这个开源项目：<a href="https://github.com/Thobian/typora-plugins-win-img">https://github.com/Thobian/typora-plugins-win-img</a></p><p>它支持</p><ul><li>自建的服务器</li><li>腾讯云的COS</li><li>阿里云OSS·</li><li>七牛云</li><li>github 默认上传到github</li><li>gitee码云</li></ul><hr><h3 id="安装教程环境说明："><a href="#安装教程环境说明：" class="headerlink" title="安装教程环境说明："></a><strong>安装教程环境说明：</strong></h3><ul><li>typora版本：0.9.68 (Windows x86) （<a href="https://typora.io/windows/typora-update-ia32-0320.exe">去下载</a>）</li><li>typora默认安装目录：<code>C:\Program Files (x86)\Typora</code> ，可以安装在其他目录</li></ul><h3 id="如何安装？"><a href="#如何安装？" class="headerlink" title="如何安装？"></a>如何安装？</h3><p>首先下载刚刚的开源项目，解压</p><p><strong>然后只需三步</strong></p><ul><li>粘贴<code>plugins</code>文件</li><li>修改你原来的<code>window.html</code>文件</li><li>修改<code>plugins</code>中的<code>upload.js</code>文件</li></ul><p>一步一步来：</p><p>1 先把<code>plugins</code>文件复制到你的安装目录里的<code>Typora\resources\app</code></p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/23/003256-842782.png" alt="image-20210123003225181"></p><p>2 修改<strong>你自己的</strong><code>window.html</code>【注意不是替换，相当于下载的压缩包里的<code>window.html</code>没啥用..】</p><p>打开，然后搜索</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./app/window/frame.js&quot;</span> <span class="attr">defer</span>=<span class="string">&quot;defer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在后面加上这一句话就好了【目的是为了引入upload.js文件】</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./plugins/image/upload.js&quot;</span> <span class="attr">defer</span>=<span class="string">&quot;defer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3 修改<code>upload.js</code>文件 【按照说明填写就好了】</p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/23/004528-822676.png" alt="image-20210123004528592"></p><p>根据你的需求填写<code>target</code></p><p><img src="https://gitee.com/hopestation/typora/raw/master/images/202101/23/005027-266670.png" alt="image-20210123005026542"></p><p>然后修改下面的JS就好了！【我是用的码云，你们根据需求修改对应的js】</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ！！！注意当图片大于1M时， gitee 必须登录后才能查看！！！</span></span><br><span class="line">$.image.<span class="title function_">init</span>(&#123;</span><br><span class="line">    <span class="attr">target</span>:<span class="string">&#x27;gitee&#x27;</span>,</span><br><span class="line">    <span class="attr">gitee</span>: &#123;</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&quot;From:https://github.com/Thobian&quot;</span>,     <span class="comment">// 必须参数,提交消息（默认为：add image）</span></span><br><span class="line">            <span class="attr">branch</span>: <span class="string">&quot;master&quot;</span>,                               <span class="comment">// 要提交到的分支（默认为：master）</span></span><br><span class="line">            <span class="attr">token</span>: <span class="string">&#x27;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#x27;</span>,   <span class="comment">// 码云token申请地址 https://gitee.com/profile/personal_access_tokens</span></span><br><span class="line">            <span class="attr">userName</span>: <span class="string">&#x27;userName&#x27;</span>,                           <span class="comment">// 用户名 比如你的gitee个人主页地址是：https://gitee.com/thobian ，那userName就是：thobian</span></span><br><span class="line">            <span class="attr">repositorie</span>: <span class="string">&#x27;repositorie&#x27;</span>,                     <span class="comment">// 仓库名 比如你的gitee图片仓库地址是：https://gitee.com/thobian/typora，那么repositorie就是 typora</span></span><br><span class="line">            <span class="title class_">Folder</span>: <span class="string">&#x27;image&#x27;</span>,                                <span class="comment">// 可以把上传的图片都放到这个指定的文件夹下</span></span><br><span class="line">            <span class="title class_">BucketDomain</span>: <span class="string">&#x27;https://gitee.com/api/v5/repos/&#x27;</span>,<span class="comment">// 这个是不用变的，直接copy就好</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>比如Gitee，你可以专门建一个仓库来保存图片，注意仓库需要是<strong>公开</strong>的</p><p>假如仓库是私密的，会出现typora上传成功，但是无法查看的情况。</p></blockquote><p>最后重启Typora，粘贴一个图片试试，搞定！</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis补充（内存淘汰策略）</title>
      <link href="/2021/01/14/Redis%E8%A1%A5%E5%85%85%EF%BC%88%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5%EF%BC%89-redis%E8%A1%A5%E5%85%85%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5/"/>
      <url>/2021/01/14/Redis%E8%A1%A5%E5%85%85%EF%BC%88%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5%EF%BC%89-redis%E8%A1%A5%E5%85%85%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<p>redis淘汰策略<br>这里面其实就只是分了两种：</p><ol><li>包含过期的key</li><li>所有的key</li></ol><p>每种key都有这么几种策略：<br>lru：最近最少使用原则<br>lfu：使用频率最低原则<br>ttl：如果设置过期时间，则从已经过期的时间中挑选要过期的<br>random：随机淘汰已经过期的<br>（1）volatile-lru：从已设置过期时间的数据集中挑选最近最少使用的数据淘汰。<br>（2）volatile-ttl：从已设置过期时间的数据集中挑选将要过期的数据淘汰。<br>（3）volatile-random：从已设置过期时间的数据集中任意选择数据淘汰。<br>（4）volatile-lfu：从已设置过期时间的数据集挑选使用频率最低的数据淘汰。<br>（5）allkeys-lru：从数据集中挑选最近最少使用的数据淘汰<br>（6）allkeys-lfu：从数据集中挑选使用频率最低的数据淘汰。<br>（7）allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰<br>（8） no-enviction（驱逐）：禁止驱逐数据，这也是默认策略。意思是当内存不足以容纳新入数据时，新写入操作就会报错，请求可以继续进行，线上任务也不能持续进行，采用no-enviction策略可以保证数据不被丢失。</p><p>这八种大体上可以分为4中，lru、lfu、random、ttl</p><p>这也是再配置文件里进行配置的，redis.conf相应内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MAXMEMORY POLICY: how Redis will select what to remove when maxmemory</span></span><br><span class="line"><span class="comment"># is reached. You can select one from the following behaviors:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># volatile-lru -&gt; Evict using approximated LRU, only keys with an expire set.</span></span><br><span class="line"><span class="comment"># allkeys-lru -&gt; Evict any key using approximated LRU.</span></span><br><span class="line"><span class="comment"># volatile-lfu -&gt; Evict using approximated LFU, only keys with an expire set.</span></span><br><span class="line"><span class="comment"># allkeys-lfu -&gt; Evict any key using approximated LFU.</span></span><br><span class="line"><span class="comment"># volatile-random -&gt; Remove a random key having an expire set.</span></span><br><span class="line"><span class="comment"># allkeys-random -&gt; Remove a random key, any key.</span></span><br><span class="line"><span class="comment"># volatile-ttl -&gt; Remove the key with the nearest expire time (minor TTL)</span></span><br><span class="line"><span class="comment"># noeviction -&gt; Don&#x27;t evict anything, just return an error on write operations.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># LRU means Least Recently Used</span></span><br><span class="line"><span class="comment"># LFU means Least Frequently Used</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Both LRU, LFU and volatile-ttl are implemented using approximated</span></span><br><span class="line"><span class="comment"># randomized algorithms.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note: with any of the above policies, Redis will return an error on write</span></span><br><span class="line"><span class="comment">#       operations, when there are no suitable keys for eviction.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#       At the date of writing these commands are: set setnx setex append</span></span><br><span class="line"><span class="comment">#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd</span></span><br><span class="line"><span class="comment">#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby</span></span><br><span class="line"><span class="comment">#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby</span></span><br><span class="line"><span class="comment">#       getset mset msetnx exec sort</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The default is:</span></span><br><span class="line"><span class="comment">#禁止驱逐数据，默认策略</span></span><br><span class="line"><span class="comment"># maxmemory-policy noeviction</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis系列目录</title>
      <link href="/2021/01/14/Redis%E7%B3%BB%E5%88%97%E7%9B%AE%E5%BD%95-redis%E7%B3%BB%E5%88%97%E7%9B%AE%E5%BD%95/"/>
      <url>/2021/01/14/Redis%E7%B3%BB%E5%88%97%E7%9B%AE%E5%BD%95-redis%E7%B3%BB%E5%88%97%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="Redis（一）概念和安装"><a href="#Redis（一）概念和安装" class="headerlink" title="Redis（一）概念和安装"></a><span style="    font-size: inherit;  line-height: inherit;display: inline-block;  font-weight: normal; background: rgb(128, 128, 128); color: rgb(255, 255, 255);  padding: 3px 10px 1px;border-top-right-radius: 3px;   border-top-left-radius: 3px;  margin-right: 3px;" >Redis（一）概念和安装</span></h2><div style="height:3px;background:rgb(128, 128, 128);margin-top:-25px;padding-bottom:3px"></div><div style="margin-bottom:10px"></div><p>此篇<a href="http://hopestation.top/archives/redis1">文章</a>主要介绍了：</p><ul><li>什么是Redis，为什么要使用Redis</li><li>Windows系统和Linux系统下的Redis的安装</li><li>性能测试</li></ul><h2 id="Redis（二）操作、数据类型"><a href="#Redis（二）操作、数据类型" class="headerlink" title="Redis（二）操作、数据类型"></a><span style="    font-size: inherit;  line-height: inherit;display: inline-block;  font-weight: normal; background: rgb(128, 128, 128); color: rgb(255, 255, 255);  padding: 3px 10px 1px;border-top-right-radius: 3px;   border-top-left-radius: 3px;  margin-right: 3px;" >Redis（二）操作、数据类型</span></h2><div style="height:3px;background:rgb(128, 128, 128);margin-top:-25px;padding-bottom:3px"></div><div style="margin-bottom:10px"></div><p>此篇<a href="http://hopestation.top/archives/redis2">文章</a>主要介绍了：</p><ul><li>Redis是单线程的</li><li>常用数据类型的详细介绍</li></ul><h2 id="Redis（三）事务"><a href="#Redis（三）事务" class="headerlink" title="Redis（三）事务"></a><span style="    font-size: inherit;  line-height: inherit;display: inline-block;  font-weight: normal; background: rgb(128, 128, 128); color: rgb(255, 255, 255);  padding: 3px 10px 1px;border-top-right-radius: 3px;   border-top-left-radius: 3px;  margin-right: 3px;" >Redis（三）事务</span></h2><div style="height:3px;background:rgb(128, 128, 128);margin-top:-25px;padding-bottom:3px"></div><div style="margin-bottom:10px"></div><p>此篇<a href="http://hopestation.top/archives/redis3">文章</a>主要介绍了：</p><ul><li>Redis事务的概念</li><li>如何实一个Redis事务</li></ul><h2 id="Redis（四）实现乐观锁"><a href="#Redis（四）实现乐观锁" class="headerlink" title="Redis（四）实现乐观锁"></a><span style="    font-size: inherit;  line-height: inherit;display: inline-block;  font-weight: normal; background: rgb(128, 128, 128); color: rgb(255, 255, 255);  padding: 3px 10px 1px;border-top-right-radius: 3px;   border-top-left-radius: 3px;  margin-right: 3px;" >Redis（四）实现乐观锁</span></h2><div style="height:3px;background:rgb(128, 128, 128);margin-top:-25px;padding-bottom:3px"></div><div style="margin-bottom:10px"></div><p>此篇<a href="http://hopestation.top/archives/redis4">文章</a>主要介绍了：</p><ul><li>为什么要用锁</li><li>什么是乐观锁、悲观锁</li><li>Redis如何实现乐观锁</li></ul><h2 id="Redis（五）Jedis"><a href="#Redis（五）Jedis" class="headerlink" title="Redis（五）Jedis"></a><span style="    font-size: inherit;  line-height: inherit;display: inline-block;  font-weight: normal; background: rgb(128, 128, 128); color: rgb(255, 255, 255);  padding: 3px 10px 1px;border-top-right-radius: 3px;   border-top-left-radius: 3px;  margin-right: 3px;" >Redis（五）Jedis</span></h2><div style="height:3px;background:rgb(128, 128, 128);margin-top:-25px;padding-bottom:3px"></div><div style="margin-bottom:10px"></div><p>此篇<a href="http://hopestation.top/archives/redis5">文章</a>主要介绍了：</p><ul><li>什么是Jedis</li><li>与Java结合使用Jedis来操作Redis数据库</li></ul><h2 id="Redis（六）SpringBoot整合"><a href="#Redis（六）SpringBoot整合" class="headerlink" title="Redis（六）SpringBoot整合"></a><span style="    font-size: inherit;  line-height: inherit;display: inline-block;  font-weight: normal; background: rgb(128, 128, 128); color: rgb(255, 255, 255);  padding: 3px 10px 1px;border-top-right-radius: 3px;   border-top-left-radius: 3px;  margin-right: 3px;" >Redis（六）SpringBoot整合</span></h2><div style="height:3px;background:rgb(128, 128, 128);margin-top:-25px;padding-bottom:3px"></div><div style="margin-bottom:10px"></div><p>此篇<a href="http://hopestation.top/archives/redis6">文章</a>主要介绍了：</p><ul><li>SpringBoot整合Redis</li><li>RestTamplate工具类</li></ul><h2 id="Redis（七）conf配置文件"><a href="#Redis（七）conf配置文件" class="headerlink" title="Redis（七）conf配置文件"></a><span style="    font-size: inherit;  line-height: inherit;display: inline-block;  font-weight: normal; background: rgb(128, 128, 128); color: rgb(255, 255, 255);  padding: 3px 10px 1px;border-top-right-radius: 3px;   border-top-left-radius: 3px;  margin-right: 3px;" >Redis（七）conf配置文件</span></h2><div style="height:3px;background:rgb(128, 128, 128);margin-top:-25px;padding-bottom:3px"></div><div style="margin-bottom:10px"></div><p>此篇<a href="http://hopestation.top/archives/redis7">文章</a>主要介绍了：</p><ul><li>Redis配置文件的参数</li></ul><h2 id="Redis（八）持久化"><a href="#Redis（八）持久化" class="headerlink" title="Redis（八）持久化"></a><span style="    font-size: inherit;  line-height: inherit;display: inline-block;  font-weight: normal; background: rgb(128, 128, 128); color: rgb(255, 255, 255);  padding: 3px 10px 1px;border-top-right-radius: 3px;   border-top-left-radius: 3px;  margin-right: 3px;" >Redis（八）持久化</span></h2><div style="height:3px;background:rgb(128, 128, 128);margin-top:-25px;padding-bottom:3px"></div><div style="margin-bottom:10px"></div><p>此篇<a href="http://hopestation.top/archives/redis8">文章</a>主要介绍了：</p><ul><li>AOF</li><li>RDB</li><li>实际操作</li></ul><h2 id="Redis（九）主从复制"><a href="#Redis（九）主从复制" class="headerlink" title="Redis（九）主从复制"></a><span style="    font-size: inherit;  line-height: inherit;display: inline-block;  font-weight: normal; background: rgb(128, 128, 128); color: rgb(255, 255, 255);  padding: 3px 10px 1px;border-top-right-radius: 3px;   border-top-left-radius: 3px;  margin-right: 3px;" >Redis（九）主从复制</span></h2><div style="height:3px;background:rgb(128, 128, 128);margin-top:-25px;padding-bottom:3px"></div><div style="margin-bottom:10px"></div><p>此篇<a href="http://hopestation.top/archives/redis9">文章</a>主要介绍了：</p><ul><li>为什么需要主从复制</li><li>概念</li><li>如何搭建主从复制</li><li>宕机后的情况</li></ul><h2 id="Redis（十）哨兵"><a href="#Redis（十）哨兵" class="headerlink" title="Redis（十）哨兵"></a><span style="    font-size: inherit;  line-height: inherit;display: inline-block;  font-weight: normal; background: rgb(128, 128, 128); color: rgb(255, 255, 255);  padding: 3px 10px 1px;border-top-right-radius: 3px;   border-top-left-radius: 3px;  margin-right: 3px;" >Redis（十）哨兵</span></h2><div style="height:3px;background:rgb(128, 128, 128);margin-top:-25px;padding-bottom:3px"></div><div style="margin-bottom:10px"></div><p>此篇<a href="http://hopestation.top/archives/redis10">文章</a>主要介绍了：</p><ul><li>哨兵是什么</li><li>如何搭建哨兵模式</li></ul><h2 id="Redis（十一）缓存雪崩等问题"><a href="#Redis（十一）缓存雪崩等问题" class="headerlink" title="Redis（十一）缓存雪崩等问题"></a><span style="    font-size: inherit;  line-height: inherit;display: inline-block;  font-weight: normal; background: rgb(128, 128, 128); color: rgb(255, 255, 255);  padding: 3px 10px 1px;border-top-right-radius: 3px;   border-top-left-radius: 3px;  margin-right: 3px;" >Redis（十一）缓存雪崩等问题</span></h2><div style="height:3px;background:rgb(128, 128, 128);margin-top:-25px;padding-bottom:3px"></div><div style="margin-bottom:10px"></div><p>此篇<a href="http://hopestation.top/archives/redis1">文章</a>主要介绍了：</p><ul><li>缓存击穿</li><li>缓存穿透</li><li>缓存雪崩</li></ul><h2 id="Redis补充"><a href="#Redis补充" class="headerlink" title="Redis补充"></a><span style="    font-size: inherit;  line-height: inherit;display: inline-block;  font-weight: normal; background: rgb(128, 128, 128); color: rgb(255, 255, 255);  padding: 3px 10px 1px;border-top-right-radius: 3px;   border-top-left-radius: 3px;  margin-right: 3px;" >Redis补充</span></h2><div style="height:3px;background:rgb(128, 128, 128);margin-top:-25px;padding-bottom:3px"></div><div style="margin-bottom:10px"></div><ul><li><a href="https://hopestation.top/archives/redis-del">内存淘汰机制</a></li><li><a href="https://hopestation.top/archives/redis-data-type">数据类型的使用场景</a></li></ul><hr><blockquote><p>Redis是自己根据B站的狂神说的视频为主线进行学习的，通过自己的理解、然后也参考了一些其他优秀的文章，最后记下笔记形成了这些文章。<br>如有描述不准确或不对的地方欢迎评论交流指出。<br>最后附上狂神说的视频链接，以表感谢：<br><a href="https://space.bilibili.com/95256449">https://space.bilibili.com/95256449</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL执行过程（转）</title>
      <link href="/2021/01/14/MYSQL%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%EF%BC%88%E8%BD%AC%EF%BC%89-mysql%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E8%BD%AC/"/>
      <url>/2021/01/14/MYSQL%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%EF%BC%88%E8%BD%AC%EF%BC%89-mysql%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文出处：<a href="https://blog.csdn.net/weixin_50666791/article/details/108475400">https://blog.csdn.net/weixin_50666791/article/details/108475400</a><br>也可以看看这篇文章：<a href="https://www.cnblogs.com/wyq178/p/11576065.html">https://www.cnblogs.com/wyq178/p/11576065.html</a></p></blockquote><p>[TOC]</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文基于MySQL5.7版本。</p><p>前面几篇MySQL系列的文章介绍了索引，事务和锁相关知识，那么今天就让我们来看看当我们执行一条select语句和一条update语句的时候,MySQL要经过哪些步骤，才能返回我们想要的数据。</p><h1 id="一条select语句的执行流程"><a href="#一条select语句的执行流程" class="headerlink" title="一条select语句的执行流程"></a>一条select语句的执行流程</h1><p>MySQL从大方向来说，可以分为 Server 层和存储引擎层。而Server层包括连接器、查询缓存、解析器、预处理器、优化器、执行器等，最后Server层再通过API接口形式调用对应的存储引擎层提供的接口。如下图所示(图片来源于《高性能MySQL》)：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wNi10dC5ieXRlaW1nLmNvbS9vcmlnaW4vcGdjLWltYWdlL2E1N2E4ZjQ5NzMxMzQ0MzBhMWUzYjBkMzM3NWMzYTIw?x-oss-process=image/format,png" alt="详解一条查询select语句和更新update语句的执行流程"></p><p>在这里插入图片描述</p><p>根据流程图，一条select查询大致经过以下六个步骤：<br>1、客户端发起一个请求时，首先会建立一个连接<br>2、服务端会检查缓存，如果命中则直接返回，否则继续之后后面步骤<br>3、服务器端根据收到的sql语句进行解析，然后对其进行词法分析，语法分析以及预处理<br>4、由优化器生成执行计划<br>5、调用存储引擎层API来执行查询<br>6、返回查询到的结果</p><p>查询流程也可以通过如下图表示(图片来源于丁奇MySQL45将)：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wMy10dC5ieXRlaW1nLmNvbS9vcmlnaW4vcGdjLWltYWdlL2IxZWUwZWViZmI5ODQ2OWY4OGRiMmU5NWZjZGRlYzA5?x-oss-process=image/format,png" alt="详解一条查询select语句和更新update语句的执行流程"></p><p>在这里插入图片描述</p><h1 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h1><p>第一步建立连接，这个很容易理解，需要特别指出的是MySQL服务端和客户端的通信方式采用的是<strong>半双工协议</strong>。</p><p>通信方式主要可以分为三种：单工，半双工，全双工，如下图：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wNi10dC5ieXRlaW1nLmNvbS9vcmlnaW4vcGdjLWltYWdlL2Q3N2U1ODRmZDAzMjRhOWI5NzNkZWQxMWQ4MDE5ZGRm?x-oss-process=image/format,png" alt="详解一条查询select语句和更新update语句的执行流程"></p><p>在这里插入图片描述</p><ul><li>单工：通信的时候，数据只能单向传输。比如说遥控器，我们只能用遥控器来控制电视机，而不能用电视机来控制遥控器。</li><li>半双工：通信的时候，数据可以双向传输，但是同一时间只能有一台服务器在发送数据，当A给B发送数据的时候，那么B就不能给A发送数据，必须等到A发送结束之后，B才能给A发送数据。比如说对讲机。</li><li>全双工：通信的时候，数据可以双向传输，并且可以同时传输。比如说我们打电话或者用通信软件进行语音和视频通话等。</li></ul><p>半双工协议让MySQL通信简单快速，但是也在一定程度上限制了MySQL的性能，因为一旦从一端开始发送数据，另一端必须要接收完全部数据才能做出响应。所以说我们批量插入的时候尽量拆分成多次插入而不要一次插入太大数据，同样的查询语句最好也带上limit限制条数，避免一次返回过多数据。</p><p>MySQL单次传输数据包的大小可以通过参数max_allowed_packet控制,默认大小为4MB</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &#x27;max_allowed_packet&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wMS10dC5ieXRlaW1nLmNvbS9vcmlnaW4vcGdjLWltYWdlLzhmM2QxOTUyZTA2YzRjODlhNzM5ZjkwN2ZhZTNiNTQy?x-oss-process=image/format,png" alt="详解一条查询select语句和更新update语句的执行流程"></p><p>在这里插入图片描述</p><h1 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h1><p>连接上了之后，如果缓存是打开的，那么就会进入查询缓存阶段，可以通过如下命令查看缓存是否开启：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &#x27;query_cache_type&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wMS10dC5ieXRlaW1nLmNvbS9vcmlnaW4vcGdjLWltYWdlL2EyZjkzNzcwMTYxMDRmMDU5MTkxMzY2ODYwYzBmN2Zj?x-oss-process=image/format,png" alt="详解一条查询select语句和更新update语句的执行流程"></p><p>在这里插入图片描述</p><p>我们可以看到，缓存默认是关闭的。这是因为MySQL的缓存使用条件非常苛刻，是通过一个大小写敏感的哈希值去匹配的，这样就是说一条查询语句哪怕只是有一个空格不一致，都会导致无法使用缓存。而且一旦表里面有一行数据变动了，那么关于这种表的所有缓存都会失效。所以一般我们都是不建议使用缓存，MySQL最新的8.0版本已经将缓存模块去掉了。</p><h1 id="解析器和预处理器"><a href="#解析器和预处理器" class="headerlink" title="解析器和预处理器"></a>解析器和预处理器</h1><p>跳过了缓存模块之后，查询语句会进入解析器进行解析。</p><h1 id="词法解析和语法解析-Parser"><a href="#词法解析和语法解析-Parser" class="headerlink" title="词法解析和语法解析(Parser)"></a>词法解析和语法解析(Parser)</h1><p>这一步主要的工作就是检查sql语句的语法对不对，在这里，首先会把我们整个SQL语句打碎，比如：select name from test where id&#x3D;1，就会被打散成select，name，from，test，where，id，&#x3D;，1 这8个字符，并且能识别出关键字和非关键字，然后根据sql语句生成一个数据结构，也叫做解析树(select_lex)，如下图：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wNi10dC5ieXRlaW1nLmNvbS9vcmlnaW4vcGdjLWltYWdlL2E5ODdmNzlhYTQ4NjQzNGFhZTlhNTU4YTViZTRmMDhk?x-oss-process=image/format,png" alt="详解一条查询select语句和更新update语句的执行流程"></p><p>在这里插入图片描述</p><h1 id="预处理器-Preprocessor"><a href="#预处理器-Preprocessor" class="headerlink" title="预处理器(Preprocessor)"></a>预处理器(Preprocessor)</h1><p>经过了前面的词法和语法解析，那么至少我们一条sql语句的语法格式是满足要求了，接下来我们还需要做什么呢？自然是检查表名，列名以及其他一些信息等是不是真实存在的，<strong>预处理就是做一个表名和字段名等相关信息合法性的检测</strong>。</p><h1 id="查询优化器-Query-Optimizer"><a href="#查询优化器-Query-Optimizer" class="headerlink" title="查询优化器(Query Optimizer)"></a>查询优化器(Query Optimizer)</h1><p>经过上面的步骤，到这里就得到了一句有效的sql语句了。而对一个查询语句，尤其是复杂的多表查询语句，我们可以有很多种执行方式，每种执行方式的效率也不一样，所以这时候就需要查询优化器去选择一种它认为最高效的执行方式。</p><p>查询优化器的目的就是根据解析树生成不同的执行计划（Execution Plan），然后选择一种最优的执行计划，MySQL 里面使用的是基于开销（cost）的优化器，哪种执行计划开销最小，就选择哪种。</p><p>我们可以通过变量Last_query_cost来查询开销：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show status like &#x27;Last_query_cost&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wNi10dC5ieXRlaW1nLmNvbS9vcmlnaW4vcGdjLWltYWdlL2E5MWQ2N2Y0NzdkMTRkOWJhMjY3NmFlMTM2ZTFjNGMz?x-oss-process=image/format,png" alt="详解一条查询select语句和更新update语句的执行流程"></p><p>在这里插入图片描述</p><p>上图中展示的结果就表示MySQL认为SELECT * FROM test 查询语句需要做至少2个数据页的随机查找才能完成上面的查询。<br>这个结果是通过一系列复杂的运算得到的，包括每个表或者索引的页面个数，索引的基数，索引和数据行的长度，索引分布的情况。</p><p>优化器在评估成本的时候，不会考虑任何缓存的作用，而是假设读取任何数据都需要经过一次IO操作。</p><h1 id="优化器可以做哪些优化"><a href="#优化器可以做哪些优化" class="headerlink" title="优化器可以做哪些优化"></a>优化器可以做哪些优化</h1><p>优化器可以替我们做很多优化，下面列举一些常用的优化：</p><ul><li>重新定义关联的顺序。优化器并不一定按照我们写的查询关联语句中的关联顺序，而是会按照优化后的顺序进行查询。</li><li>将外连接转为为内连接。</li><li>使用等价转换原则。比如a&lt;b and a&#x3D;5会被转换为a&#x3D;5 and b&gt;5</li><li>优化COUNT(),MIN()和MAX()</li><li>预估并转化为常数表达式</li><li>覆盖索引扫描。想要详细了解覆盖索引的可以点击这里。</li><li>的查询优化。</li><li>提前终止查询。比如我们使用了一个不成立的条件，则会立刻返回空。</li><li>等值传播。</li><li>优化IN()语句。在其他很多数据库中in等同于or语句，但是MySQL中会讲in中的值先进行排序，然后按照二分查找的方法来确定是否满足条件。</li></ul><p>实际当中优化器能做的优化远远比上面列举的更多，所以有时候我们不要觉得比优化器更聪明，所以大部分情况下我们都可以让优化器做出优化就可以了，如果有些我们确定优化器没有选择最优的查询方案，我们也可以在查询中通过添加hint提示告知到优化器，比如通过force index强制使用索引或者straight_join语句强制优化器按我们想要的表顺序进行关联。</p><h1 id="优化器并不是万能的"><a href="#优化器并不是万能的" class="headerlink" title="优化器并不是万能的"></a>优化器并不是万能的</h1><p>MySQL优化器也并不是万能的，并不是总能把我们写的糟糕的sql语句优化成一个高效的查询语句，而且也有很多种原因会导致优化器做出错误的选择：</p><ul><li>统计信息不准确。MySQL评估成本依赖于存储引擎提供的的统计信息，然而存储引擎提供的统计信息有时候会有较大偏差。</li><li>执行计划的成本估算不等于实际的执行成本。比如估算成本的时候不考虑缓存，而实际执行有些数据在缓存中。</li><li>优化器认为的最优可能并不是我们需要的最优。比如有时候我们想要时间最短，但是优化器</li><li>优化器从不考虑其他并发的查询。</li><li>优化器并不总是基本成本的优化。有时候也会基于规则，比如当存在全文索引，查询时使用了match()子句时，即使选择其他索引更优，优化器仍然会选择全文索引。</li><li>优化器不将不受其控制的操作计算为成本。如执行存储过程或者用户自定义函数的成本。</li><li>优化器有时候无法估算所有的执行计划，所以也有可能错过最优执行计划。</li></ul><h1 id="优化器如何得到查询计划"><a href="#优化器如何得到查询计划" class="headerlink" title="优化器如何得到查询计划"></a>优化器如何得到查询计划</h1><p>优化器听起来比较抽象，给人一种看不见摸不着的感觉，但是实际上我们也可以通过参数打开优化器追踪，优化器追踪默认是关闭的，因为开启后会影响性能，所以建议是在需要定位问题的时候开启，并及时关闭。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &#x27;optimizer_trace&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">set optimizer_trace=&#x27;enabled=on&#x27;;</span><br></pre></td></tr></table></figure><p>接下来执行一句查询语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT t1.name AS name1,t2.name AS name2 FROM test t1 INNER JOIN test2 t2 ON t1.id=t2.id</span><br></pre></td></tr></table></figure><p>这时候优化器的分析过程已经被记录下来了，可以通过下面语句查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM information_schema.optimizer_trace;</span><br></pre></td></tr></table></figure><p>得到如下结果：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wNi10dC5ieXRlaW1nLmNvbS9vcmlnaW4vcGdjLWltYWdlL2Y2YzcwY2VlMDkwYTQyOWJhZTRiMjZiODE0YjBjNTFl?x-oss-process=image/format,png" alt="详解一条查询select语句和更新update语句的执行流程"></p><p>上面的图是为了看数据效果，如果需要自己操作的话，需要用shelll命令窗口去执行，sqlyog工具中直接查询出来TRACE列是空的，shell中返回的TRACE列信息如下：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wMy10dC5ieXRlaW1nLmNvbS9vcmlnaW4vcGdjLWltYWdlLzgwNzIzMDMwY2UzMTQ1Yjk5ZTM2NGRhODhjYjU5N2Iz?x-oss-process=image/format,png" alt="详解一条查询select语句和更新update语句的执行流程"></p><p>从截图中的轮廓可以看出来这是一个json数据格式。</p><p>跟踪信息主要分为以下三部分(上图并未将全部内容展示出来，感兴趣的可以自己去尝试一下，开启之后记得及时关闭哦)：</p><ul><li>准备阶段(join_preparation)：expanded_query中的查询语句就是优化后的sql</li><li>优化阶段(join_optimization)：considered_execution_plans中列出来所有的执行计划</li><li>执行阶段(join_execution)</li></ul><h1 id="存储引擎查询"><a href="#存储引擎查询" class="headerlink" title="存储引擎查询"></a>存储引擎查询</h1><p>当Server层得到了一条sql语句的执行计划后，这时候就会去调用存储引擎层对应的API，执行查询了。因为MySQL的存储引擎是插件式的，所以每种存储引擎都会对Server提供了一些对应的API调用。</p><h1 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h1><p>最后，将查询出得到的结果返回Server层，如果开启了缓存，Server层返回数据的同时还会写入缓存。</p><p>MySQL将查询结果返回是一个增量的逐步返回过程。例如：当我们处理完所有查询逻辑并开始执行查询并且生成第一条结果数据的时候，MySQL就可以开始逐步的向客户端传输数据了。这么做的好处是服务端无需存储太多结果，从而减少内存消耗(这个操作可以通过sql _buffer_result来提示优化器，和上文说的force index，straight_join一样都是人为强制优化器执行我们想要的操作)。</p><h1 id="一条update语句的执行流程"><a href="#一条update语句的执行流程" class="headerlink" title="一条update语句的执行流程"></a>一条update语句的执行流程</h1><p>一条更新语句，其实是增，删，查的综合体，查询语句需要经过的流程，更新语句全部需要执行一次，因为更新之前必须要先拿到(查询)需要更新的数据。</p><h1 id="Buffer-Pool"><a href="#Buffer-Pool" class="headerlink" title="Buffer Pool"></a>Buffer Pool</h1><p>InnnoDB的数据都是放在磁盘上的，而磁盘的速度和CPU的速度之间有难以逾越的鸿沟，为了提升效率，就引入了缓冲池技术，在InnoDB中称之为Buffer Pool。</p><p>从磁盘中读取数据的时候，会先将从磁盘中读取到的页放在缓冲池中，这样下次读相同的页的时候，就可以直接从Buffer Pool中获取。</p><p>更新数据的时候首先会看数据在不在缓冲池中，在的话就直接修改缓冲池中的数据，注意，<strong>前提是我们不需要对这条数据进行唯一性检查（因为如果要进行唯一性检查就必须加载磁盘中的数据来判断是否唯一了）</strong></p><p>如果只修改了Buffer Pool中的数据而不修改磁盘中数据，这时候就会造成内存和磁盘中数据不一致，这种也叫做脏页。InnoDB 里面有专门的后台线程把 Buffer Pool 的数据写入到磁盘， 每隔一段时间就一次性地把多个修改写入磁盘，这个动作就叫做刷脏。</p><p>那么现在有一个问题，假如我们更新都需要把数据写入数据磁盘，然后磁盘也要找到对应的那条记录，然后再更新，整个过程 IO 成本、查找成本都很高。为了解决这个问题，InnoDB就有了redo log,并且采用了Write-Ahead Logging(WAL)方案实现。</p><h1 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h1><p>redo log，即重做日志，是InnoDB引擎所特有,主要用于崩溃修复(crash-safe)。</p><h1 id="Write-Ahead-Logging（WAL）"><a href="#Write-Ahead-Logging（WAL）" class="headerlink" title="Write-Ahead Logging（WAL）"></a>Write-Ahead Logging（WAL）</h1><p>Write-Ahead Logging，即先写日志，也就是说我们执行一个操作的时候会先将操作写入日志，然后再写入数据磁盘，那么有人就会问了，写入数据表是磁盘操作，写入redo log也是磁盘操作，同样都是写入磁盘，为什么不直接写入数据，而要先写入日志呢？这不是多此一举吗？</p><p>设想一下，假如我们所需要的数据是随机分散在不同页的不同扇区中，那么我们去找数据的时候就是随机IO操作，而redo log是循环写入的，也就是顺序IO。一句话：<br><strong>刷盘是随机 I&#x2F;O，而记录日志是顺序 I&#x2F;O，顺序 I&#x2F;O 效率更高。因此先把修改写入日 志，可以延迟刷盘时机，进而提升系统吞吐</strong></p><h1 id="redo-log是如何刷盘的"><a href="#redo-log是如何刷盘的" class="headerlink" title="redo log是如何刷盘的"></a>redo log是如何刷盘的</h1><p>InnoDB中的 redo log是固定大小的，也就是说redo log并不是随着文件写入慢慢变大，而是一开始就分配好了空间，空间一旦写满了，前面的空间就会被覆盖掉，刷盘的操作是通过Checkpoint实现的。如下图：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wMy10dC5ieXRlaW1nLmNvbS9vcmlnaW4vcGdjLWltYWdlLzQ5MDYxMDQ4NGU3NTQzZGQ5OTQzZGYwM2YzMzFlMzAz?x-oss-process=image/format,png" alt="详解一条查询select语句和更新update语句的执行流程"></p><p>check point 是当前要覆盖的位置。write pos是当前写入日志的位置。写日志的时候是循环写的，覆盖旧记录前要把记录更新到数据文件。如果write pos和 check point 重叠，说明redo log 已经写满，这时候需要同步redo log刷到磁盘中。</p><h1 id="bin-log"><a href="#bin-log" class="headerlink" title="bin log"></a>bin log</h1><p>MySQL整体来看，其实就有两块：一块是 Server 层，它主要做的是 MySQL功能层面的事情；还有一块是引擎层，负责存储相关的具体事宜。上面讲的redo log是InnoDB 引擎特有的日志，而Server 层也有自己的日志，称为 binlog（归档日志），也叫做二进制日志。</p><p>可能有人会问，为什么会有两份日志呢？<br>因为最开始 MySQL 里并没有 InnoDB 引擎。MySQL 自带的引擎是 MyISAM，但是 MyISAM是不支持事物的，也没有崩溃恢复(crash-safe)的能力，binlog日志只能用于归档。那么既然InnoDB是需要支持事务的，那么就必须要有崩溃恢复(crash-safe)能力，所以就使用另外一套自己的日志系统，也就是基于redo log 来实现 crash-safe 能力。</p><h1 id="bin-log和redo-log的区别"><a href="#bin-log和redo-log的区别" class="headerlink" title="bin log和redo log的区别"></a>bin log和redo log的区别</h1><p>1、redo log 是 InnoDB 引擎特有的；binlog 是 MySQL 的Server层实现的，所有引擎都可以使用。<br>2、redo log 是物理日志，记录的是“在某个数据页上做了什么修改”；binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如“给id&#x3D;2 这一行的c字段加 1 ”。<br>3、redo log 是循环写的，空间固定会用完；binlog 是可以追加写入的。“追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</p><h1 id="update语句的执行流程"><a href="#update语句的执行流程" class="headerlink" title="update语句的执行流程"></a>update语句的执行流程</h1><p>前面铺垫了这么多，主要是想让大家先理解redo log和big log这两个概念，因为更新操作离不开这两个文件，接下来我们正式回到正题，一条update语句到底是如何执行的，可以通过下图表示：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9wNi10dC5ieXRlaW1nLmNvbS9vcmlnaW4vcGdjLWltYWdlLzdmMTZjMGUyMWFiYTRhZTc4YWIwZjViY2JmMzY2ZDdk?x-oss-process=image/format,png" alt="详解一条查询select语句和更新update语句的执行流程"></p><p>上图可以大概概括为以下几步：<br>1、先根据更新语句的条件，查询出对应的记录，如果有缓存，也会用到缓存<br>2、Server端调用InnoDB引擎API接口，InnoDB引擎将这条数据写到内存，同时写入redo log，并将redo log状态设置为prepare<br>3、通知Server层，可以正式提交数据了<br>4、Server层收到通知后立刻写入bin log，然后调用InnoD对应接口发出commit请求<br>5、InnoDB收到commit请求后将数据设置为commit状态</p><p>上面的步骤中，我们注意到，redo log会经过两次提交，这就是两阶段提交。</p><h1 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a>两阶段提交</h1><p>两阶段提交是分布式事务的设计思想，就是首先会有请求方发出请求到各个服务器，然后等其他各个服务器都准备好之后再通知请求方可以提交了，请求方收到请求后再发出指令，通知所有服务器一起提交。</p><p>而我们这里redo log是属于存储引擎层的日志，bin log是属于Server层日志，属于两个独立的日志文件，采用两阶段提交就是为了使两个日志文件逻辑上保持一致</p><h1 id="假如不采用两阶段提交法"><a href="#假如不采用两阶段提交法" class="headerlink" title="假如不采用两阶段提交法"></a>假如不采用两阶段提交法</h1><p>假如有一条语句id&#x3D;1,age&#x3D;18，我们现在要把这条数据的age更新为19：</p><ul><li>先写 redo log 后写 binlog<br>假设在redo log 写完，binlog还没有写完的时候，MySQL发生了宕机(crash)。重启后因为redo log写完了，所以会自动进行数据恢复，也就是age&#x3D;19。但是由于binlog没写完就宕机( crash)了，这时候 binlog 里面就没有记录这个语句。因此，之后备份日志的时候，存起来的 binlog 里面就没有这条语句。然后某一天假如我们把数据丢失了，需要用bin log进行数据恢复就会发现少了这一次更新。</li><li>先写binlog后写redo log<br>假如在binlog写完，redo log还没有写完的时候，MySQL发生了宕机(crash)。重启后因为redo log没写完，所以无法进行自动恢复，那么数据就还是age&#x3D;18了，然后某一天假如我们把数据丢失了，需要用binlog进行恢复又会发现恢复出来的数据age&#x3D;19了。</li></ul><p>通过以上的两个假设我们就会发现，假如不采用两阶段提交法就会出现数据不一致的情况，尤其是在有主从库的时候，因为主从复制是基于binlog实现的，如果redo log和bin log不一致，就会导致主从库数据不一致。</p><h1 id="宕机后的数据恢复规则"><a href="#宕机后的数据恢复规则" class="headerlink" title="宕机后的数据恢复规则"></a>宕机后的数据恢复规则</h1><p>1、如果 redo log 里面的事务是完整的，也就是已经有了 commit 标识，则直接提交；<br>2、如果 redo log 里面的事物只有完整的 prepare，则判断对应的事务 binlog 是否存在并完整：如果是，则提交事务；否则，回滚事务。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文主要分析了select和update语句的执行过程，而在分析update语句执行过程中，又简单介绍了redo log和bin log相关概念，这一部分内容在本文中没有过多深入的讲解，仅仅只是为了让大家去理解更新流程而做了简单的介绍，像redo log和其对应的缓存之间的关系，redo log刷盘策略，bin log写入策略，有了bin log为何还需要redo log等等问题本文中并没有给出明确的解释，因为本文篇幅有限，深入之后就会涉及到InnoDB引擎的存储结构以及更底层的一些知识</p>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis补充（数据类型以及使用场景）</title>
      <link href="/2021/01/08/Redis%E8%A1%A5%E5%85%85%EF%BC%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%89-redis%E8%A1%A5%E5%85%85%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
      <url>/2021/01/08/Redis%E8%A1%A5%E5%85%85%EF%BC%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%89-redis%E8%A1%A5%E5%85%85%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>之前对Redis写了很多文章了。其中Redis（二）介绍了数据类型和操作。</p><p>这篇文章作为补充，并且侧重于是介绍一下每一种类型的使用场景</p><p>具体操作这里就不一一列举了。可以查看或之前的博客或者去<a href="https://www.runoob.com/redis/redis-commands.html">菜鸟网</a></p></blockquote><h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><p><strong>实际中如何给Key命名？</strong></p><ul><li>以业务名(或数据库名)为前缀(防止key冲突)，用冒号分隔，比如业务名:表名:id</li><li>控制key的长度不能太长</li><li>不要包含特殊字符：换行、双引号、空格等</li></ul><p><strong>Value不能太大</strong></p><p>非字符串的bigkey，不要使用del删除，使用hscan、sscan、zscan方式渐进式删除，同时要注意防止bigkey过期时间自动删除问题(例如一个200万的zset设置1小时过期，会触发del操作，造成阻塞，Redis4.0支持了异步del）</p><p>举例（这是hash类型）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hmset user:1 name tom age 19 favor football</span><br></pre></td></tr></table></figure><p><strong>尽量均匀的设置过期时间</strong></p><p>更多参考此博客：<a href="https://zhuanlan.zhihu.com/p/92633604">https://zhuanlan.zhihu.com/p/92633604</a></p><h2 id="strings"><a href="#strings" class="headerlink" title="strings"></a>strings</h2><p>结构：简单的Key-Value形式，Value是一个字符串</p><p>场景：</p><p>String是最基本、常用的数据类型</p><ul><li>可以用来存储普通的、JSON等形式的字符串数据</li><li>假如数据正好是一个整数，那么你可以使用 <code>incr</code>命令让他进行原子自增，或<code>decr</code>原子自减【注意小数是不行的】</li></ul><p>hash</p><p>结构：Value是一个类似Map的结构</p><p>容量：Redis 中每个 hash 可以存储 232 - 1 键值对（40多亿）</p><p>场景：hash类型非常适合用来存储对象类的数据，假如在String里存储一个JSON格式的字符串来保存对象，在存入、取出时还需要来回转换。而hash更加直接快速，还可以动态的添加或删除”字段名”,更加灵活</p><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><p>结构：</p><p>Redis中list的实现是一个双向链表，并不是数据。<code>lpush rpush</code>分别对应头插入和尾部插入。</p><p>同样我们也可以选择<code>lpop rpop</code>来进行头部移出，和尾部移出。这样list的也就相当于<strong>队列</strong>或者<strong>栈</strong>了</p><p>容量：一个列表最多可以包含 232 - 1 个元素 (4294967295, 每个列表超过40亿个元素)</p><p>场景：</p><ol><li>消息队列</li></ol><p>list类型的lpop和rpush（或者反过来，lpush和rpop）能实现队列的功能，故而可以用Redis的list类型实现简单的点对点的消息队列。不过我不推荐在实战中这么使用，因为现在已经有Kafka、NSQ、RabbitMQ等成熟的消息队列了，它们的功能已经很完善了，除非是为了更深入地理解消息队列，不然我觉得没必要去重复造轮子。</p><p> 　2. 排行榜</p><p>list类型的lrange命令可以分页查看队列中的数据。可将每隔一段时间计算一次的排行榜存储在list类型中，如京东每日的手机销量排行、学校每次月考学生的成绩排名、斗鱼主播排名等</p><ol start="3"><li>最新列表</li></ol><p>　　list类型的lpush命令和lrange命令能实现最新列表的功能，每次通过lpush命令往列表里插入新的元素，然后通过lrange命令读取最新的元素列表，如朋友圈的点赞列表、评论列表。</p><p>　　但是，并不是所有的最新列表都能用list类型实现，因为对于频繁更新的列表，list类型的分页可能导致列表元素重复或漏掉，举个例子，当前列表里由表头到表尾依次有（E，D，C，B，A）五个元素，每页获取3个元素，用户第一次获取到（E，D，C）三个元素，然后表头新增了一个元素F，列表变成了（F，E，D，C，B，A），此时用户取第二页拿到（C，B，A），元素C重复了。只有不需要分页（比如每次都只取列表的前5个元素）或者更新频率低（比如每天凌晨更新一次）的列表才适合用list类型实现。对于需要分页并且会频繁更新的列表，需用使用有序集合sorted set类型实现。另外，需要通过时间范围查找的最新列表，list类型也实现不了，也需要通过有序集合sorted set类型实现，如以成交时间范围作为条件来查询的订单列表。</p><blockquote><p>为何不直接使用sorted set？</p><p>对于排行榜和最新列表两种应用场景，list类型能做到的sorted set类型都能做到，list类型做不到的sorted set类型也能做到，那为什么还要使用list类型去实现排行榜或最新列表呢，直接用sorted set类型不是更好吗？原因是sorted set类型占用的内存容量是list类型的数倍之多，对于列表数量不多的情况，可以用sorted set类型来实现，比如上文中举例的打擂金曲排行榜，每天全国只有一份，两种数据类型的内存容量差距可以忽略不计，但是如果要实现某首歌曲的翻唱作品地区排行榜，数百万的歌曲，300多个地区，会产生数量庞大的榜单，或者数量更加庞大的朋友圈点赞列表，就需要慎重地考虑容量的问题了</p></blockquote><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p>结构：</p><ul><li>是一个无序、不重复集合。若添加了一个重复的元素，则反回0（失败）</li><li>提供了多个set之间的聚合运算：如何求交集、并集、差集等</li><li>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</li></ul><p>容量：集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)</p><p>使用场景：</p><ol><li>好友&#x2F;关注&#x2F;粉丝&#x2F;感兴趣的人集合</li></ol><p>　　set类型唯一的特点使得其适合用于存储好友&#x2F;关注&#x2F;粉丝&#x2F;感兴趣的人集合，集合中的元素数量可能很多，每次全部取出来成本不小，set类型提供了一些很实用的命令用于直接操作这些集合，如</p><p>　　　a. sinter命令可以获得A和B两个用户的共同好友</p><p>　　   b. sismember命令可以判断A是否是B的好友</p><p>   　　c. scard命令可以获取好友数量</p><p>   　　d. 关注时，smove命令可以将B从A的粉丝集合转移到A的好友集合</p><p>​   f. sdiff 返回第一个集合与其他集合之间的差异。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将ABCD存入集合 set1 中</span></span><br><span class="line">127.0.0.1:6379&gt; sadd set1 A B C D</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line"><span class="comment">#将BD存入集合 set1 中</span></span><br><span class="line">127.0.0.1:6379&gt; sadd set2 B D</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment">#求set1 set2交集</span></span><br><span class="line">127.0.0.1:6379&gt; sinter set1 set2</span><br><span class="line">1) <span class="string">&quot;D&quot;</span></span><br><span class="line">2) <span class="string">&quot;B&quot;</span></span><br><span class="line"><span class="comment">#---</span></span><br><span class="line"><span class="comment">#Redis Sdiff 命令返回第一个集合与其他集合之间的差异，</span></span><br><span class="line"><span class="comment">#也可以认为说第一个集合中独有的元素。不存在的集合 key 将视为空集</span></span><br><span class="line"><span class="comment">#---</span></span><br><span class="line"><span class="comment">#求set1 与 set2的差集</span></span><br><span class="line">127.0.0.1:6379&gt; sdiff set1 set2</span><br><span class="line">1) <span class="string">&quot;A&quot;</span></span><br><span class="line">2) <span class="string">&quot;C&quot;</span></span><br><span class="line"><span class="comment">#求set2 与 set1的差集</span></span><br><span class="line">127.0.0.1:6379&gt; sdiff set2 set1</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line"><span class="comment">#判断A 是否在结合set1中</span></span><br><span class="line">127.0.0.1:6379&gt; sismember set1 A</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><p>　　需要注意的是，如果你用的是Redis Cluster集群，对于sinter、smove这种操作多个key的命令，要求这两个key必须存储在同一个slot（槽位）中，否则会报出 (error) CROSSSLOT Keys in request don’t hash to the same slot 错误。Redis Cluster一共有16384个slot，每个key都是通过哈希算法CRC16(key)获取数值哈希，再模16384来定位slot的。要使得两个key处于同一slot，除了两个key一模一样，还有没有别的方法呢？答案是肯定的，Redis提供了一种<strong>Hash Tag</strong>的功能，在key中使用{}括起key中的一部分，在进行 CRC16(key) mod 16384 的过程中，只会对{}内的字符串计算，例如friend_set:{123456}和fans_set:{123456}，分别表示用户123456的好友集合和粉丝集合，在定位slot时，只对{}内的123456进行计算，所以这两个集合肯定是在同一个slot内的，当用户123456关注某个粉丝时，就可以通过smove命令将这个粉丝从用户123456的粉丝集合移动到好友集合。相比于通过srem命令先将这个粉丝从粉丝集合中删除，再通过sadd命令将这个粉丝加到好友集合，smove命令的优势是它是原子性的，不会出现这个粉丝从粉丝集合中被删除，却没有加到好友集合的情况。然而，对于通过sinter获取共同好友而言，Hash Tag则无能为力，例如，要用sinter去获取用户123456和456789两个用户的共同好友，除非我们将key定义为{friend_set}:123456和{friend_set}:456789，否则不能保证两个key会处于同一个slot，但是如果真这样做的话，所有用户的好友集合都会堆积在同一个slot中，数据分布会严重不均匀，不可取，所以，****在实战中**使用Redis Cluster时，sinter这个命令其实是不适合作用于两个不同用户对应的集合的**（同理其它操作多个key的命令）。</p><p> 　2. 随机展示</p><p>　　通常，app首页的展示区域有限，但是又不能总是展示固定的内容，一种做法是先确定一批需要展示的内容，再从中随机获取。如下图所示，酷狗音乐K歌擂台赛当日的打擂歌曲共29首，首页随机展示5首；昨日打擂金曲共200首，首页随机展示30首。</p><p>　　set类型适合存放所有需要展示的内容，而<code>srandmember</code>命令则可以从中随机获取几个。</p><p> 　3. 黑名单&#x2F;白名单</p><p>　　经常有业务出于安全性方面的考虑，需要设置用户黑名单、ip黑名单、设备黑名单等，set类型适合存储这些黑名单数据，<code>sismember</code>命令可用于判断用户、ip、设备是否处于黑名单之中。</p><h2 id="sorted-set"><a href="#sorted-set" class="headerlink" title="sorted set"></a>sorted set</h2><p>与set一样是一个不重复的集合。区别是集合中每一个成员都会有一个分数。</p><ul><li>不同的是每个元素都会关联一个 double 类型的分数</li><li>redis 正是通过分数来为sorted set集合中的成员进行从小到大的排序。</li><li>有序集合的成员是唯一的,但分数(score)却可以重复</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#向zset1集合中 存入三个成员</span></span><br><span class="line">127.0.0.1:6379&gt; zadd zset1 100 xiaoming 50 red 10.6 green</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"><span class="comment">#查询0-2索引范围的数据 默认正序：从小到大</span></span><br><span class="line">127.0.0.1:6379&gt; zrange zset1 0 2</span><br><span class="line">1) <span class="string">&quot;green&quot;</span></span><br><span class="line">2) <span class="string">&quot;red&quot;</span></span><br><span class="line">3) <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line"><span class="comment">#查询0-2索引范围的数据，倒叙 revrange-&gt; reverse range</span></span><br><span class="line">127.0.0.1:6379&gt; zrevrange zset1 0 2</span><br><span class="line">1) <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">2) <span class="string">&quot;red&quot;</span></span><br><span class="line">3) <span class="string">&quot;green&quot;</span></span><br><span class="line"><span class="comment">#查询某个成员的分数</span></span><br><span class="line">127.0.0.1:6379&gt; zscore zset1  green</span><br><span class="line"><span class="string">&quot;10.6&quot;</span></span><br></pre></td></tr></table></figure><p>使用场景：</p><p>带分数的排名：比如商品销量排名，游戏玩家积分排名等等</p><h2 id="bitmap"><a href="#bitmap" class="headerlink" title="bitmap"></a>bitmap</h2><p>位图：当做是一个bit数组，我们向每一位来set设置0或1，也可以get</p><p>场景：</p><ul><li>设置用户在线状态，所有用户用一个key，用户id作为offset</li><li>用户签到情况，每一个用户作为一个bitmap的key</li></ul><h2 id="hyperLoglog"><a href="#hyperLoglog" class="headerlink" title="hyperLoglog"></a>hyperLoglog</h2><p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。</p><p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基 数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p><p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p><blockquote><p>什么是基数?</p><p>比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数。</p></blockquote><h2 id="geo"><a href="#geo" class="headerlink" title="geo"></a>geo</h2><p>GEO即地址信息定位<br>可以用来存储经纬度，计算两地距离，范围计算等</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h2><ul><li>Redis应用类型及应用场景 <a href="https://segmentfault.com/a/1190000012212663?utm_source=tag-newest">https://segmentfault.com/a/1190000012212663?utm_source=tag-newest</a></li><li>Redis实战经验 <a href="https://www.cnblogs.com/pangzizhe/p/10674501.html">https://www.cnblogs.com/pangzizhe/p/10674501.html</a></li><li><a href="https://www.cnblogs.com/renpingsheng/p/9783834.html">https://www.cnblogs.com/renpingsheng/p/9783834.html</a></li></ul><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>端口占用问题</title>
      <link href="/2021/01/05/%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98-%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2021/01/05/%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98-%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><strong>在运行程序时，有时会出现程序莫名其妙不能启动的情况。根据Log提示或猜测可能是端口占用的情况。</strong></p><p>解决办法：</p><ol><li>netstat -aon|findstr [端口号]（查看端口是否被占用）</li><li>tasklist|findstr [进程号PID] （查看占用端口的进程）</li><li>taskkill  &#x2F;pid [进程号PID] -f -t 杀死进程（或在任务管理器中结束该进程）<blockquote><p>&#x2F;PID processid    指定要终止的进程的 PID。<br>-F                指定强制终止进程。</p></blockquote></li></ol><p>-T              终止指定的进程和由它启用的子进程</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 端口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POI操作Excel</title>
      <link href="/2020/12/31/POI%E6%93%8D%E4%BD%9CExcel-poi%E6%93%8D%E4%BD%9Cexcel/"/>
      <url>/2020/12/31/POI%E6%93%8D%E4%BD%9CExcel-poi%E6%93%8D%E4%BD%9Cexcel/</url>
      
        <content type="html"><![CDATA[<h1 id="POI操作Excel"><a href="#POI操作Excel" class="headerlink" title="POI操作Excel"></a>POI操作Excel</h1><ul><li>获取Excel对象，并写值</li><li>如何插入行？</li><li>如何保存更改或下载</li></ul><h4 id="POI操作Excel，读取Excel并对单元格进行赋值"><a href="#POI操作Excel，读取Excel并对单元格进行赋值" class="headerlink" title="POI操作Excel，读取Excel并对单元格进行赋值"></a>POI操作Excel，读取Excel并对单元格进行赋值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置文件路径</span></span><br><span class="line"><span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line"><span class="comment">//根据文件路径获取输入流</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(filePath));</span><br><span class="line"><span class="comment">//获取文档对象</span></span><br><span class="line"><span class="type">Workbook</span> <span class="variable">wb</span> <span class="operator">=</span> WorkbookFactory.create(input);</span><br><span class="line"><span class="comment">//获取第一个Sheet页，也有方法可以根据Sheet的名字获取</span></span><br><span class="line"><span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> wb.getSheetAt(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//获取该Sheet的第一行对象</span></span><br><span class="line"><span class="type">Row</span> <span class="variable">row</span> <span class="operator">=</span> sheet.getRow(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//获取第一个单元格元素</span></span><br><span class="line"> <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> row2.getCell(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//设置单元格的值</span></span><br><span class="line">cell.setCellValue(<span class="string">&quot;your value&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="当需要插入行时，需要两步"><a href="#当需要插入行时，需要两步" class="headerlink" title="当需要插入行时，需要两步"></a>当需要插入行时，需要两步</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 先用shiftRows方法将行向下移动，</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">参数1：startRow从第几行开始移动，</span></span><br><span class="line"><span class="comment">参数2：从参数一的行数到sheet的最后一行，一并向下移动</span></span><br><span class="line"><span class="comment">参数3：count：移动几行</span></span><br><span class="line"><span class="comment">参数4与参数5与行高有关，是Boolean类型，根据情况自行设置</span></span><br><span class="line"><span class="comment"> * Shifts rows between startRow and endRow n number of rows.</span></span><br><span class="line"><span class="comment"> * If you use a negative number, it will shift rows up.</span></span><br><span class="line"><span class="comment"> * Code ensures that rows don&#x27;t wrap around</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Additionally shifts merged regions that are completely defined in these</span></span><br><span class="line"><span class="comment"> * rows (ie. merged 2 cells on a row to be shifted).</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> startRow the row to start shifting</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> endRow the row to end shifting</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n the number of rows to shift</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> copyRowHeight whether to copy the row height during the shift</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> resetOriginalRowHeight whether to set the original row&#x27;s height to the default</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">shiftRows</span><span class="params">(<span class="type">int</span> startRow, <span class="type">int</span> endRow, <span class="type">int</span> n, <span class="type">boolean</span> copyRowHeight, <span class="type">boolean</span> resetOriginalRowHeight)</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> 当移动行后，在Sheet对象中row会空出来几个比如从<span class="number">1</span>~<span class="number">3</span>  <span class="number">8</span>~<span class="number">15.</span>这时<span class="number">3</span>~<span class="number">8</span>是没有row对象的。</span><br><span class="line">    需要我们来自己创建row对象，并依据上面的样式补充单元格。</span><br><span class="line"> <span class="type">Row</span> <span class="variable">rowSource</span> <span class="operator">=</span> sheet.getRow(n);<span class="comment">//复制哪一行的样式 n就是几</span></span><br><span class="line"><span class="comment">//遍历中间的行数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startRow; i &lt; startRow+count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Row</span> <span class="variable">rowInsert</span> <span class="operator">=</span> sheet.createRow(i);</span><br><span class="line">        rowInsert.setRowStyle(rowSource.getRowStyle());</span><br><span class="line">        rowInsert.setHeight(rowSource.getHeight());</span><br><span class="line"><span class="comment">//遍历每一行的单元格数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; rowSource.getLastCellNum(); col++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">Cell</span> <span class="variable">cellsource</span> <span class="operator">=</span> rowSource.getCell(col);</span><br><span class="line">            <span class="type">Cell</span> <span class="variable">cellInsert</span> <span class="operator">=</span> rowInsert.createCell(col);</span><br><span class="line">            cellInsert.setCellStyle(cellsource.getCellStyle());</span><br><span class="line">            <span class="comment">//这几句话是由于我需要合并单元格</span></span><br><span class="line">            <span class="type">CellRangeAddress</span> <span class="variable">region</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(i, i, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="type">CellRangeAddress</span> <span class="variable">region2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(i, i, <span class="number">6</span>, <span class="number">8</span>);</span><br><span class="line">            sheet.addMergedRegion(region);</span><br><span class="line">            sheet.addMergedRegion(region2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="保存或下载"><a href="#保存或下载" class="headerlink" title="保存或下载"></a>保存或下载</h4><p>1 保存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置文件路径</span></span><br><span class="line"><span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line"><span class="comment">//根据文件路径获取输入流</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(filePath));</span><br><span class="line"><span class="type">Workbook</span> <span class="variable">wb</span> <span class="operator">=</span> WorkbookFactory.create(input);</span><br><span class="line"><span class="comment">//根据文件路径获取输出流</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(filePath));</span><br><span class="line"></span><br><span class="line"><span class="comment">//中间写文件的操作.....</span></span><br><span class="line">    doSomeThing();</span><br><span class="line"></span><br><span class="line"><span class="comment">//写出</span></span><br><span class="line">output.flush();</span><br><span class="line">wb.write(output);</span><br><span class="line"><span class="comment">//关闭</span></span><br><span class="line">output.close();</span><br><span class="line">input.close();</span><br></pre></td></tr></table></figure><p>2 下载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理Excel</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dealExcel</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="comment">//设置文件路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line">    <span class="comment">//根据文件路径获取输入流</span></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(filePath));</span><br><span class="line">    <span class="type">Workbook</span> <span class="variable">wb</span> <span class="operator">=</span> WorkbookFactory.create(input);</span><br><span class="line"><span class="comment">//中间写文件的操作.....</span></span><br><span class="line">    doSomeThing();</span><br><span class="line">    <span class="comment">//下载Excel</span></span><br><span class="line">    expotExcel(wb,<span class="string">&quot;文件名&quot;</span>,response);</span><br><span class="line">    <span class="comment">//关闭流</span></span><br><span class="line">    input.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//下载Excel</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">void</span>   <span class="title function_">expotExcel</span><span class="params">(Workbook wb,String fileName,HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(fileName + <span class="string">&quot;.xlsx&quot;</span>, <span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/octet-stream;charset=utf-8&quot;</span>);</span><br><span class="line">        response.addHeader(<span class="string">&quot;Pargam&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        response.addHeader(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            wb.write(outputStream);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            outputStream.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POI </tag>
            
            <tag> EXCEL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper</title>
      <link href="/2020/12/11/Zookeeper-zookeeper/"/>
      <url>/2020/12/11/Zookeeper-zookeeper/</url>
      
        <content type="html"><![CDATA[<h1 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h1><ol><li>基于zk集群实现分布式配置中心</li></ol><h2 id="1-Zookeeper-是什么？"><a href="#1-Zookeeper-是什么？" class="headerlink" title="1. Zookeeper 是什么？"></a>1. Zookeeper 是什么？</h2><p>简单来说zookeeper&#x3D;<strong>文件系统 + 监听通知机制</strong>。</p><h3 id="1-1-文件系统"><a href="#1-1-文件系统" class="headerlink" title="1.1 文件系统"></a>1.1 文件系统</h3><p>文件系统就是一个节点树，最头上的是根，</p><p>再往下就有各级目录，每个目录中或者是文件或者是下一级的目录</p><p><img src="https://hopestation.top/upload/2020/12/zk06-da25a3e62b294997bda9ed795302c1f9.png" alt="zk06.png"></p><p>每个子目录项如 NameService 都被称作为 znode(目录节点)，</p><p>和文件系统一样，我们能够自由的增加、删除znode，在一个znode下增加、删除子znode，</p><p>唯一的不同在于znode是可以存储数据的</p><blockquote><p>需要额外注意以下几点：</p><ol><li><p>znode 中的数据可以有多个版本，在查询该 znode 数据时就需要带上版本信息。（set path version &#x2F; delete path version）</p></li><li><p>znode 可以是临时 znode（create -e 生成的节点），一旦创建这个 znode 的 client 与server 断开连接，该znode 将被自动删除。client 和 server 之间通过 heartbeat 来确认连接正常，这种状态称之为 session，断开连接后 session 失效。</p></li><li><p>临时 znode 不能有子 znode。</p></li><li><p>znode 可以自动编号（create -s 生成的节点），例如在 create -s &#x2F;app&#x2F;node 已存在时，将会生成&#x2F;app&#x2F;node00***001 节点。</p></li><li><p>znode 可以被监控，该目录下某些信息的修改，例如节点数据、子节点变化等，可以主动通知监控注册的 client。事实上，通过这个特性，可以完成许多重要应用，例如配置管理、信息同步、分布式锁等等。</p></li></ol></blockquote><h3 id="1-2-监听通知机制"><a href="#1-2-监听通知机制" class="headerlink" title="1.2 监听通知机制"></a>1.2 监听通知机制</h3><p>客户端注册监听它关心的目录节点，当目录节点发生变化（数据改变、被删除、子目录节点增加删除）时，zookeeper会通知客户端。</p><p>zookeeper功能非常强大，可以实现诸如分布式应用配置管理、统一命名服务、状态同步服务、集群管理等功能，</p><p>我们这里拿比较简单的分布式应用配置管理为例来说明。</p><p>假设我们的程序是分布式部署在多台机器上，如果我们要改变程序的配置文件，</p><p>需要逐台机器去修改，非常麻烦，现在把这些配置全部放到zookeeper上去，</p><p>保存在 zookeeper 的某个目录节点中，然后所有相关应用程序对这个目录节点进行监听，</p><p>一旦配置信息发生变化，每个应用程序就会收到 zookeeper 的通知，然后从 zookeeper 获取新的配置信息应用到系统中。</p><p><img src="https://hopestation.top/upload/2020/12/zk07-1aa4ac271aaf4aa3936e487142a9de8b.png" alt="zk07.png"></p><blockquote><p>每个ZNode上可存储少量数据(默认是1M, 可以通过配置修改, 通常不建议在ZNode上存储大量的数据)</p><p>配置文件文件大的话，个人建议不要用Zookeeper作为配置中心</p></blockquote><h3 id="1-3-概念"><a href="#1-3-概念" class="headerlink" title="1.3 概念"></a>1.3 概念</h3><p>先来看看官网的解释：</p><p><img src="https://hopestation.top/upload/2020/12/zk05-a24b3b6c2e7d47bc813180a8c5b334bc.png" alt="zk05"></p><p>关键信息：<strong>ZooKeeper是用于维护配置信息，命名，提供分布式同步以及提供组服务的集中式服务</strong>。</p><p><strong>配置管理</strong></p><p>在我们的应用中除了代码外，还有一些就是各种配置。比如数据库连接等。一般我们都是使用配置文件的方式，在代码中引入这些配置文件。但是当我们只有一种配置，只有一台服务器，并且不经常修改的时候，使用配置文件是一个很好的做法，但是如果我们配置非常多，有很多服务器都需要这个配置，而且还可能是动态的话使用配置文件就不是个好主意了。这个时候往往需要寻找一种集中管理配置的方法，我们在这个集中的地方修改了配置，所有对这个配置感兴趣的都可以获得变更。比如我们可以把配置放在数据库里，然后所有需要配置的服务都去这个数据库读取配置。但是，因为很多服务的正常运行都非常依赖这个配置，所以需要这个集中提供配置服务的服务具备很高的可靠性。一般我们可以用一个集群来提供这个配置服务，但是用集群提升可靠性，那如何保证配置在集群中的一致性呢？ 这个时候就需要使用一种实现了一致性协议的服务了。Zookeeper就是这种服务，它使用Zab这种一致性协议来提供一致性。现在有很多开源项目使用Zookeeper来维护配置，比如在HBase中，客户端就是连接一个Zookeeper，获得必要的HBase集群的配置信息，然后才可以进一步操作。还有在开源的消息队列Kafka中，也使用Zookeeper来维护broker的信息。在Alibaba开源的SOA框架Dubbo中也广泛的使用Zookeeper管理一些配置来实现服务治理。</p><p><strong>名字服务</strong></p><p>名字服务这个就很好理解了。比如为了通过网络访问一个系统，我们得知道对方的IP地址，但是IP地址对人非常不友好，这个时候我们就需要使用域名来访问。但是计算机是不能是别域名的。怎么办呢？如果我们每台机器里都备有一份域名到IP地址的映射，这个倒是能解决一部分问题，但是如果域名对应的IP发生变化了又该怎么办呢？于是我们有了DNS这个东西。我们只需要访问一个大家熟知的(known)的点，它就会告诉你这个域名对应的IP是什么。在我们的应用中也会存在很多这类问题，特别是在我们的服务特别多的时候，如果我们在本地保存服务的地址的时候将非常不方便，但是如果我们只需要访问一个大家都熟知的访问点，这里提供统一的入口，那么维护起来将方便得多了。</p><p><strong>分布式锁</strong></p><p>其实在第一篇文章中已经介绍了Zookeeper是一个分布式协调服务。这样我们就可以利用Zookeeper来协调多个分布式进程之间的活动。比如在一个分布式环境中，为了提高可靠性，我们的集群的每台服务器上都部署着同样的服务。但是，一件事情如果集群中的每个服务器都进行的话，那相互之间就要协调，编程起来将非常复杂。而如果我们只让一个服务进行操作，那又存在单点。通常还有一种做法就是使用分布式锁，在某个时刻只让一个服务去干活，当这台服务出问题的时候锁释放，立即fail over到另外的服务。这在很多分布式系统中都是这么做，这种设计有一个更好听的名字叫Leader Election(leader选举)。比如HBase的Master就是采用这种机制。但要注意的是分布式锁跟同一个进程的锁还是有区别的，所以使用的时候要比同一个进程里的锁更谨慎的使用。</p><blockquote><p>这段描述不够清晰，以后重新写一下</p></blockquote><p><strong>集群管理</strong></p><p>在分布式的集群中，经常会由于各种原因，比如硬件故障，软件故障，网络问题，有些节点会进进出出。有新的节点加入进来，也有老的节点退出集群。这个时候，集群中其他机器需要感知到这种变化，然后根据这种变化做出对应的决策。比如我们是一个分布式存储系统，有一个中央控制节点负责存储的分配，当有新的存储进来的时候我们要根据现在集群目前的状态来分配存储节点。这个时候我们就需要动态感知到集群目前的状态。还有，比如一个分布式的SOA架构中，服务是一个集群提供的，当消费者访问某个服务时，就需要采用某种机制发现现在有哪些节点可以提供该服务(这也称之为服务发现，比如Alibaba开源的SOA框架Dubbo就采用了Zookeeper作为服务发现的底层机制)。还有开源的Kafka队列就采用了Zookeeper作为Cosnumer的上下线管理。</p><blockquote><p>更详细的描述参考此文章：<a href="https://www.yuque.com/realskrman/bi4s0n/ho3b8b">https://www.yuque.com/realskrman/bi4s0n/ho3b8b</a></p></blockquote><h3 id="1-4-服务注册中心"><a href="#1-4-服务注册中心" class="headerlink" title="1.4 服务注册中心"></a>1.4 服务注册中心</h3><p>Zookeeper是可以作为服务注册中心的，经常和Dubbo来整合使用。</p><p>除了Zookeeper，还有其他的注册中心：</p><ul><li>eureka：SpringCLoud项目产品</li><li>nacos：阿里产品，springcloud-alibaba集成</li><li>consul：HashiCorp 公司推出的开源工具</li><li>等..</li></ul><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><h3 id="2-1-单机测试"><a href="#2-1-单机测试" class="headerlink" title="2.1 单机测试"></a>2.1 单机测试</h3><h4 id="2-1-1-WIndow环境"><a href="#2-1-1-WIndow环境" class="headerlink" title="2.1.1 WIndow环境"></a>2.1.1 WIndow环境</h4><p>其实很简单，参考我的这个文章：<a href="https://hopestation.top/archives/dz01#2-zookeeper%E5%AE%89%E8%A3%85">Dubbo + Zookeeper</a></p><h4 id="2-1-2-Linux环境"><a href="#2-1-2-Linux环境" class="headerlink" title="2.1.2 Linux环境"></a>2.1.2 Linux环境</h4><p>1、下载 首先我们下载稳定版本的zookeeper<a href="http://zookeeper.apache.org/releases.html"> http://zookeeper.apache.org/releases.html</a> </p><p>2、上传 下载完成后，将zookee er压缩包<code>zookeeper-3.4.14.tar.gz</code>上传到linux系统 </p><p>3、解压缩压缩包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf zookeeper-3.4.14.tar.gz</span><br></pre></td></tr></table></figure><p>4、进入<code>zookeeper-3.4.14</code>目录，创建data文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> zookeeper-3.4.14 <span class="built_in">mkdir</span> data</span><br></pre></td></tr></table></figure><p>5、修改配置文件名称（因为Zookeeper默认读取的是 <code>zoo.cfg</code>文件）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> conf</span><br><span class="line"><span class="built_in">mv</span> zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure><p>5、修改<code>zoo.cfg</code>中的data属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataDir=/root/zookeeper-3.4.14/data</span><br></pre></td></tr></table></figure><p>6、zookeeper服务启动 进入bin目录，输入命令<strong>启动服务</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh start</span><br></pre></td></tr></table></figure><p>输出以下内容表示启动成功</p><p><img src="https://hopestation.top/upload/2020/12/zk08-391e20c13c8540e4bd9efc2a476377af.png" alt="zk08.png"></p><p>关闭服务输入命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh stop</span><br></pre></td></tr></table></figure><p>输出以下提示信息</p><p><img src="https://hopestation.top/upload/2020/12/zk09-e703395dce084c40a6a3f2df245b5723.png" alt="zk09.png"></p><p>查看状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh status</span><br></pre></td></tr></table></figure><p>如果启动状态，提示:</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1699668/1597134783727-8bee52ce-fd06-451b-ba63-252826dd92f5.png" alt="image.png"></p><p>如果未启动状态，提示:</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1699668/1597134794690-99319724-8d68-415a-bc0c-b73bf0431a7d.png" alt="image.png"></p><h3 id="2-2-伪集群模式"><a href="#2-2-伪集群模式" class="headerlink" title="2.2 伪集群模式"></a>2.2 伪集群模式</h3><p>这里介绍Linux搭建（WIndos也可以，步骤类似）</p><blockquote><p>首先来说并不太复杂，和我的<a href="https://hopestation.top/archives/redis9">Redis的伪集群搭建</a>类似</p><p>大致步骤：1.复制修改三份配置文件，2. 启动三份服务</p><p>Zookeeper不但可以在单机上运行单机模式,Zookeeper,而且可以在单机模拟集群模式Zookee per的运行，也就是将不同实例运行在同一台机器，用端口进行区分，伪集群模式为我们体验Zookeeper和做一 些尝试性的实验提供了很大的便利。比如，我们在测试的时候，可以先使用少量数据在伪集群模式下进行测试。当测试可行的时候，再将数据移植到集群模式进行真实的数据实验。这样不但保证了它的可行 性，同时大大提高了实验的效率。这种搭建方式，比较简便，成本比较低，适合测试和学习 </p></blockquote><p>注意事项 : </p><p>—台机器上部署了 3个server，也就是说单台机器及上运行多个Zookeeper实例。这种情况下，必须保 证每个配置文档的各个端口号不能冲突，除client Port不同之外，dataDir也不同。另外，还要在 dataDir所对应的目录中创建myid文件来指定对应的Zookee per服务器实例</p><p>■ <strong>client Port 端口：</strong></p><p>如果在1台机器上部署多个server，那么每台机器都要不同的client Port，比如serverl是2181,server2 是2182, server3是2183 </p><p>■ <strong>dataDir 和 dataLogDir：</strong></p><p>dataDi r和dataLogDir也需要区分下，将数据文件和日志文件分开存放，同时每个server的这两变量所 对应的路径都是不同的 </p><p>■ <strong>server.X 和 yid：</strong></p><p>server.X这个数字就是对应，data&#x2F;myid中的数字。在3个server的myid文件中分别写入了1, 2, 3,那 么每个serve r中的zoo.cfg都配server.1 server.2,server.3就行了。因为在同一台机器上，后面连着的2 个端口，3个server都不要一样，否则端口冲突</p><p>下载 </p><p>首先我们下载最新稳定版本的 zookee per<a href="http://zookeeper.apache.org/releases.html"> htt p:&#x2F;&#x2F;zookee per.a pache.org&#x2F;releases.html</a> 上传 下载完成后，将zookee per压缩包zookee per-3.4.14.tar.gz上传到linux系统 解压压缩包 创建目录zkcluster</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir zkcluster</span><br></pre></td></tr></table></figure><p>解压zookee per-3・4・14・tar・gz到zkcluster目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf zookeeper-3.4.14.tar.gz -C /zkcluster</span><br></pre></td></tr></table></figure><p>改变名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv zookeeper-3.4.14 zookeeper01</span><br></pre></td></tr></table></figure><p>复制并改名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r zookeeper01/ zookeeper02 cp -r zookeeper01/ zookeeper03</span><br></pre></td></tr></table></figure><p>分别在zookeeper01、zookeeper02、zookeeper03目录下创建data及logs目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir data</span><br><span class="line">cd data</span><br><span class="line">mkdir logs</span><br></pre></td></tr></table></figure><p>修改配置文件名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd conf</span><br><span class="line">mv zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure><p>配置每一个 Zookee per 的 dataDir (zoo.cfg) client Port 分别为2181 2182 2183</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">clientPort=2181</span><br><span class="line">dataDir=/zkcluster/zookeeper01/data</span><br><span class="line">dataLogDir=/zkcluster/zookeeper01/data/logs</span><br><span class="line">clientPort=2182</span><br><span class="line">dataDir=/zkcluster/zookeeper02/data</span><br><span class="line">dataLogDir=/zkcluster/zookeeper02/data/logs</span><br><span class="line">clientPort=2183</span><br><span class="line">dataDir=/zkcluster/zookeeper03/data dataLogDir=/zkcluster/zookeeper03/data/logs</span><br></pre></td></tr></table></figure><p>配置集群</p><p>⑴ 在每个zookeeper的data目录下创建一个myid文件，内容分别是1、2、3。这个文件就是记录 每个服务器的ID</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch myid</span><br></pre></td></tr></table></figure><p>(2) 在每一个zookeeper的zoo.cfg配置客户端访问端口(clientPort)和集群服务器IP列表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.1=10.211.55.4:2881:3881</span><br><span class="line">server.2=10.211.55.4:2882:3882</span><br><span class="line">server.3=10.211.55.4:2883:3883</span><br></pre></td></tr></table></figure><p># server.服务器ID&#x3D;服务器IP地址：服务器之间通信端口：服务器之间投票选举端口</p><p>启动集群 依次启动三个zk实例</p><p>节点状态查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">node1</span><br><span class="line"># ./zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /app/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Mode: follower</span><br><span class="line"></span><br><span class="line">#node2</span><br><span class="line"># ./zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /app/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Mode: leader</span><br><span class="line"></span><br><span class="line">#node3</span><br><span class="line"># ./zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /app/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Mode: follower</span><br></pre></td></tr></table></figure><h3 id="2-3-真集群模式"><a href="#2-3-真集群模式" class="headerlink" title="2.3 真集群模式"></a>2.3 真集群模式</h3><p>也就是相当于类似上面伪集群的操作。不过不是在一旦机器上配置三份。而是在三台服务器上配置三份。</p><h2 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3. 配置文件"></a>3. 配置文件</h2><p>上面的配置基本都是在 <code>zoo.cfg</code>，这里来解释一下配置文件的作用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cp conf/zoo_sample.cfg conf/zoo.cfg</span></span><br><span class="line"><span class="comment">#vim zoo.cfg</span></span><br><span class="line"><span class="comment"># zoo.cfg文件中内容如下</span></span><br><span class="line"><span class="comment"># The number of milliseconds of each tick</span></span><br><span class="line"><span class="comment">#Zookeeper 服务器之间或客户端与服务器之间维持心跳的时间间隔，每隔tickTime时间就会发送一个心跳，</span></span><br><span class="line"><span class="comment">#单位毫秒，最小的session过期时间为tickTime的两倍，ZK中的其他时间都是以这个为倍数的。</span></span><br><span class="line">tickTime=2000</span><br><span class="line"></span><br><span class="line"><span class="comment"># The number of ticks that the initial </span></span><br><span class="line"><span class="comment"># synchronization phase can take</span></span><br><span class="line"><span class="comment">#表示允许从服务器（相对于leader来说的客户端）连接到leader并完成数据同步的时间，</span></span><br><span class="line"><span class="comment">#它是以tickTime的倍数来表示的，也就是从服务器与主服务器完成初始化连接和数据同步是能够容忍多少个心跳时间，</span></span><br><span class="line"><span class="comment">#如果超过这个时间不能完成初始化连接的建立则表示连接失败。默认是10.</span></span><br><span class="line"><span class="comment">#如果你的数据量过大而且从服务器数量也多那么这个值可以设置大一点。</span></span><br><span class="line"><span class="comment">#总的时间长度就是 initLimit * tickTime 秒。</span></span><br><span class="line">initLimit=10  </span><br><span class="line"></span><br><span class="line"><span class="comment">#用于配置Leader服务器是否接受客户端的连接，是否允许Leader向客户端直接提供服务，默认是可以的。</span></span><br><span class="line"><span class="comment">#LeaderServes  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The number of ticks that can pass between </span></span><br><span class="line"><span class="comment"># sending a request and getting an acknowledgement</span></span><br><span class="line"><span class="comment">#配置 Leader 与 Follower 之间发送消息，请求和应答时间长度，最长不能超过多少个 tickTime 的时间长度，</span></span><br><span class="line"><span class="comment">#总的时间长度就是 syncLimit * tickTime 秒 ，如果在这个时间内从服务器不能与主服务器通信，</span></span><br><span class="line"><span class="comment">#则表示该从服务器失败。默认为5.如果集群环境网络不佳可以调整大一点。</span></span><br><span class="line">syncLimit=5     </span><br><span class="line"></span><br><span class="line"><span class="comment"># the directory where the snapshot is stored.</span></span><br><span class="line"><span class="comment"># do not use /tmp for storage, /tmp here is just </span></span><br><span class="line"><span class="comment"># example sakes.</span></span><br><span class="line"><span class="comment">#Zookeeper 保存数据的数据库快照的位置，默认是/tmp/zookeeper，</span></span><br><span class="line"><span class="comment">#快照文件并不是实时的，运行一段时间才会有。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#事务日志日志路径，若没提供的话则用dataDir。zookeeper的持久化都存储在这两个目录里，</span></span><br><span class="line"><span class="comment">#对ZK的读和写都是在内存中完成，所以速度非常快，但是如果停止ZK再启动数据还是需要保证的，</span></span><br><span class="line"><span class="comment">#所以就会有这样一个路径用来保存事务日志，当ZK再次启动时加载到内存重演过程来恢复数据。</span></span><br><span class="line"><span class="comment">#dataLogDir里是放到的顺序日志(WAL),指定的目录下有version-2文件夹（下有log.1文件），</span></span><br><span class="line"><span class="comment">#这个目录确定了当前事务日志的版本号，当下次某个版本的ZK对其进行修改时，版本号发生变化。</span></span><br><span class="line"><span class="comment">#日志文件大小为64M，如果数据比较多就会有多个这样大小的文件。而dataDir里放的是内存数据结构的snapshot，</span></span><br><span class="line"><span class="comment">#便于快速恢复。为了达到性能最大化，一般建议把dataDir和dataLogDir分到不同的磁盘上，</span></span><br><span class="line"><span class="comment">#建议将事物日志保存到单独的磁盘而且是高速磁盘。因为为了一致性，</span></span><br><span class="line"><span class="comment">#ZK对于客户端的写入请求在返回之前就要把本次操作写入到事物日志中</span></span><br><span class="line">dataDir=/app/zookeeper/data   </span><br><span class="line">dataLogDir=/app/zookeeper/logs  </span><br><span class="line"></span><br><span class="line"><span class="comment"># the port at which the clients will connect</span></span><br><span class="line"><span class="comment">#Zookeeper服务器监听的端口，以接受客户端的访问请求。</span></span><br><span class="line">clientPort=2181  </span><br><span class="line"></span><br><span class="line"><span class="comment"># the maximum number of client connections.</span></span><br><span class="line"><span class="comment"># increase this if you need to handle more clients</span></span><br><span class="line"><span class="comment">#限制连接到ZK上的客户端数量，并且限制并发连接数量，它通过IP来区分不同客户端。</span></span><br><span class="line"><span class="comment">#值为0表示不做任何限制。注意这里的限制是针对单台客户端到服务器的，并不是控制所有客户端连接的。默认60.</span></span><br><span class="line"><span class="comment">#maxClientCnxns=60   </span></span><br><span class="line"></span><br><span class="line">最小会话超时时间，默认为tickTime的2倍。不建议把这个值设置的比tickTime小。客户端连接到ZK时如果在这个最小时间内没有和ZK联系则标记为超时，也就是说会断开。</span><br><span class="line"><span class="comment">#minSessionTimeout=120     </span></span><br><span class="line"></span><br><span class="line">最大会话超时时间，默认为20倍的最小会话超时时间。不建议把这个值设置的比tickTime小。客户端连接到ZK时如果在这个最大时间内没有和ZK联系则标记为超时。所以上面的参数和这个参数组成了一个时间范围，也就是客户端连接ZK时如果在这个时间范围内没有成功连接则会标记为超时。如果客户端设置的时间范围不在这个服务器设置的范围内，则会被强制应用服务器设置的范围。</span><br><span class="line"><span class="comment">#maxSessionTimeout=2400     </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Be sure to read the maintenance section of the </span></span><br><span class="line"><span class="comment"># administrator guide before turning on autopurge.</span></span><br><span class="line"><span class="comment"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span></span><br><span class="line"><span class="comment"># The number of snapshots to retain in dataDir</span></span><br><span class="line"><span class="comment">#自动清理日志，该参数设置保留多少个快照文件和对应的事务日志文件，默认为3，</span></span><br><span class="line"><span class="comment">#如果你设置的小于3则会被自动的调整为3</span></span><br><span class="line"><span class="comment">#autopurge.snapRetainCount=3              </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Purge task interval in hours</span></span><br><span class="line"><span class="comment"># Set to &quot;0&quot; to disable auto purge feature</span></span><br><span class="line"><span class="comment">#自动清理日志，该参数设置自动清理频率，上面的参数配套使用。</span></span><br><span class="line"><span class="comment">#客户端在和ZK服务器交互中服务器会产生很多日志，而且ZK会将内存中的数据作为快照保存起来，</span></span><br><span class="line"><span class="comment">#而且这些数据不会自动删除，那么磁盘空间就会被占用，可以设置这2个参数来自动清理，</span></span><br><span class="line"><span class="comment">#不过如果ZK服务器比较繁忙而且赶上删除日志任务就会影响性能，所以一般不设置这个自动清理，</span></span><br><span class="line"><span class="comment">#而是在ZK访问量少的时候通过Linux的定时任务来处理。0表示不开启自动清理功能。</span></span><br><span class="line"><span class="comment">#autopurge.purgeInterval=1  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ZK的最大请求堆积数，客户端请求比较多，为了防止客户端资源过度消耗，服务器必须限制同时处理的请求数量。</span></span><br><span class="line"><span class="comment">#globalOutstandingLimit   </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#用于配置ZK事务日志预先分配的空间，默认是64M</span></span><br><span class="line"><span class="comment">#preAllocSize   </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#用于配置相邻两次快照之间的事物日志次数，默认是10万。也就是10万条事务之后做一次快照同时结转事务日志</span></span><br><span class="line"><span class="comment">#snapCount     </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这个参数针对多网卡的ZK服务器，允许为每个IP地址指定不同的监听端口。</span></span><br><span class="line"><span class="comment">#clientPortAddres     </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#用于设置ZK服务器事物日志同步操作时消耗时间的报警阈值，如果实际消耗时长超过这个时间日志就会记录。</span></span><br><span class="line"><span class="comment">#fsync.warningthresholdms     </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#用于配置Leader选举算法，目前只有一种选举算法，所以不用配置。</span></span><br><span class="line"><span class="comment">#electionAlg    </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#用于Leader选举时各个服务器之间进行的TCP连接创建超时时间，默认为5.</span></span><br><span class="line"><span class="comment">#cnxTimeout  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这个参数用于配置ZK服务器是否在事物提交时是否强制写入磁盘（LINUX的延迟写入），默认是YES。</span></span><br><span class="line"><span class="comment">#forceSync       </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#用于配置单个数据节点上最大数量，默认是1MB。通常不需要改动该参数，但是因为Zookeeper不适合存放太多数据所以有时候需要把值改小</span></span><br><span class="line"><span class="comment">#jute.maxbuffer    </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#是否跳过ACL检查，默认是no，也就是会对所有客户端连接进行acl检查。</span></span><br><span class="line"><span class="comment">#skipACL    </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#其中X是一个数字, 表示这是第几号server，它的值和myid文件中的值对应。</span></span><br><span class="line"><span class="comment">#A是该server所在的IP地址。B是配置该server和集群中的leader交换消息所使用的端口。</span></span><br><span class="line"><span class="comment">#C配置选举leader时所使用的端口。由于配置的是伪集群模式，所以各个server的B, C参数必须不同，</span></span><br><span class="line"><span class="comment">#如果是真正分布式集群，那么B和C在各个节点上可以相同，</span></span><br><span class="line"><span class="comment">#因为即使相同由于节点处于不同的服务器也不会导致端口冲突。</span></span><br><span class="line"><span class="comment">#格式server.X=A:B:C</span></span><br><span class="line">server.1=10.55.2.81:2888:3888</span><br><span class="line">server.2=10.55.2.82:2888:3888</span><br><span class="line">server.3=10.55.2.83:2888:3888</span><br></pre></td></tr></table></figure><h2 id="4-系统模型"><a href="#4-系统模型" class="headerlink" title="4. 系统模型"></a>4. 系统模型</h2><p>ZooKee per 数据模型 Znode 在ZooKeeper中，数据信息被保存在一个个数据节点上，这些节点被称为znode。ZNode是Zookee per中最小数据单位，在ZNode下面又可以再挂ZNode，这样一层层下去就形成了一个层次化 命名空间ZNode树，我们称为ZNode Tree，它采用了类似文件系统的层级树状结构进行管理。见下图 示例：</p><p><img src="https://hopestation.top/upload/2020/12/zk12-76e9a131a4e74f609709b4ff6341efab.png" alt="zk12.png"></p><p>在Zookeeper中，每一个数据节点都是一个ZNode,上图根目录下有两个节点，分别是；app1和 app2,其中app1下面又有三个子节点，所有ZNode按层次化进行组织，形成这么一颗树，ZNode的节 点路径标识方式和Unix文件系统路径非常相似，都是由一系列使用斜杠(&#x2F;)进行分割的路径表示，开 发人员可以向这个节点写入数据，也可以在这个节点下面创建子节点。</p><h3 id="4-1-ZNode类型"><a href="#4-1-ZNode类型" class="headerlink" title="4.1 ZNode类型"></a>4.1 ZNode类型</h3><p>刚刚已经了解到，Zookeeper的znode tree是由一系列数据节点组成的，那接下来，我们就对数据节点 做详细讲解</p><p>Zookee per节点类型可以分为三大类:</p><ul><li>持久性节点(Persistent）</li><li>临时性节点（Ephemeral）</li><li>顺序性节点（Sequential)）</li></ul><p>在开发中在创建节点的时候通过组合可以生成以下四种节点类型：持久节点、持久顺序节点、临时节 点、临时顺序节点。不同类型的节点则会有不同的生命周期 </p><p><strong>持久节点：</strong></p><p>是Zookeeper中最常见的一种节点类型，所谓持久节点，就是指节点被创建后会一直存在服 务器，直到删除操作主动清除 </p><p><strong>持久顺序节点：</strong></p><p>就是有顺序的持久节点，节点特性和持久节点是一样的，只是额外特性表现在顺序上。 顺序特性实质是在创建节点的时候，会在节点名后面加上一个数字后缀，来表示其顺序。</p><p><strong>临时节点：</strong></p><p>就是会被自动清理掉的节点，它的生命周期和客户端会话绑在一起，客户端会话结束，节点会被删除掉。与持久性节点不同的是，<strong>临时节点不能创建子节点</strong>。</p><p><strong>临时顺序节点</strong></p><p>就是有顺序的临时节点，和持久顺序节点相同，在其创建的时候会在名字后面加上数字 后缀。</p><p><strong>事务ID</strong> </p><p>首先，先了解，事务是对物理和抽象的应用状态上的操作集合。往往在现在的概念中，狭义上的事务通 常指的是数据库事务，一般包含了一系列对数据库有序的读写操作，这些数据库事务具有所谓的ACID特 性，即原子性(Atomic)、一致性(Consistency)、隔离性(Isolation)和持久性(Durability)。</p><p>而在ZooKeeper中，事务是指能够改变ZooKeeper服务器状态的操作，我们也称之为事务操作或更新操作，一般包括数据节点创建与删除、数据节点内容更新等操作。对于每一个事务请求，ZooKeeper都会 为其分配一个全局唯一的事务ID，用 **ZXID **来表示，通常是一个64位的数字。每一个ZXID对应一次更新操作，从这些ZXID中可以间接地识别出ZooKeeper处理这些更新操作请求的全局顺序</p><h3 id="4-2-ZNode的状态信息"><a href="#4-2-ZNode的状态信息" class="headerlink" title="4.2 ZNode的状态信息"></a>4.2 ZNode的状态信息</h3><p>我先来写几个命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#根目录的所有节点</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 5] <span class="built_in">ls</span> /</span><br><span class="line">[dubbo, <span class="built_in">test</span>, zookeeper]</span><br><span class="line"></span><br><span class="line"><span class="comment"># get 命令 来获取节点内容</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 6] get /test</span><br><span class="line">hope666</span><br><span class="line"></span><br><span class="line"><span class="comment"># stat 命令 来获取节点状态信息</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 4] <span class="built_in">stat</span> /test</span><br><span class="line">cZxid = 0x5d</span><br><span class="line">ctime = Wed Dec 09 13:46:38 GMT+08:00 2020</span><br><span class="line">mZxid = 0x5e</span><br><span class="line">mtime = Wed Dec 09 13:47:01 GMT+08:00 2020</span><br><span class="line">pZxid = 0x61</span><br><span class="line">cversion = 2</span><br><span class="line">dataVersion = 1</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 7</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure><p>整个ZNode节点内容包括两部分：节点数据内容和节点状态信息。那么这些状态信息都有什么含义呢？</p><ul><li>cZxid Create ZXID：表示节点被创建时的事务ID</li><li>ctime Create Time：表示节点创建时间。</li><li>mZxid Modified ZXID：表示节点最后一次被修改时的事务ID。</li><li>mtime Modified Time：表示节点最后一次被修改的时间。</li><li>pZxid：表示该节点的子节点列表最后一次被修改时的事务ID。只有子节点列表变更才会更新pZxid,子节点内容变更不会更新。</li><li>eversion：表示子节点的版本号。</li><li>dataVersion： 表不内容版本号。</li><li>aclVersion： 标识 acl 版本</li><li>ephemeralOwner：表示创建该临时节点时的会话sessionID，如果是持久性节点那么值为0 dataLength表示数据长度。</li><li>numchildren：表示直系子节点数。</li></ul><h3 id="4-3-Watcher"><a href="#4-3-Watcher" class="headerlink" title="4.3 Watcher"></a>4.3 Watcher</h3><p><strong>Watcher 数据变更通知</strong></p><p>Zookeeper使用Watcher机制实现分布式数据的发布&#x2F;订阅功能 —个典型的发布&#x2F;订阅模型系统定义了一种一对多的订阅关系，能够让多个订阅者同时监听某一个主题 对象，当这个主题对象自身状态变化时，会通知所有订阅者，使它们能够做出相应的处理。</p><p>在ZooKeeper中，引入了 Watcher机制来实现这种分布式的通知功能。ZooKeeper允许客户端向服务 端注册一个Watcher监听，当服务端的一些指定事件触发了这个Watche r,那么就会向指定客户端发 送一个事件通知来实现分布式的通知功能。</p><p>整个Watcher注册与通知过程如图所示。</p><p><img src="https://hopestation.top/upload/2020/12/zk13-678eeb5b950741898fb530c7532372a0.png" alt="zk13.png"></p><p>Zookeeper的Watcher机制主要包括客户端线程、客户端WatcherManager、Zookeeper服务器三部 分。</p><p>具体工作流程为：客户端在向Zookee per服务器注册的同时，会将Watcher对象存储在客户端的 WatcherManager当中。当Zookeeper服务器触发Watcher事件后，会向客户端发送通知，客户端线程 从WatcherManager中取出对应的Watcher对象来执行回调逻辑。</p><blockquote><p>这种监听机制，把压力分散在了每一个服务器上，去监听这个zookeeper中心。监听数据变化</p></blockquote><h3 id="4-4-ACL"><a href="#4-4-ACL" class="headerlink" title="4.4 ACL"></a>4.4 ACL</h3><p><strong>ACL–保障数据的安全</strong></p><p>Zookee per作为一个分布式协调框架，其内部存储了分布式系统运行时状态的元数据，这些元数据会直 接影响基于Zookee per进行构造的分布式系统的运行状态，因此，如何保障系统中数据的安全，从而避 免因误操作所带来的数据随意变更而导致的数据库异常十分重要，在Zookee per中，提供了一套完善的 ACL (Access Control List)权限控制机制来保障数据的安全。</p><p>我们可以从三个方面来理解ACL机制：**权限模式(Scheme)、授权对象(ID)、权限 (Permission)，通常使用<code>scheme: id : permission</code>**来标识一个有效的ACL信息。</p><p><strong>权限模式：Scheme</strong></p><p><strong>权限模式</strong>用来确定权限验证过程中使用的检验策略，有如下四种模式:</p><p><strong>ip</strong></p><p>IP模式就是通过IP地址粒度来进行权限控制，如”i p：192.168.0.110”表示权限控制针对该IP地址， 同时IP模式可以支持按照网段方式进行配置，如”ip ：192.168.0.1&#x2F;24”表示针对192.168.0.*这个网段 进行权限控制。</p><p><strong>Digest</strong></p><p>Digest是最常用的权限控制模式，要更符合我们对权限控制的认识，其使</p><p>用”username: password”形式的权限标识来进行权限配置，便于区分不同应用来进行权限控制。</p><p>当我们通过”username:password”形式配置了权限标识后，Zookeeper会先后对其进行SHA-1加密 和BASE64编码。</p><p><strong>World</strong></p><p>World是一种最开放的权限控制模式，这种权限控制方式几乎没有任何作用，数据节点的访问权限 对所有用户开放，即所有用户都可以在不进行任何权限校验的情况下操作ZooKee per上的数据。 另外，World模式也可以看作是一种特殊的Digest模式，它只有一个权限标识，即”world： anyone”。</p><p><strong>Super</strong></p><p>Super模式，顾名思义就是超级用户的意思，也是一种特殊的Digest模式。在Super模式下，超级 用户可以对任意ZooKee per上的数据节点进行任何操作。</p><p><strong>授权对象：ID</strong></p><p>授权对象指的是权限赋予的用户或一个指定实体，例如IP地址或是机器等。在不同的权限模式下，授 权对象是不同的，表中列出了各个权限模式和授权对象之间的对应关系。</p><p><img src="https://hopestation.top/upload/2020/12/zk14-a5eff3d3afb54e9c985a9fdba4733865.png" alt="zk14.png"></p><p><strong>权限</strong></p><p> 权限就是指那些通过权限检查后可以被允许执行的操作。在ZooKee per中，所有对数据的操作权限分为 以下五大类： </p><ul><li><p>CREATE (C)：数据节点的创建权限，允许授权对象在该数据节点下创建子节点。</p></li><li><p>DELETE (D)： 子节点的删除权限，允许授权对象删除该数据节点的子节点。</p></li><li><p>READ (R):数据节点的读取权限，允 许授权对象访问该数据节点并读取其数据内容或子节点列表等。</p></li><li><p>WRITE (W):数据节点的更新权 限，允许授权对象对该数据节点进行更新操作。</p></li><li><p>ADMIN (A):数据节点的管理权限，允许授权对象 对该数据节点进行ACL相关的设置操作。</p></li></ul><h2 id="5-命令"><a href="#5-命令" class="headerlink" title="5. 命令"></a>5. 命令</h2><p>现在已经搭建起了一个能够正常运行的zookee per服务了，所以接下来，就是来借助客户端来对 zookee per的数据节点进行操作 首先，进入到zookee per的bin目录之后 通过zkClient进入zookee per客户端命令行</p><p>.&#x2F;zkcli.sh 连接本地的zookee per服务器</p><p>.&#x2F;zkCli.sh -server ip:p ort连接指定的服务器</p><p>连接成功之后，系统会输出Zookee per的相关环境及配置信息等信息。输入hel p之后，屏幕会输出可用 的Zookeeper命令，如下图所示</p><p><strong>1、创建节点</strong> </p><p>使用Create命令，可以•创建一个Zookee per节点，如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create [-s][-e] path data acl</span><br></pre></td></tr></table></figure><p>其中，-s或-e分别指定节点特性，顺序或临时节点，若不指定，则创建持久节点；acl用来进行权限控制。</p><p><strong>2、创建顺序节点</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create -s /zk-test 123</span><br></pre></td></tr></table></figure><p>执行完后，就在根节点下创建了一个叫做&#x2F;zk-test的节点，该节点内容就是123，同时可以看到创建的 zk-test节点后面添加了一串数字以示区别</p><p><strong>3、创建临时节点</strong></p><p>使用create -e &#x2F;zk-temp 123命令创建zk-te mp临时节</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create -e /zk-temp 123</span><br></pre></td></tr></table></figure><p>临时节点在客户端会话结束后，就会自动删除，下面使用****quit****命令退出客户端</p><p>再次使用客户端连接服务端，并使用ls &#x2F;命令查看根目录下的节点</p><p>可以看到根目录下已经不存在zk-tem P临时节点了</p><p><strong>4、创建永久节点</strong></p><p>使用 <strong>create &#x2F;zk-p ermanent 123</strong> 命令创建 zk- permanent 永久节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create /zk-permanent 123</span><br></pre></td></tr></table></figure><p>可以看到永久节点不同于顺序节点，不会自动在后面添加一串数字</p><p><strong>5、读取节点</strong> </p><p>与读取相关的命令有ls命令和get命令 ls命令可以列出Zookee per指定节点下的所有子节点，但只能查看指定节点下的第一级的所有子节点;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls path</span><br></pre></td></tr></table></figure><p>其中，path表示的是指定数据节点的节点路径 get命令可以获取Zookee per指定节点的数据内容和属性信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get path</span><br></pre></td></tr></table></figure><p>若获取根节点下面的所有子节点，使用<em><strong>*ls*</strong></em> ****&#x2F;****命令即可</p><p>若想获取&#x2F;zk-permanent的数据内容和属性，可使用如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get /zk-permanent</span><br></pre></td></tr></table></figure><p>我们可以看到，第一行是节点&#x2F;zk-permanent的数据内容，其他几行则是创建该 节点的事务ID (cZxid)、最后一次更新该节点的事务ID (mZxid)和最后一次更新该节点的时间(mtime)等属性信息</p><p><strong>6、更新节点</strong></p><p> 使用set命令，可以更新指定节点的数据内容，用法如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set path data [version]</span><br></pre></td></tr></table></figure><p>其中，data就是要更新的新内容，version表示数据版本，在zookeeper中，节点的数据是有版本概 念的，这个参数用于指定本次更新操作是基于Znode的哪一个数据版本进行的，如将&#x2F;zk-P ermanent节 点的数据更新为456,可以使用如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set /zk-permanent 456</span><br></pre></td></tr></table></figure><p>现在dataVersion已经变为1 了，表示进行了更新</p><p><strong>7、删除节点</strong></p><p>使用delete命令可以删除Zookee per上的指定节点，用法如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete path [version]</span><br></pre></td></tr></table></figure><p>其中version也是表示数据版本，使用<strong>delete &#x2F;zk- permanent</strong>命令即可删除&#x2F;zk-p ermanent节点</p><p>值得注意的是，<strong>若删除节点存在子节点，那么无法删除 该节点，必须先删除子节点，再删除父节点</strong></p><h2 id="6-API"><a href="#6-API" class="headerlink" title="6. API"></a>6. API</h2><p>也就是通过JAVA来操作我们的Zookeeper，而不是直接通过Zookeeper客户端的命令行。</p><p>可以参考这篇文章：<a href="https://www.yuque.com/realskrman/bi4s0n/sf8hyq#VvaWB">https://www.yuque.com/realskrman/bi4s0n/sf8hyq#VvaWB</a></p><h2 id="7-服务器角色"><a href="#7-服务器角色" class="headerlink" title="7. 服务器角色"></a>7. 服务器角色</h2><h3 id="Leader"><a href="#Leader" class="headerlink" title="Leader"></a>Leader</h3><p>Leader服务器是Zookee per集群工作的核心，其主要工作有以下两个:</p><p>(1) 事务请求的唯一调度和处理者，保证集群事务处理的顺序性。</p><p>(2) 集群内部各服务器的调度者。</p><p>\1. 请求处理链</p><p>使用责任链来处理每个客户端的请求是Zookeeper的特色，Leader服务器的请求处理链如下:</p><p><img src="https://hopestation.top/upload/2020/12/zk15-9c0facaf2e564ce9a573eb23b41c805f.png" alt="zk15.png"></p><p>可以看到，从 P re pRequest Processor 到 FinalRequest Processor 前后一共 7个请求处理器组成 了 leader 服务器的请求处理链</p><p>(1) Prep Request Processor。请求预处理器，也是leader服务器中的第一个请求处理器。在Zookee per 中，那些会改变服务器状态的请求称为事务请求(创建节点、更新数据、删除节点、创建会话等)， Prep Request Process。r能够识别出当前客户端请求是否是事务请求。对于事务请求，</p><p>PrepRequestProcess。r处理器会对其进行一系列预处理，如创建请求事务头、事务体、会话检查、ACL 检查和版本检查等。</p><p>(2) ProposalRequestProcessor。事务投票处理器。也是Leader服务器事务处理流程的发起者，对 于非事务性请求，Propo salRequest Process。r会直接将请求转发到Commit Processor处理器，不再做 任何处理，而对于事务性请求，处理将请求转发到Commit Processor外，还会根据请求类型创建对应的 Pro po sal提议，并发送绐所有的Follower服务器来发起一次集群内的事务投票。同时， Propo salRequest Processor还会将事务请求交付绐SyncRequest Processor进行事务日志的记录。</p><p>(3) SyncRequest Processor。事务日志记录处理器。用来将事务请求记录到事务日志文件中，同时 会触发Zookee per进行数据快照。</p><p>(4) AckRequestProcessor。负责在SyncRequestProcessor完成事务日志记录后，向Proposal的投 票收集器发送ACK反馈，以通知投票收集器当前服务器已经完成了对该Proposal的事务日志记录。</p><p>(5) Commit Processor。事务提交处理器。对于非事务请求，该处理器会直接将其交付绐下一级处 理器处理；对于事务请求，其会等待集群内针对Prop osa l的投票直到该Prop osal可被提交，利用 Commit Processor，每个服务器都可以很好地控制对事务请求的顺序处理。</p><p>(6) ToBeCommit Processor。该处理器有一个toBeA pp lied队列，用来存储那些已经被</p><p>Commit Processor处理过的可被提交的P ro posal。其会将这些请求交付绐FinalRequest Processor处理 器处理，待其处理完后，再将其从toBeA PP lied队列中移除。</p><p>(7) FinalRequest Processor。用来进行客户端请求返回之前的操作，包括创建客户端请求的响应, 针对事务请求，该处理器还会负责将事务应用到内存数据库中。</p><h3 id="Follower"><a href="#Follower" class="headerlink" title="Follower"></a>Follower</h3><p>Follower服务器是Zookee per集群状态中的跟随者，其主要工作有以下三个:</p><p>(1)处理客户端非事务性请求(读取数据)，转发事务请求绐Leader服务器。</p><p>(1) 参与事务请求P ro po sa l的投票。</p><p>(2) 参与Leader选举投票。</p><p>和leader—样，Follower也采用了责任链模式组装的请求处理链来处理每一个客户端请求，由于不 需要对事务请求的投票处理，因此Follower的请求处理链会相对简单，其处理链如下</p><p><img src="https://hopestation.top/upload/2020/12/zk16-ec01902ec9ec480fa590415a9f2668b7.png" alt="zk16.png"></p><p>和Leader服务器的请求处理链最大的不同点在于，Follower服务器的第一个处理器换成了 FollowerRequest Processor处理器，同时由于不需要处理事务请求的投票，因此也没有了 P ro po salRequest Processor 处理器。</p><p>  (1) FollowerRequestProcessor 其用作识别当前请求是否是事务请求，若是，那么Follower就会将该请求转发绐Leader服务器， Leader服务器在接收到这个事务请求后，就会将其提交到请求处理链，按照正常事务请求进行处理。</p><p>(2) SendAckRequestProcessor 其承担了事务日志记录反馈的角色，在完成事务日志记录后，会向Leader服务器发送ACK消息以表明自 身完成了事务日志的记录工作</p><h3 id="Observer"><a href="#Observer" class="headerlink" title="Observer"></a>Observer</h3><p>Observer是ZooKee per自3.3.0版本开始引入的一个全新的服务器角色。从字面意思看，该服务器充当 了一个观察者的角色其观察ZooKee per集群的最新状态变化并将这些状态变更同步过来。</p><p>Observer服务器在工作原理上和Follower基本是一致的，对于非事务请求，都可以进行独立的处理，而 对于事务请求，则会转发绐Leader服务器进行处理。和Follower唯一的区别在于，Observer不参与任 何形式的投票，包括事务请求Proposal的投票和Leader选举投票。简单地讲，Observer服务器只提供 非事务服务，通常用于在不影响集群事务处理能力的前提下提升集群的非事务处理能力。</p><p>另外，Observer的请求处理链路和Follower服务器也非常相近,其处理链如下</p><p><img src="https://hopestation.top/upload/2020/12/zk17-7c563f2e61be41219cd7fefea85d7e62.png" alt="zk17.png"></p><p>另外需要注意的一点是，虽然在图中可以看到，Observer服务器在初始化阶段会将</p><p>SyncRequestProcess。r处理器也组装上去，但是在实际运行过程中，Leader服务器不会将事务请求的 投票发送绐Observer服务器。</p><h2 id="8-选举机制"><a href="#8-选举机制" class="headerlink" title="8. 选举机制"></a>8. 选举机制</h2><p><strong>1.初始化Leader选举。</strong></p><p>集群模式特有，Zookeeper首先会根据自身的服务器ID(SID)、最新的</p><p>ZXID (lastLoggedZxid)和当前的服务器epoch (currentEpoch)来生成一个初始化投票，在 初始化过程中，每个服务器都会给自己投票。然后，根据zoo.cfg的配置，创建相应Leader选举算法 实现，Zookeeper提供了三种默认算法(LeaderElection、AuthFastLeaderElection、 FastLeaderElection),可通过zoo.cfg中的electionAlg属性来指定，但现只支持 FastLeaderElection选举算法。在初始化阶段，Zookeeper会创建Leader选举所需的网络I&#x2F;O层 QuorumCnxManager,同时启动对Leader选举端口的监听，等待集群中其他服务器创建连接。</p><p><strong>2.注册JMX服务。</strong></p><p><strong>3</strong> <strong>检测当前服务器状态</strong></p><p>运行期间，Quorum Peer会不断检测当前服务器状态。在正常情况下，Zookee per服务器的状态 在 LOOKING、LEADING、FOLLOWING&#x2F;OBSERVING 之间进行切换。在启动阶段，Quorum Peer 的初始 状态是LOOKING,因此开始进行Leader选举。</p><p><strong>4. Leader 选举</strong></p><p>ZooKee per的Leader选举过程，简单地讲，就是一个集群中所有的机器相互之间进行一系列投 票，选举产生最合适的机器成为Leader,同时其余机器成为Follower或是Observer的集群机器角 色初始化过程。关于Leader选举算法，简而言之，就是集群中哪个机器处理的数据越新(通常我们根 据每个服务器处理过的最大ZXID来比较确定其数据是否更新)，其越有可能成为Leader。当然，如 果集群中的所有机器处理的ZXID—致的话，那么SID最大的服务器成为Leader，其余机器称为 Follower 和 Observer</p><h2 id="9-参考文献"><a href="#9-参考文献" class="headerlink" title="9 参考文献"></a>9 参考文献</h2><ul><li><p><a href="https://www.yuque.com/realskrman/bi4s0n/wrbzgy">https://www.yuque.com/realskrman/bi4s0n/wrbzgy</a> (☆☆☆☆☆)<br>语雀 比较详细 （本文大部分参考了此本章）</p></li><li><p><a href="https://www.cnblogs.com/ultranms/p/9585191.html">https://www.cnblogs.com/ultranms/p/9585191.html</a>  (☆☆☆) 比较详细，目前理解有点难</p></li><li><p><a href="https://www.cnblogs.com/mindzone/p/13448950.html">https://www.cnblogs.com/mindzone/p/13448950.html</a>  (☆☆) 比较基础简洁</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Dubbo + Zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo + Zookeeper</title>
      <link href="/2020/12/08/Dubbo%20+%20Zookeeper-dubbozookeeper/"/>
      <url>/2020/12/08/Dubbo%20+%20Zookeeper-dubbozookeeper/</url>
      
        <content type="html"><![CDATA[<h1 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h1><p>[TOC]</p><hr><blockquote><p>本文可能有点长，之后可能会像其他文章一样做个拆分</p></blockquote><h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h2><p>网站应用的演进：随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，亟需一个治理系统确保架构有条不紊的演进。</p><p><img src="http://dubbo.apache.org/imgs/user/dubbo-architecture-roadmap.jpg" alt="image"></p><h3 id="单一应用架构"><a href="#单一应用架构" class="headerlink" title="单一应用架构"></a>单一应用架构</h3><p>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。</p><h3 id="垂直应用架构"><a href="#垂直应用架构" class="headerlink" title="垂直应用架构"></a>垂直应用架构</h3><p>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，提升效率的方法之一是将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。</p><h3 id="分布式服务架构"><a href="#分布式服务架构" class="headerlink" title="分布式服务架构"></a>分布式服务架构</h3><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键。</p><h3 id="流动计算架构"><a href="#流动计算架构" class="headerlink" title="流动计算架构"></a>流动计算架构</h3><p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键。</p><h2 id="2-Zookeeper安装"><a href="#2-Zookeeper安装" class="headerlink" title="2. Zookeeper安装"></a>2. Zookeeper安装</h2><blockquote><p>介绍的是Windows系统的安装。</p></blockquote><h3 id="2-1-下载"><a href="#2-1-下载" class="headerlink" title="2.1 下载"></a>2.1 下载</h3><p>Dubbo官网<strong>推荐使用</strong>Zookeeper来作为注册中心。先来安装一下Zookeeper</p><p><img src="https://hopestation.top/upload/2020/12/zk01-45a4953ba8a94288956534b951cfbd01.png" alt="zk01"></p><p>点击完 Download后，选择稳定并且最新的版本下载</p><p><img src="https://hopestation.top/upload/2020/12/zk02-8e8cbc4c43744ca784fc170344ba4558.png" alt="zk02"></p><h3 id="2-2-解压"><a href="#2-2-解压" class="headerlink" title="2.2 解压"></a>2.2 解压</h3><p>下载的是一个压缩包，解压后。在该目录下新建一个<code>data</code>文件夹</p><p><img src="https://hopestation.top/upload/2020/12/zk04-4d9d7003a1234061b283de372af0c9c7.png" alt="zk04"></p><p>然后在<code>conf</code>目录下，将<code>zoo_sample.cfg</code>，复制一份命名为<code>zoo.cfg</code></p><p><img src="https://hopestation.top/upload/2020/12/zk03-ccb458291c4f49d6833f3462a9d53d70.png" alt="zk03"></p><p>修改<code>zoo.cfg</code>中<code>dataDir</code>的内容为刚刚建立的文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># the directory where the snapshot is stored.</span></span><br><span class="line"><span class="comment"># do not use /tmp for storage, /tmp here is just </span></span><br><span class="line"><span class="comment"># example sakes.</span></span><br><span class="line">dataDir=../data</span><br></pre></td></tr></table></figure><h3 id="2-3-运行"><a href="#2-3-运行" class="headerlink" title="2.3 运行"></a>2.3 运行</h3><ol><li>在解压目录中的bin目录下运行<code>zkServer.cmd</code>，Zookeeper服务</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E:\apache-zookeeper-3.6.2-bin\apache-zookeeper-3.6.2-bin\bin&gt;zkServer.cmd</span><br></pre></td></tr></table></figure><blockquote><p>需要安装JDK并且环境变量里有<code>JAVA_HOME</code>，不然会提示<code>Java home is not set</code> </p></blockquote><ol start="2"><li>在解压目录中的bin目录下运行<code>zkCli.cmd</code>，Zookeeper客户端</li></ol><p>输入点命令测试一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">WATCHER::</span><br><span class="line">WatchedEvent state:SyncConnected <span class="built_in">type</span>:None path:null</span><br><span class="line">[zk: localhost:2181(CONNECTED) 0] get /</span><br><span class="line">[zk: localhost:2181(CONNECTED) 1] <span class="built_in">ls</span> /</span><br><span class="line">[zookeeper]</span><br><span class="line">[zk: localhost:2181(CONNECTED) 2] create -e /hope 123456</span><br><span class="line">Created /hope</span><br><span class="line">[zk: localhost:2181(CONNECTED) 3] <span class="built_in">ls</span></span><br><span class="line"><span class="built_in">ls</span> [-s] [-w] [-R] path</span><br><span class="line">[zk: localhost:2181(CONNECTED) 4] <span class="built_in">ls</span> /</span><br><span class="line">[hope, zookeeper]</span><br><span class="line">[zk: localhost:2181(CONNECTED) 5] get /hope</span><br><span class="line">123456</span><br></pre></td></tr></table></figure><h2 id="3-HelloWorld"><a href="#3-HelloWorld" class="headerlink" title="3. HelloWorld"></a>3. HelloWorld</h2><blockquote><p>编写一个Dubbo的服务调用例子，此处参考了<a href="https://blog.csdn.net/hemin1003/article/details/96483573">此篇文章</a></p></blockquote><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-1-服务提供者"><a href="#3-1-服务提供者" class="headerlink" title="3.1 服务提供者"></a>3.1 服务提供者</h3><h4 id="3-1-1-提供者-Service"><a href="#3-1-1-提供者-Service" class="headerlink" title="3.1.1 提供者 Service"></a>3.1.1 提供者 Service</h4><p>提供的service方法</p><ul><li><code>DemoService</code>  接口</li><li><code>DemoServiceImpl</code>  实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="keyword">package</span> com.md.demo.service;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">DemoService</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Welcome to Minbo&#x27;s Dubbo demo, Hello &quot;</span> + name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">package</span> com.md.demo.service;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DemoService</span> &#123;</span><br><span class="line">String <span class="title function_">sayHello</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-1-2-提供者-Xml"><a href="#3-1-2-提供者-Xml" class="headerlink" title="3.1.2 提供者 Xml"></a>3.1.2 提供者 Xml</h4><p>编写<code>src\main\resources\providers.xml</code>文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://code.alibabatech.com/schema/dubbo</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置可参考 http://dubbo.io/User+Guide-zh.htm --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 服务提供方应用名，用于计算依赖关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;spring-boot2-dubbo-provider&quot;</span> <span class="attr">owner</span>=<span class="string">&quot;spring-boot2-dubbo-provider&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 定义 zookeeper 注册中心地址及协议 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">&quot;zookeeper&quot;</span> <span class="attr">address</span>=<span class="string">&quot;localhost:2181&quot;</span> <span class="attr">client</span>=<span class="string">&quot;zkclient&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 定义 Dubbo 协议名称及使用的端口，dubbo 协议缺省端口为 20880，如果配置为 -1 或者没有配置 port，则会分配一个没有被占用的端口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;dubbo&quot;</span> <span class="attr">port</span>=<span class="string">&quot;-1&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 声明需要暴露的服务接口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">&quot;com.md.demo.service.DemoService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;demoService&quot;</span> <span class="attr">timeout</span>=<span class="string">&quot;10000&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 和本地 bean 一样实现服务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;demoService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.md.demo.service.DemoServiceImpl&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-服务消费者"><a href="#3-2-服务消费者" class="headerlink" title="3.2 服务消费者"></a>3.2 服务消费者</h3><h4 id="3-2-1-调用提供者的Service"><a href="#3-2-1-调用提供者的Service" class="headerlink" title="3.2.1 调用提供者的Service"></a>3.2.1 调用提供者的Service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试用的 Controller 类；</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DemoService demoService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试 JSON 接口；</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name 名字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult <span class="title function_">testJson</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="comment">//调用 服务提供者的方法</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.demoService.sayHello(name);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>(ResultCode.SUCCESS, result);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-2-消费者-Xml"><a href="#3-2-2-消费者-Xml" class="headerlink" title="3.2.2 消费者 Xml"></a>3.2.2 消费者 Xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://code.alibabatech.com/schema/dubbo</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">   <span class="comment">&lt;!-- 配置可参考 http://dubbo.io/User+Guide-zh.htm --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;spring-boot2-dubbo-consumer&quot;</span> <span class="attr">owner</span>=<span class="string">&quot;spring-boot2-dubbo-consumer&quot;</span> /&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!-- 定义 zookeeper 注册中心地址及协议 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">&quot;zookeeper&quot;</span> <span class="attr">address</span>=<span class="string">&quot;localhost:2181&quot;</span> <span class="attr">client</span>=<span class="string">&quot;zkclient&quot;</span> /&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!-- 生成远程服务代理，可以和本地 bean 一样使用 demoService --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">&quot;demoService&quot;</span> <span class="attr">interface</span>=<span class="string">&quot;com.md.demo.service.DemoService&quot;</span> /&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-Dubbo-Admin"><a href="#4-Dubbo-Admin" class="headerlink" title="4. Dubbo-Admin"></a>4. Dubbo-Admin</h2><p>dubbo-admin 是 dubbo的控制台，具有服务查询、服务治理的功能。（感觉类似Eureka的功能界面）</p><blockquote><p>假如上面的服务提供者还在运行，这里会显示那个服务</p></blockquote><p><img src="https://hopestation.top/upload/2020/12/dz03-ce0506b64c624112bd2a2e2d91234c89.png" alt="dz03"></p><h3 id="4-1-安装"><a href="#4-1-安装" class="headerlink" title="4.1 安装"></a>4.1 安装</h3><blockquote><p>这里是配合我们单机的Zookeeper来，认识一下Dubbo-admin的界面</p></blockquote><h4 id="4-1-1-下载"><a href="#4-1-1-下载" class="headerlink" title="4.1.1 下载"></a>4.1.1 下载</h4><p>​在GitHub上直接搜<code>dubbo admin</code>即可，是Apache的项目，一般第一个就是。然后下载，解压</p><p><img src="https://hopestation.top/upload/2020/12/dz01-4db28b69a93b4d0c9f6c4da12d598254.png" alt="dz01"></p><h4 id="4-1-2-修改配置"><a href="#4-1-2-修改配置" class="headerlink" title="4.1.2 修改配置"></a>4.1.2 修改配置</h4><p>用IDEA打开文件，先修改一些配置</p><p><img src="https://hopestation.top/upload/2020/12/dz02-71995ad5a9a14025a4780e4e59792d79.png" alt="dz02"></p><ol><li>dubbo-admin-develop\dubbo-admin-server\src\main\resources\application.properties</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># centers in dubbo2.7</span></span><br><span class="line"><span class="comment">#-------- 确你的Zookeeper端口是否是2181（默认是的）---------</span></span><br><span class="line"><span class="string">admin.registry.address=zookeeper://127.0.0.1:2181</span></span><br><span class="line"><span class="string">admin.config-center=zookeeper://127.0.0.1:2181</span></span><br><span class="line"><span class="string">admin.metadata-report.address=zookeeper://127.0.0.1:2181</span></span><br><span class="line"><span class="comment"># Dubbo-Admin控制台的登录账号和密码</span></span><br><span class="line"><span class="string">admin.root.user.name=root</span></span><br><span class="line"><span class="string">admin.root.user.password=root</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#compress</span></span><br><span class="line"><span class="string">server.compression.enabled=true</span></span><br><span class="line"><span class="string">server.compression.mime-types=text/css,text/javascript,application/javascript</span></span><br><span class="line"><span class="string">server.compression.min-response-size=10240</span></span><br><span class="line"><span class="comment">#-------增加这句话，来设置dubbo-admin后台的端口是8051</span></span><br><span class="line"><span class="comment">#（默认是8080容易端口占用，设置一个没有被使用的端口即可）</span></span><br><span class="line"><span class="string">server.port=8051</span></span><br></pre></td></tr></table></figure><ol start="2"><li>dubbo-admin-develop\dubbo-admin-ui\vue.config.js</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">const path = require(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  outputDir: <span class="string">&quot;target/dist&quot;</span>,</span><br><span class="line">  lintOnSave: <span class="string">&quot;warning&quot;</span>,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    //-----这个端口应该是随便的，注意也不要使用被占用的端口就行----</span><br><span class="line">    port: 8050,  </span><br><span class="line">    historyApiFallback: &#123;</span><br><span class="line">      rewrites: [</span><br><span class="line">        &#123;from: /.*/, to: path.posix.join(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;index.html&#x27;</span>)&#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    publicPath: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">&#x27;/&#x27;</span>: &#123;</span><br><span class="line">        //-----代理目标：注意与application.properties的server.port保持一致----</span><br><span class="line">        target: <span class="string">&#x27;http://localhost:8051/&#x27;</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">&#x27;^/&#x27;</span>: <span class="string">&#x27;/&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h3 id="4-2-运行"><a href="#4-2-运行" class="headerlink" title="4.2 运行"></a>4.2 运行</h3><h4 id="4-2-1-启动Zookeeper"><a href="#4-2-1-启动Zookeeper" class="headerlink" title="4.2.1 启动Zookeeper"></a>4.2.1 启动Zookeeper</h4><p>在上面zookeeper的解压目录中的<code>bin</code>下运行：<strong>zkServer.cmd</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E:\apache-zookeeper-3.6.2-bin\apache-zookeeper-3.6.2-bin\bin&gt;zkServer.cmd</span><br></pre></td></tr></table></figure><h4 id="4-2-2-启动Dubbo-Admin"><a href="#4-2-2-启动Dubbo-Admin" class="headerlink" title="4.2.2 启动Dubbo-Admin"></a>4.2.2 启动Dubbo-Admin</h4><blockquote><p>新版的是前后端分离架构的。所以前端后端需要分开来运行</p></blockquote><ol><li><p>运行前端：在IDEA的命令行或者本地命令行输入 <code>npm run dev</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#注意是在 dubbo-admin-ui 目录下运行</span></span><br><span class="line">E:\dubbo-admin-develop (1)\dubbo-admin-develop\dubbo-admin-ui&gt;npm run dev</span><br></pre></td></tr></table></figure></li><li><p>运行后端<br>dubbo-admin-develop\dubbo-admin-server\src\main\java\org\apache\dubbo\admin\DubboAdminApplication.java</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#错误结果：</span></span><br><span class="line"><span class="comment">#1.注意先启动Zookeeper，不然会报错 KeeperErrorCode = ConnectionLoss</span></span><br><span class="line">org.apache.curator.CuratorConnectionLossException: KeeperErrorCode = ConnectionLoss</span><br><span class="line"><span class="comment">#2.端口占用 主要端口占用问题</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#正常结果</span></span><br><span class="line">Tomcat started on port(s): 8051 (http) with context path <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><p>4.2.3 访问 <a href="http://localhost:8050/">http://localhost:8050/</a></p><p><img src="https://hopestation.top/upload/2020/12/dz04-7565ee18695040eb919edfd4b7450148.png" alt="dz04"></p><h2 id="5-Dubbo-Monitor"><a href="#5-Dubbo-Monitor" class="headerlink" title="5. Dubbo-Monitor"></a>5. Dubbo-Monitor</h2><blockquote><p>参考自：<a href="https://blog.csdn.net/yz357823669/article/details/80505642">https://blog.csdn.net/yz357823669/article/details/80505642</a></p></blockquote><p>Dubbo-Monitor 主要用来统计服务的调用次数和调用时间，服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心，监控中心则使用数据绘制图表来显示。<br>服务消费方和提供方需要显示开启 Monitor。<br>如果使用 Spring 配置的服务消费方和提供方，则需要在对应 XML 添加下面配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:monitor</span> <span class="attr">protocol</span>=<span class="string">&quot;registry&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>其中 protocol 为“registry”，表示服务提供方和消费方从服务注册中心发现监控中心（Monitor）地址。<br>如果使用的 Dubbo API 方式需要首先创建一个 MonitorConfig 对象。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MonitorConfig monitorConfig = new MonitorConfig();</span><br><span class="line">monitorConfig.setProtocol(&quot;registry&quot;);</span><br></pre></td></tr></table></figure><p>然后调用 <code>reference.setMonitor(monitorConfig);</code> 设置到消费配置对象里面。<br>同样我们下载dubbo源码之后解压打包，这里提供下载<a href="https://download.csdn.net/download/yz357823669/10436895">点我下载</a><br>解压 dubbo-monitor-simple-2.5.10-assembly.tar.gz，进入 dubbo-monitor-simple-2.5.10&#x2F;conf&#x2F; 目录修改 <code>dubbo.properties</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dubbo.container</span>=<span class="string">log4j,spring,registry,jetty</span></span><br><span class="line"><span class="attr">dubbo.application.name</span>=<span class="string">simple-monitor</span></span><br><span class="line"><span class="attr">dubbo.application.owner</span>=<span class="string"></span></span><br><span class="line"><span class="comment">#dubbo.registry.address=multicast://224.5.6.7:1234</span></span><br><span class="line"><span class="attr">dubbo.registry.address</span>=<span class="string">zookeeper://127.0.0.1:2181</span></span><br><span class="line"><span class="comment">#dubbo.registry.address=redis://127.0.0.1:6379</span></span><br><span class="line"><span class="comment">#dubbo.registry.address=dubbo://127.0.0.1:9090</span></span><br><span class="line"><span class="attr">dubbo.protocol.port</span>=<span class="string">7070</span></span><br><span class="line"><span class="attr">dubbo.jetty.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="attr">dubbo.jetty.directory</span>=<span class="string">$&#123;user.home&#125;/monitor</span></span><br><span class="line"><span class="attr">dubbo.charts.directory</span>=<span class="string">$&#123;dubbo.jetty.directory&#125;/charts</span></span><br><span class="line"><span class="attr">dubbo.statistics.directory</span>=<span class="string">$&#123;user.home&#125;/monitor/statistics</span></span><br><span class="line"><span class="attr">dubbo.log4j.file</span>=<span class="string">logs/dubbo-monitor-simple.log</span></span><br><span class="line"><span class="attr">dubbo.log4j.level</span>=<span class="string">WARN</span></span><br></pre></td></tr></table></figure><p>其中 dubbo.registry.address&#x3D;zookeeper:&#x2F;&#x2F;127.0.0.1:2181 设置注册中心地址，这里设置为 ZooKeeper 的地址。<br>dubbo.protocol.port&#x3D;7070，是 Monitor 提供的远程服务监听端口，服务提供者和消费者会调用这个端口提供的服务，发送统计信息到 Monitor。<br>dubbo.charts.directory 和 dubbo.statistics.directory 为 Monitor 本地存放的监控数据文件的位置。<br>dubbo.jetty.port&#x3D;8081，设置 Jetty 容器的监听地址，类似于 Tomcat 的8080端口，这里设置为8081。<br>然后进入 dubbo-monitor-simple-2.5.10&#x2F;bin，执行 <code>start.bat</code> 启动 Monitor：<br><img src="https://img-blog.csdn.net/20180530113841395?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l6MzU3ODIzNjY5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br>至此 Monitor 启动了，访问 <a href="http://127.0.0.1:8081/">http://127.0.0.1:8081/</a> 会出现下面界面：<br><img src="https://img-blog.csdn.net/20180530113918121?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l6MzU3ODIzNjY5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>然后我们就可以使用监控平台做一些事情了。比如服务查看,应用程序查看,调用情况统计<br><strong>注</strong>： Dubbo-Monitor 也不是使用 Dubbo 搭建分布式系统必须的组件，但是它用来统计服务的调用次调和调用时间的监控中心，这些数据有助于系统运维和调优。</p><h2 id="6-常用配置"><a href="#6-常用配置" class="headerlink" title="6. 常用配置"></a>6. 常用配置</h2><blockquote><p>参考自：<a href="https://blog.csdn.net/yz357823669/article/details/83591507">https://blog.csdn.net/yz357823669/article/details/83591507</a></p></blockquote><p>之前我们简单介绍了dubbo配置服务提供者、消费者以及管理平台监控平台，接下来我们再说一下dubbo的其他配置。</p><h3 id="6-1-配置策略"><a href="#6-1-配置策略" class="headerlink" title="6.1 配置策略"></a>6.1 配置策略</h3><h4 id="6-1-1-属性配置"><a href="#6-1-1-属性配置" class="headerlink" title="6.1.1 属性配置"></a>6.1.1 属性配置</h4><p>dubbo可以在<strong>JVM 启动参数</strong>、<strong>dubboXML</strong>、<strong>dubbo.properties</strong> 三个地方配置相关属性,这里我们以端口为例.</p><ul><li>JVM 启动参数<br>我们可以在启动项目时配置VM参数<br><img src="https://img-blog.csdnimg.cn/20181101085628615.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l6MzU3ODIzNjY5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">-Ddubbo.protocol.port</span>=<span class="string">20883</span></span><br></pre></td></tr></table></figure><ul><li>dubboXML</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;dubbo&quot;</span> <span class="attr">port</span>=<span class="string">&quot;20882&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:protocol</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>dubbo.properties</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dubbo.protocol.port</span>=<span class="string">20881</span></span><br></pre></td></tr></table></figure><p><strong>覆盖策略</strong><br><img src="https://img-blog.csdnimg.cn/20181031220111268.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l6MzU3ODIzNjY5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>JVM 启动 -D 参数优先，这样可以使用户在部署和启动时进行参数重写，比如在启动时需改变协议的端口。</p><p>XML 次之，如果在 XML 中有配置，则 dubbo.properties 中的相应配置项无效。</p><p>Properties 最后，相当于缺省值，只有 XML 没有配置时，dubbo.properties 的相应配置项才会生效，通常用于共享公共配置，比如应用名。</p><h4 id="6-1-2-XML配置"><a href="#6-1-2-XML配置" class="headerlink" title="6.1.2 XML配置"></a>6.1.2 XML配置</h4><p>前面介绍了服务提供者接口的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;dubbo:service interface=&quot;com.yz.dubbo.api.IUserService&quot; ref=&quot;userService1&quot; timeout=&quot;1000&quot;&gt;&lt;/dubbo:service&gt;</span><br></pre></td></tr></table></figure><p>当然我们只是把<code>timeout</code> 属性配置在了接口上,而接口中有那么多方法,所以我们还可以具体配置到方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dubbo:service interface=&quot;com.yz.dubbo.api.IUserService&quot; ref=&quot;userService1&quot; &gt;</span><br><span class="line">&lt;dubbo:method name=&quot;getUser&quot; timeout=&quot;2000&quot;&gt;&lt;/dubbo:method&gt;</span><br><span class="line">&lt;/dubbo:service&gt;</span><br><span class="line">123</span><br></pre></td></tr></table></figure><p>这样我们就指定了<code>getUser</code> 方法<code>timeout</code> 属性</p><p>但是服务提供者和消费者有那么多的接口一个一个配置岂不是太麻烦,所以我们可以将一样的配置抽取出来作为服务提供者以及消费者的缺省配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;dubbo:provider timeout=&quot;3000&quot;&gt;&lt;/dubbo:provider&gt;</span><br></pre></td></tr></table></figure><p>以 timeout 为例，显示了配置的查找顺序，其它 retries, loadbalance, actives 等类似</p><ul><li>方法级优先，接口级次之，全局配置再次之。</li><li>如果级别一样，则消费方优先，提供方次之。</li></ul><p><img src="https://img-blog.csdnimg.cn/20181031220932882.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l6MzU3ODIzNjY5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>其中，服务提供方配置，通过 URL 经由注册中心传递给消费方。<br>建议由服务提供方设置超时，因为一个方法需要执行多长时间，服务提供方更清楚，如果一个消费方同时引用多个服务，就不需要关心每个服务的超时设置。</p><h3 id="6-2-启动检查"><a href="#6-2-启动检查" class="headerlink" title="6.2.启动检查"></a>6.2.启动检查</h3><p>Dubbo 缺省会在启动时检查依赖的服务是否可用，不可用时会抛出异常，阻止 Spring 初始化完成，以便上线时，能及早发现问题，默认 check&#x3D;“true”。</p><p>可以通过 check&#x3D;“false” 关闭检查，比如，测试时，有些服务不关心，或者出现了循环依赖，必须有一方先启动。<br><strong>例子</strong><br>当我们没有配置检查属性的时候.只启动消费者,可以看到控制台输出错误信息 <strong>No provider</strong></p><p><img src="https://img-blog.csdnimg.cn/20181101090823935.png" alt="在这里插入图片描述"></p><p>我们配置启动检查<code>check</code>为<code>false</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">interface</span>=<span class="string">&quot;com.yz.dubbo.api.IUserService&quot;</span> <span class="attr">check</span>=<span class="string">&quot;false&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当我们设置<code>check=&quot;false&quot;</code> 时,在没有提供者的情况下,消费者启动是不会报错的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;classpath:customer.xml&quot;</span> &#125;);</span><br><span class="line"><span class="keyword">final</span> <span class="type">IUserService</span> <span class="variable">demoService</span> <span class="operator">=</span> (IUserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(demoService.getUser());</span></span><br><span class="line">System.out.println(<span class="string">&quot;程序运行......&quot;</span>);</span><br><span class="line">System.in.read();</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20181101091728232.png" alt="在这里插入图片描述"><br>,只有在显示调用提供者服务的时候才会报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;classpath:customer.xml&quot;</span> &#125;);</span><br><span class="line"><span class="keyword">final</span> <span class="type">IUserService</span> <span class="variable">demoService</span> <span class="operator">=</span> (IUserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">System.out.println(demoService.getUser());</span><br><span class="line">System.out.println(<span class="string">&quot;程序运行......&quot;</span>);</span><br><span class="line">System.in.read();</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20181101091825618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l6MzU3ODIzNjY5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>可以看到程序报错,就是显示调用 <code>demoService.getUser()</code>这段代码导致的<br><strong>注册中心检查</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dubbo.registry.check</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure><p>我们可以通过以上配置关闭服务提供者消费者对注册中心的检查,这样注册中心挂掉了,我们服务提供者消费者启动也不会报错,只是不能注册服务而已…</p><p><strong>例子</strong><br>当我们的注册中心挂掉的时候,我们启动服务消费者以及提供者是会报错的<br><img src="https://img-blog.csdnimg.cn/20181101093739391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l6MzU3ODIzNjY5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20181101093747325.png" alt="在这里插入图片描述"></p><p>我们只需要配置注册中心不检查,启动就不会报错而且当注册中心重新恢复的时候他们会自动的订阅服务以及注册服务</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">&quot;zookeeper://127.0.0.1:2181&quot;</span> <span class="attr">check</span>=<span class="string">&quot;false&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:registry</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-3-超时时间"><a href="#6-3-超时时间" class="headerlink" title="6.3 超时时间"></a>6.3 超时时间</h3><p>由于网络或服务端不可靠，会导致调用出现一种不确定的中间状态（超时）。为了避免超时导致客户端资源（线程）挂起耗尽，必须设置超时时间。<br>在现实的开发中我们往往一些服务提供者的调用比较耗时,而dubbo的<code>timeout</code>缺省配置为<code>1000</code> 毫秒,也就是说当消费者调用服务提供者一秒钟还没有返回结果,则消费者会报错,如下</p><p><strong>提供者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IUserService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getUser</span><span class="params">()</span> <span class="keyword">throws</span> UserException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> <span class="title class_">User</span>[]&#123;<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>,<span class="string">&quot;yz&quot;</span>,<span class="string">&quot;china&quot;</span>,<span class="string">&quot;hlj&quot;</span>)</span><br><span class="line">                ,<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>,<span class="string">&quot;zwl&quot;</span>,<span class="string">&quot;china&quot;</span>,<span class="string">&quot;ah&quot;</span>)</span><br><span class="line">                ,<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3</span>,<span class="string">&quot;hhj&quot;</span>,<span class="string">&quot;china&quot;</span>,<span class="string">&quot;zj&quot;</span>)&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们模拟耗时,让提供者睡眠三秒钟,接下来启动提供者消费者<br><img src="https://img-blog.csdnimg.cn/20181101094942970.png" alt="在这里插入图片描述"></p><p>可以看到消费者在等待一秒后还没有结果就报错,所以在线上我们可以通过设置timeout来避免提供者服务耗时带来的问题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">&quot;com.yz.dubbo.api.IUserService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userService1&quot;</span> <span class="attr">timeout</span>=<span class="string">&quot;4000&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:service</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20181101095101931.png" alt="在这里插入图片描述"></p><p>消费者在等待三秒后,提供者服务已经被正常调用</p><h3 id="6-4-重试次数"><a href="#6-4-重试次数" class="headerlink" title="6.4 重试次数"></a>6.4 重试次数</h3><p>当我们服务消费者消费出现失败，可通过 <code>retries=&quot;2&quot;</code> 来设置重试次数(不含第一次)，多次调用服务提供者<br><strong>例子</strong><br>首先我们去掉之前的<code>timeout</code> 属性来模拟出错,并加上<code>retries</code> 来实现重试</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">interface</span>=<span class="string">&quot;com.yz.dubbo.api.IUserService&quot;</span> <span class="attr">check</span>=<span class="string">&quot;false&quot;</span> <span class="attr">retries</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br></pre></td></tr></table></figure><p>提供者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;被调用了............&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> <span class="title class_">User</span>[]&#123;<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>,<span class="string">&quot;yz&quot;</span>,<span class="string">&quot;china&quot;</span>,<span class="string">&quot;hlj&quot;</span>)</span><br><span class="line">            ,<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>,<span class="string">&quot;zwl&quot;</span>,<span class="string">&quot;china&quot;</span>,<span class="string">&quot;ah&quot;</span>)</span><br><span class="line">            ,<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3</span>,<span class="string">&quot;hhj&quot;</span>,<span class="string">&quot;china&quot;</span>,<span class="string">&quot;zj&quot;</span>)&#125;);</span><br></pre></td></tr></table></figure><p>接下来我们分别启动服务提供者与消费者,可以看到,我们消费者在调用失败后提供者被调用了四次<br><img src="https://img-blog.csdnimg.cn/20181101100946890.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l6MzU3ODIzNjY5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20181101100954964.png" alt="在这里插入图片描述"></p><h3 id="6-5-多版本"><a href="#6-5-多版本" class="headerlink" title="6.5 多版本"></a>6.5 多版本</h3><p>当一个接口实现，出现不兼容升级时，可以用版本号过渡，版本号不同的服务相互间不引用。</p><p>可以按照以下的步骤进行版本迁移：</p><ol><li>在低压力时间段，先升级一半提供者为新版本</li><li>再将所有消费者升级为新版本</li><li>然后将剩下的一半提供者升级为新版本</li></ol><p>也就实现了dubbo所说的灰度发布</p><p><strong>例子</strong><br>首先我们创建提供者接口两个不同实现</p><p>UserServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getUser</span><span class="params">()</span> <span class="keyword">throws</span> UserException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;被调用了1............&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> <span class="title class_">User</span>[]&#123;<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>,<span class="string">&quot;yz&quot;</span>,<span class="string">&quot;china&quot;</span>,<span class="string">&quot;hlj&quot;</span>)</span><br><span class="line">                ,<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>,<span class="string">&quot;zwl&quot;</span>,<span class="string">&quot;china&quot;</span>,<span class="string">&quot;ah&quot;</span>)</span><br><span class="line">                ,<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3</span>,<span class="string">&quot;hhj&quot;</span>,<span class="string">&quot;china&quot;</span>,<span class="string">&quot;zj&quot;</span>)&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure><p>UserServiceImpl2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getUser</span><span class="params">()</span> <span class="keyword">throws</span> UserException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;被调用了2............&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> <span class="title class_">User</span>[]&#123;<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>,<span class="string">&quot;yz&quot;</span>,<span class="string">&quot;china&quot;</span>,<span class="string">&quot;hlj&quot;</span>)</span><br><span class="line">                ,<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>,<span class="string">&quot;zwl&quot;</span>,<span class="string">&quot;china&quot;</span>,<span class="string">&quot;ah&quot;</span>)</span><br><span class="line">                ,<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3</span>,<span class="string">&quot;hhj&quot;</span>,<span class="string">&quot;china&quot;</span>,<span class="string">&quot;zj&quot;</span>)&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure><p>接下来在<code>provider.xml</code>配置文件中提供者接口实现指向不同的两个类,并指定不同的版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.yz.dubbo.impl.UserServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.yz.dubbo.impl.UserServiceImpl2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">&quot;com.yz.dubbo.api.IUserService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userService1&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.0.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:service</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">&quot;com.yz.dubbo.api.IUserService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userService2&quot;</span> <span class="attr">version</span>=<span class="string">&quot;2.0.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:service</span>&gt;</span></span><br><span class="line">1234567</span><br></pre></td></tr></table></figure><p>在<code>customer.xml</code> 中指定消费者的版本号为<code>1.0.0</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">interface</span>=<span class="string">&quot;com.yz.dubbo.api.IUserService&quot;</span> <span class="attr">check</span>=<span class="string">&quot;false&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.0.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20181101102642292.png" alt="在这里插入图片描述"></p><p>在<code>customer.xml</code> 中指定消费者的版本号为<code>2.0.0</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">interface</span>=<span class="string">&quot;com.yz.dubbo.api.IUserService&quot;</span> <span class="attr">check</span>=<span class="string">&quot;false&quot;</span> <span class="attr">version</span>=<span class="string">&quot;2.0.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20181101102649226.png" alt="在这里插入图片描述"></p><p>可以看到了通过指定版本号分别调用了不同的接口实现,这样在实际开发中就能够实现新旧功能的过度</p><h2 id="7-高可用"><a href="#7-高可用" class="headerlink" title="7. 高可用"></a>7. 高可用</h2><p>之前我们说了dubbo超时重试启动检查等配置,接下来我们说一下dubbo高可用的一些配置</p><h3 id="7-1-zookeeper宕机"><a href="#7-1-zookeeper宕机" class="headerlink" title="7.1 zookeeper宕机"></a>7.1 zookeeper宕机</h3><p>我们接下来讨论一下如果zookeeper宕机对我们的服务提供者消费者有什么影响</p><p><strong>现象</strong>：zookeeper注册中心宕机，<strong>还可以消费dubbo暴露的服务</strong>。</p><p><strong>原因</strong>：</p><ul><li>监控中心宕掉不影响使用，只是丢失部分采样数据</li><li>数据库宕掉后，注册中心仍能通过缓存提供服务列表查询，但不能注册新服务</li><li>注册中心对等集群，任意一台宕掉后，将自动切换到另一台</li><li><strong>注册中心全部宕掉后，服务提供者和服务消费者仍能通过本地缓存通讯</strong></li><li>服务提供者无状态，任意一台宕掉后，不影响使用</li><li>服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复</li></ul><p><strong>高可用：通过设计，减少系统不能提供服务的时间</strong></p><p><strong>例子：</strong></p><p>我们在消费者中睡眠20秒,然后我们在这20秒时间内停掉注册中心,看看第二次消费能否成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> </span><br><span class="line">    &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;classpath:customer.xml&quot;</span> &#125;);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">IUserService</span> <span class="variable">demoService</span> <span class="operator">=</span> (IUserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">            System.out.println(demoService.getUser());</span><br><span class="line">            System.out.println(<span class="string">&quot;程序运行第一次......&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>*<span class="number">20</span>);</span><br><span class="line">            System.out.println(demoService.getUser());</span><br><span class="line">            System.out.println(<span class="string">&quot;程序运行第二次......&quot;</span>);</span><br><span class="line">            System.in.read();</span><br><span class="line">    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="number">1234567891011121314151617</span></span><br></pre></td></tr></table></figure><p>接下来我们一次启动服务提供者 消费者 然后停掉服务注册中心</p><p><img src="https://img-blog.csdnimg.cn/20181101181257530.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l6MzU3ODIzNjY5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>可以看到</p><p><img src="https://img-blog.csdnimg.cn/20181101181310922.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20181101181317918.png" alt="在这里插入图片描述"></p><p>我们的服务消费者在注册中心宕机后让然可以调用服务提供者提供的服务。但是注册中心宕机后我们不能再注册新的服务。</p><h3 id="7-2-Dubbo直连"><a href="#7-2-Dubbo直连" class="headerlink" title="7.2 Dubbo直连"></a>7.2 Dubbo直连</h3><p>在开发及测试环境下，经常需要绕过注册中心，只测试指定服务提供者，这时候可能需要点对点直连，点对点直连方式，将以服务接口为单位，忽略注册中心的提供者列表，A 接口配置点对点，不影响 B 接口从注册中心获取列表。</p><p><strong>注意</strong> 为了避免复杂化线上环境，不要在线上使用这个功能，只应在测试阶段使用。我们可以在开发的时候使用此方式进行调试</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">interface</span>=<span class="string">&quot;com.yz.dubbo.api.IUserService&quot;</span> <span class="attr">check</span>=<span class="string">&quot;false&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.0.0&quot;</span> <span class="attr">url</span>=<span class="string">&quot;dubbo://127.0.0.1:20882&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>基于注解方式可以在 <code>@Reference(url = ..)</code>里来配置</p></blockquote><p>我们启动我们的服务注册中心与服务提供者消费</p><p>发现我们的消费者并没有注册到服务注册中心,但是我们仍然可以调用服务提供者提供的服务</p><p><img src="https://img-blog.csdnimg.cn/20181101181333550.png" alt="在这里插入图片描述"></p><p>我们实现了跨注册中心 直连服务提供者</p><h3 id="7-3-负载均衡"><a href="#7-3-负载均衡" class="headerlink" title="7.3 负载均衡"></a>7.3 负载均衡</h3><p>在集群负载均衡时，Dubbo 提供了多种均衡策略，<strong>默认为 Random 随机调用</strong>。</p><p><strong>负载均衡策略</strong></p><ul><li><p><strong>Random LoadBalance</strong></p><p>随机，按权重设置随机概率。</p></li><li><p><strong>RoundRobin LoadBalance</strong></p><p>轮询，按公约后的权重设置轮询比率。</p></li><li><p><strong>LeastActive LoadBalance</strong></p><p>最少活跃调用数，相同活跃数的随机，活跃数指调用前后计数差。</p></li><li><p><strong>ConsistentHash LoadBalance</strong></p><p>一致性 Hash，相同参数的请求总是发到同一提供者。</p></li></ul><p>接下来我们测试一下默认的随机方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">消费者的xml</span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">&quot;com.yz.dubbo.api.IUserService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userService1&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.0.0&quot;</span> <span class="attr">loadbalance</span>=<span class="string">&quot;random&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:service</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>基于注解方式可以在 <code>@Reference()</code>里的参数来配置</p></blockquote><p>我们启动多个服务提供者,并指定不同的端口号,在实现中通过来区分不同的提供者</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(&quot;被调用了1............&quot;);</span><br><span class="line">System.out.println(&quot;被调用了2............&quot;);</span><br></pre></td></tr></table></figure><p>接下来我们启动多个服务提供者来模拟,并通过Admin控制台中的 倍权 半权 来调节权重 ,结果如下</p><p><img src="https://img-blog.csdnimg.cn/20181101181342991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l6MzU3ODIzNjY5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>接下来我们启动服务消费者模拟消费者多次消费</p><p>我们模拟了六次可以看到控制台输出</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">被调用了0............</span><br><span class="line">被调用了0............</span><br><span class="line">被调用了1............</span><br><span class="line">被调用了0............</span><br><span class="line">被调用了0............</span><br><span class="line">被调用了0............</span><br></pre></td></tr></table></figure><p>实现了调用多个服务提供者,并实现了负载均衡</p><h3 id="7-4-服务降级"><a href="#7-4-服务降级" class="headerlink" title="7.4 服务降级"></a>7.4 服务降级</h3><p>当我服务器的压力比较大的时候,我们可以通过服务降级功能 临时屏蔽某个出错的非关键服务，并定义降级后的返回策略,屏蔽掉不重要的服务如广告服务等,来降低核心业务的压力</p><ul><li><code>mock=force:return+null</code> 表示消费方对该服务的方法调用都直接返回 null 值，不发起远程调用。用来屏蔽不重要服务不可用时对调用方的影响。</li><li>还可以改为 <code>mock=fail:return+null</code> 表示消费方对该服务的方法调用在失败后，再返回 null 值，不抛异常。用来容忍不重要服务不稳定时对调用方的影响。</li></ul><p>我们可以直接在Admin控制台来操作服务降级和容错</p><blockquote><p>在Dubbo-Admin中</p><p><strong>降级</strong>：对应服务消费者中的<strong>屏蔽</strong>功能，相当于<strong>不发起远程调用</strong></p><p><strong>容错</strong>：对应服务消费者中的<strong>容错</strong>功能，正常调用服务提供者，但在提供者报错等<strong>调用失败时，返回null值</strong></p></blockquote><p><strong>屏蔽</strong></p><p>我们屏蔽我们的应用yzcustomer</p><p><img src="https://img-blog.csdnimg.cn/2018110118135232.png" alt="在这里插入图片描述"></p><p>发现提供者并没有调用且返回null<br><img src="https://img-blog.csdnimg.cn/20181101181358912.png" alt="在这里插入图片描述"></p><p><strong>容错</strong></p><p>我们容错我们的应用yzcustomer,并手动使我们的提供者出错,启动服务提供者和消费者</p><p><img src="https://img-blog.csdnimg.cn/20181101181405109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l6MzU3ODIzNjY5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>发现在调用服务提供者出错时,返回null</p><p><img src="https://img-blog.csdnimg.cn/2018110118141162.png" alt="在这里插入图片描述"></p><h3 id="7-5-集群容错"><a href="#7-5-集群容错" class="headerlink" title="7.5 集群容错"></a>7.5 集群容错</h3><h4 id="7-5-1-Dubbo容错方案"><a href="#7-5-1-Dubbo容错方案" class="headerlink" title="7.5.1 Dubbo容错方案"></a>7.5.1 Dubbo容错方案</h4><p>在集群调用失败时，Dubbo 提供了多种容错方案，<strong>默认为 Failover 重试</strong></p><p><strong>Failover Cluster</strong></p><p>失败自动切换，当出现失败，重试其它服务器 。通常用于读操作，但重试会带来更长延迟。可通过 <code>retries=&quot;2&quot;</code> 来设置重试次数(不含第一次)。</p><p><strong>Failfast Cluster</strong></p><p>快速失败，只发起一次调用，失败立即报错。通常用于非幂等性的写操作，比如新增记录。</p><p><strong>Failsafe Cluster</strong></p><p>失败安全，出现异常时，直接忽略。通常用于写入审计日志等操作。</p><p><strong>Failback Cluster</strong></p><p>失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。</p><p><strong>Forking Cluster</strong></p><p>并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，但需要浪费更多服务资源。可通过 <code>forks=&quot;2&quot;</code> 来设置最大并行数。</p><p><strong>Broadcast Cluster</strong></p><p>广播调用所有提供者，逐个调用，任意一台报错则报错 。通常用于通知所有提供者更新缓存或日志等本地资源信息。</p><p><strong>集群模式配置</strong></p><p>按照以下示例在服务提供方和消费方配置集群模式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">cluster</span>=<span class="string">&quot;failsafe&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">cluster</span>=<span class="string">&quot;failsafe&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="7-5-2-整合Hystrix实现容错"><a href="#7-5-2-整合Hystrix实现容错" class="headerlink" title="7.5.2 整合Hystrix实现容错"></a>7.5.2 整合Hystrix实现容错</h4><p>简介：Hystrix旨在通过控制那些访问远程系统、服务和第三方库的节点从而对延迟和故障提供更强大的容错能力，Hystrix具备拥有回退机制和断路器功能的线程和信号隔离、请求缓存和请求打包以及监控和配置等功能。</p><p>1）、在pom文件中导入依赖（服务提供者和服务消费者都需要导入）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">2             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">3             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">4             <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">5         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2）、在主程序启动类上添加@EnableHystrix注解开启服务容错（服务提供者和服务消费者都需要添加）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">package</span> cn.coreqi;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> <span class="keyword">import</span> com.alibaba.dubbo.config.spring.context.annotation.EnableDubbo;</span><br><span class="line"> <span class="number">4</span> <span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"> <span class="number">5</span> <span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"> <span class="number">6</span> <span class="keyword">import</span> org.springframework.cloud.netflix.hystrix.EnableHystrix;</span><br><span class="line"> <span class="number">7</span> </span><br><span class="line"> <span class="number">8</span> <span class="meta">@SpringBootApplication</span></span><br><span class="line"> <span class="number">9</span> <span class="meta">@EnableDubbo</span></span><br><span class="line"><span class="number">10</span> <span class="meta">@EnableHystrix</span>  <span class="comment">//开启服务容错</span></span><br><span class="line"><span class="number">11</span> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootdubboserviceproviderApplication</span> &#123;</span><br><span class="line"><span class="number">12</span> </span><br><span class="line"><span class="number">13</span>     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="number">14</span>         SpringApplication.run(SpringbootdubboserviceproviderApplication.class, args);</span><br><span class="line"><span class="number">15</span>     &#125;</span><br><span class="line"><span class="number">16</span> </span><br><span class="line"><span class="number">17</span> &#125;</span><br></pre></td></tr></table></figure><p>3）、在服务提供者实现类中方法上添加@HystrixCommand注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">package</span> cn.coreqi.service.impl;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> <span class="keyword">import</span> cn.coreqi.entities.User;</span><br><span class="line"> <span class="number">4</span> <span class="keyword">import</span> cn.coreqi.service.UserService;</span><br><span class="line"> <span class="number">5</span> <span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line"> <span class="number">6</span> <span class="keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</span><br><span class="line"> <span class="number">7</span> <span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"> <span class="number">8</span> </span><br><span class="line"> <span class="number">9</span> <span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="number">10</span> <span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="number">11</span> </span><br><span class="line"><span class="number">12</span> <span class="meta">@Component</span>  <span class="comment">//org.springframework.stereotype.Component</span></span><br><span class="line"><span class="number">13</span> <span class="meta">@Service</span>    <span class="comment">//com.alibaba.dubbo.config.annotation.Service</span></span><br><span class="line"><span class="number">14</span> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"><span class="number">15</span> </span><br><span class="line"><span class="number">16</span>     <span class="keyword">private</span> <span class="keyword">static</span> List&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="number">17</span> </span><br><span class="line"><span class="number">18</span>     <span class="keyword">static</span> &#123;</span><br><span class="line"><span class="number">19</span>         users.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>,<span class="string">&quot;fanqi&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">1</span>));</span><br><span class="line"><span class="number">20</span>         users.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>,<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">1</span>));</span><br><span class="line"><span class="number">21</span>         users.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3</span>,<span class="string">&quot;lisi&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">1</span>));</span><br><span class="line"><span class="number">22</span>         users.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">4</span>,<span class="string">&quot;wangwu&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">1</span>));</span><br><span class="line"><span class="number">23</span>     &#125;</span><br><span class="line"><span class="number">24</span>    </span><br><span class="line"><span class="number">25</span><span class="comment">//容错注解</span></span><br><span class="line"><span class="number">26</span>     <span class="meta">@HystrixCommand</span></span><br><span class="line"><span class="number">27</span>     <span class="meta">@Override</span></span><br><span class="line"><span class="number">28</span>     <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getList</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="number">29</span>         <span class="keyword">return</span> users;</span><br><span class="line"><span class="number">30</span>     &#125;</span><br><span class="line"><span class="number">31</span> &#125;</span><br></pre></td></tr></table></figure><p>4）、在服务消费者调用服务提供者的方法上添加@HystrixCommand注解并指定fallbackMethod属性，重写fallbackMethod指定的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">package</span> cn.coreqi.controller;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> <span class="keyword">import</span> cn.coreqi.entities.User;</span><br><span class="line"> <span class="number">4</span> <span class="keyword">import</span> cn.coreqi.service.UserService;</span><br><span class="line"> <span class="number">5</span> <span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"> <span class="number">6</span> <span class="keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</span><br><span class="line"> <span class="number">7</span> <span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"> <span class="number">8</span> <span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"> <span class="number">9</span> <span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="number">10</span> </span><br><span class="line"><span class="number">11</span> <span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="number">12</span> </span><br><span class="line"><span class="number">13</span> <span class="meta">@Controller</span></span><br><span class="line"><span class="number">14</span> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"><span class="number">15</span> </span><br><span class="line"><span class="number">16</span>     <span class="meta">@Reference()</span></span><br><span class="line"><span class="number">17</span>     <span class="keyword">private</span> UserService userService;</span><br><span class="line"><span class="number">18</span> <span class="comment">//添加此注解</span></span><br><span class="line"><span class="number">19</span>     <span class="meta">@HystrixCommand(fallbackMethod = &quot;test1&quot;)</span></span><br><span class="line"><span class="number">20</span>     <span class="meta">@ResponseBody</span></span><br><span class="line"><span class="number">21</span>     <span class="meta">@RequestMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="number">22</span>     <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getUsers</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="number">23</span>         <span class="keyword">return</span> userService.getList();</span><br><span class="line"><span class="number">24</span>     &#125;</span><br><span class="line"><span class="number">25</span> </span><br><span class="line"><span class="number">26</span>     <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="number">27</span>         <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"><span class="number">28</span>     &#125;</span><br><span class="line"><span class="number">29</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h2><h3 id="7-1-配置Dubbo的三种方式"><a href="#7-1-配置Dubbo的三种方式" class="headerlink" title="7.1 配置Dubbo的三种方式"></a>7.1 配置Dubbo的三种方式</h3><ul><li><p><code>dubbo.xml</code>来配置属性，使用<code>@ImportResource</code>导入xml配置文件</p></li><li><p><code>application.properties</code>配置属性，使用<code>@Service</code>注解暴露服务，使用<code>@Reference</code>注解来引用服务</p><blockquote><p>需要在启动类加注解<code>@EnableDubbo</code>来开启Dubbo注解的功能</p></blockquote></li><li><p>使用<code>@Configuration</code> 注解来编写配置类，<code>@Bean</code> 编写对应方法</p></li></ul><h3 id="7-2-回顾"><a href="#7-2-回顾" class="headerlink" title="7.2 回顾"></a>7.2 回顾</h3><p>本文主要介绍了</p><ul><li>Dubbo的背景</li><li>Dubbo和Zookeeper安装</li><li>Dubbo和Zookeeper的整合，创建生成者消费者</li><li>Dubbo-Admin、Dubbo-Monitor界面</li><li>Dubbo的常用配置、高可用配置</li></ul><p>在Dubbo的配置这一块中，其实还有很多。更多的东西可以在官网上进行查看学习</p><p>官网是自带中文版的，还是挺舒服的：<a href="http://dubbo.apache.org/zh/docs/">http://dubbo.apache.org/zh/docs/</a></p><p><img src="https://hopestation.top/upload/2020/12/dz05-8f1b9b9b91f5473faf1cd85b757b39d6.png" alt="dz05"></p><h2 id="8-Peace"><a href="#8-Peace" class="headerlink" title="8. Peace"></a>8. Peace</h2><h3 id="8-1-参考文献"><a href="#8-1-参考文献" class="headerlink" title="8.1 参考文献"></a>8.1 参考文献</h3><ul><li>官网：<a href="http://dubbo.apache.org/%EF%BC%88%E2%98%86%E2%98%86%E2%98%86%E2%98%86%EF%BC%89">http://dubbo.apache.org/（☆☆☆☆）</a></li><li><a href="https://www.cnblogs.com/fanqisoft/category/1395663.html%EF%BC%88%E2%98%86%E2%98%86%E2%98%86%E2%98%86%EF%BC%89">https://www.cnblogs.com/fanqisoft/category/1395663.html（☆☆☆☆）</a></li><li><a href="https://blog.csdn.net/yz357823669/category_8291803.html%EF%BC%88%E2%98%86%E2%98%86%E2%98%86%EF%BC%89">https://blog.csdn.net/yz357823669/category_8291803.html（☆☆☆）</a></li></ul><h4 id="8-2-其他"><a href="#8-2-其他" class="headerlink" title="8.2 其他"></a>8.2 其他</h4><blockquote><p>还有一些不理解的地方，以后再做补充：</p><ul><li>dubbo的本地存根</li><li>Dubbo-admin这个容错按钮和，dubbo整合Hystrix实现容错有什么区别</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Dubbo + Zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ的应用场景</title>
      <link href="/2020/12/04/RabbitMQ%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-rabbitmq%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
      <url>/2020/12/04/RabbitMQ%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-rabbitmq%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
      
        <content type="html"><![CDATA[<p>目录：<br>[TOC]</p><hr><h2 id="12-应用场景"><a href="#12-应用场景" class="headerlink" title="12. 应用场景"></a>12. 应用场景</h2><blockquote><p>应用场景部分转自：杨飞虎的博客 <a href="https://blog.csdn.net/whoamiyang/article/details/54954780">https://blog.csdn.net/whoamiyang/article/details/54954780</a></p></blockquote><h3 id="12-1-背景"><a href="#12-1-背景" class="headerlink" title="12.1.背景"></a>12.1.背景</h3><p>RabbitMQ是一个由erlang开发的AMQP(Advanved Message Queue)的开源实现。</p><h3 id="12-2-应用场景"><a href="#12-2-应用场景" class="headerlink" title="12.2.应用场景"></a>12.2.应用场景</h3><blockquote><p>不单单指<strong>RabbitMQ</strong>，而是指<strong>MQ</strong>（消息队列的应用场景）</p></blockquote><h4 id="12-2-1-异步处理"><a href="#12-2-1-异步处理" class="headerlink" title="12.2.1 异步处理"></a>12.2.1 异步处理</h4><p>场景说明：用户注册后，需要发注册邮件和注册短信,传统的做法有两种1.串行的方式;2.并行的方式<br>(1)串行方式:将注册信息写入数据库后,发送注册邮件,再发送注册短信,以上三个任务全部完成后才返回给客户端。 这有一个问题是,邮件,短信并不是必须的,它只是一个通知,而这种做法让客户端等待没有必要等待的东西.<br><img src="https://img-blog.csdn.net/20170209145852454?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2hvYW1peWFuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>(2)并行方式:将注册信息写入数据库后,发送邮件的同时,发送短信,以上三个任务完成后,返回给客户端,并行的方式能提高处理的时间。<br><img src="https://img-blog.csdn.net/20170209150218755?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2hvYW1peWFuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>假设三个业务节点分别使用50ms,串行方式使用时间150ms,并行使用时间100ms。虽然并性已经提高的处理时间,但是,前面说过,邮件和短信对我正常的使用网站没有任何影响，客户端没有必要等着其发送完成才显示注册成功,英爱是写入数据库后就返回.<br>(3)消息队列<br>引入消息队列后，把发送邮件,短信不是必须的业务逻辑异步处理<br><img src="https://img-blog.csdn.net/20170209150824008?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2hvYW1peWFuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>由此可以看出,引入消息队列后，用户的响应时间就等于写入数据库的时间+写入消息队列的时间(可以忽略不计),引入消息队列后处理后,响应时间是串行的3倍,是并行的2倍。</p><h4 id="12-2-2-应用解耦"><a href="#12-2-2-应用解耦" class="headerlink" title="12.2.2 应用解耦"></a>12.2.2 应用解耦</h4><p>场景：双11是购物狂节,用户下单后,订单系统需要通知库存系统,传统的做法就是订单系统调用库存系统的接口.<br><img src="https://img-blog.csdn.net/20170209151602258?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2hvYW1peWFuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>这种做法有一个缺点:</p><ul><li>当库存系统出现故障时,订单就会失败。(这样马云将少赚好多好多钱^ ^)</li><li>订单系统和库存系统高耦合.<br>引入消息队列<br><img src="https://img-blog.csdn.net/20170209152116530?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2hvYW1peWFuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></li><li>订单系统:用户下单后,订单系统完成持久化处理,将消息写入消息队列,返回用户订单下单成功。</li><li>库存系统:订阅下单的消息,获取下单消息,进行库操作。<br>就算库存系统出现故障,消息队列也能保证消息的可靠投递,不会导致消息丢失(马云这下高兴了).</li></ul><h4 id="12-2-3-流量削峰"><a href="#12-2-3-流量削峰" class="headerlink" title="12.2.3 流量削峰"></a>12.2.3 流量削峰</h4><p>流量削峰一般在秒杀活动中应用广泛<br>场景:秒杀活动，一般会因为流量过大，导致应用挂掉,为了解决这个问题，一般在应用前端加入消息队列。<br>作用:<br>1.可以控制活动人数，超过此一定阀值的订单直接丢弃(我为什么秒杀一次都没有成功过呢^^)<br>2.可以缓解短时间的高流量压垮应用(应用程序按自己的最大处理能力获取订单)<br><img src="https://img-blog.csdn.net/20170209161124911?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2hvYW1peWFuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>1.用户的请求,服务器收到之后,首先写入消息队列,加入消息队列长度超过最大值,则直接抛弃用户请求或跳转到错误页面.<br>2.秒杀业务根据消息队列中的请求信息，再做后续处理.</p><h3 id="12-3-RabbitMQ的系统架构"><a href="#12-3-RabbitMQ的系统架构" class="headerlink" title="12.3 RabbitMQ的系统架构"></a>12.3 RabbitMQ的系统架构</h3><p><img src="https://img-blog.csdn.net/20170209162609150?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2hvYW1peWFuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>几个概念说明:<br>Broker:它提供一种传输服务,它的角色就是维护一条从生产者到消费者的路线，保证数据能按照指定的方式进行传输,<br>Exchange：消息交换机,它指定消息按什么规则,路由到哪个队列。<br>Queue:消息的载体,每个消息都会被投到一个或多个队列。<br>Binding:绑定，它的作用就是把exchange和queue按照路由规则绑定起来.<br>Routing Key:路由关键字,exchange根据这个关键字进行消息投递。<br>vhost:虚拟主机,一个broker里可以有多个vhost，用作不同用户的权限分离。<br>Producer:消息生产者,就是投递消息的程序.<br>Consumer:消息消费者,就是接受消息的程序.<br>Channel:消息通道,在客户端的每个连接里,可建立多个channel.</p>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ（四）</title>
      <link href="/2020/12/04/RabbitMQ%EF%BC%88%E5%9B%9B%EF%BC%89-rabbitmq%E5%9B%9B/"/>
      <url>/2020/12/04/RabbitMQ%EF%BC%88%E5%9B%9B%EF%BC%89-rabbitmq%E5%9B%9B/</url>
      
        <content type="html"><![CDATA[<h2 id="11-SpringBoot整合"><a href="#11-SpringBoot整合" class="headerlink" title="11. SpringBoot整合"></a>11. SpringBoot整合</h2><blockquote><p>与SpringBoot整合本文只展示了复杂的Topic模型代码，其他代码可以访问我的<a href="https://gitee.com/hopestation">Gitee</a></p></blockquote><p>创建Spring项目，完整的目录结构如下：（与topic有关的我已经标注出来了）</p><p><img src="https://hopestation.top/upload/2020/12/boot-mq01-d4874411b0434d1c96712b3543ce227b.png" alt="boot-mq01"></p><p>1.导入依赖<code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.配置文件<code>application.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">rabbitmq_springboot</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="comment">#(your ip address)</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">xx.xx.xx.xx</span> </span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="comment">#(your pwd)</span></span><br><span class="line">    <span class="attr">password:</span></span><br><span class="line">    <span class="comment">#(your virtual host)</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/ems</span></span><br></pre></td></tr></table></figure><p>3.测试类（生产者）<code>TestRabbitMQ.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hopestation;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"><span class="meta">@SpringBootTest(classes = RabbitmqSpringbootApplication.class)</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestRabbitMQ</span> &#123;</span><br><span class="line">    <span class="comment">//注入Rabbit</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Toptic</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTopic</span><span class="params">()</span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;toptics&quot;</span>,<span class="string">&quot;user.save&quot;</span>,<span class="string">&quot;hello toptic&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.消费者<code>TopticConsumer.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hopestation.toptic;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Exchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.QueueBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主题模式 消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopticConsumer</span> &#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消费者1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = &#123;</span></span><br><span class="line"><span class="meta">            @QueueBinding(</span></span><br><span class="line"><span class="meta">                    value = @Queue,//创建临时队列</span></span><br><span class="line"><span class="meta">                    exchange = @Exchange(value = &quot;toptics&quot;,type = &quot;topic&quot;),//绑定交换机</span></span><br><span class="line"><span class="meta">                    key = &#123;&quot;user.*&quot;&#125;//指定路由key数组（这里是主题模式，可以使用通配符）</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">revice1</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="comment">//获取消息</span></span><br><span class="line">        System.err.println(<span class="string">&quot;FanoutConsumer1 get message 【 &quot;</span> + message + <span class="string">&quot; 】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消费者2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = &#123;</span></span><br><span class="line"><span class="meta">          @QueueBinding(</span></span><br><span class="line"><span class="meta">                  value = @Queue,</span></span><br><span class="line"><span class="meta">                  exchange = @Exchange(value = &quot;toptics&quot;,type = &quot;topic&quot;),</span></span><br><span class="line"><span class="meta">                  key = &#123;&quot;user.#&quot;,&quot;order.#&quot;&#125;</span></span><br><span class="line"><span class="meta">          )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">revice2</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;FanoutConsumer2 get message 【 &quot;</span> + message + <span class="string">&quot; 】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ（三）</title>
      <link href="/2020/12/04/RabbitMQ%EF%BC%88%E4%B8%89%EF%BC%89-rabbitmq%E4%B8%89/"/>
      <url>/2020/12/04/RabbitMQ%EF%BC%88%E4%B8%89%EF%BC%89-rabbitmq%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<p>目录：<br>[TOC]</p><h2 id="9-Routing（路由模型）"><a href="#9-Routing（路由模型）" class="headerlink" title="9.Routing（路由模型）"></a>9.Routing（路由模型）</h2><h3 id="9-1模型认识"><a href="#9-1模型认识" class="headerlink" title="9.1模型认识"></a>9.1模型认识</h3><blockquote><p>在<strong>Fanout</strong>模式中，一条消息，会被所有订阅的队列都消费。但是，某些场景下，我们希望不同的消息被不同的队列消费。</p><p>这时就要用到Direct类型的Exchange</p></blockquote><p>在Direct模型下：</p><ul><li>队列与交换机的绑定，不能是任意绑定了，而是要指定一个<code>RoutingKey</code>（路由Key）</li><li>消息的发送方 在想Exchange发送消息时，也必须指定消息的<code>RoutingKey</code></li><li>Exchange不再把消息交给每一个绑定的队列，而是根据消息的<code>RoutingKey</code>进行判断，只有队列的<code>RoutingKey</code>与消息的<code>RoutingKey</code>完全一致，才会接受到消息。</li></ul><p><strong>模型图</strong>：</p><p><img src="https://hopestation.top/upload/2020/12/routing02-21c6f89a89304189ac5c8c9bdabb9d99.png" alt="routing02"></p><p><strong>图解：</strong></p><ul><li>P：生产者，向Exchange发送消息，发送消息时，会指定一个<code>RoutingKey</code></li><li>X：Exchange【交换机】，接受生产者的消息，然后把消息递交给<code>RoutingKey</code>完全匹配的队列</li><li>C1：消费者，其所在队列指定了需要<code>RoutingKey</code>为的<code>error</code>消息</li><li>C2：消费者，其所在队列指定了需要<code>RoutingKey</code>为<code>info</code>、<code>warning</code>、<code>error</code>的消息</li></ul><h3 id="9-2-创建生产者"><a href="#9-2-创建生产者" class="headerlink" title="9.2 创建生产者"></a>9.2 创建生产者</h3><h4 id="9-2-1-编码"><a href="#9-2-1-编码" class="headerlink" title="9.2.1 编码"></a>9.2.1 编码</h4><p>这里与之前的区别主要是：需要指定<code>RoutingKey</code>（路由Key）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> direct;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> utils.RabbitMQUtils;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 路由模式 之 Direct</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Provider</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">//声明交换机</span></span><br><span class="line">        <span class="comment">//参数1 交换机的名称：随便起</span></span><br><span class="line">        <span class="comment">//参数2 交换机的类型：固定的几种类型 direct，topic，headers 和fanout</span></span><br><span class="line">        channel.exchangeDeclare(<span class="string">&quot;logs_direct&quot;</span>,<span class="string">&quot;direct&quot;</span>);</span><br><span class="line">        <span class="comment">//路由Key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">routingKey</span> <span class="operator">=</span> <span class="string">&quot;info&quot;</span>;</span><br><span class="line">        <span class="comment">//发送消息</span></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;logs_direct&quot;</span>,routingKey,<span class="literal">null</span>,(<span class="string">&quot;Info Message And routingKey is &quot;</span> + routingKey).getBytes());</span><br><span class="line">        RabbitMQUtils.closeConnetctionAndChannel(channel,connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-2-2-运行结果"><a href="#9-2-2-运行结果" class="headerlink" title="9.2.2 运行结果"></a>9.2.2 运行结果</h4><p>增加了一个<code>logs_direct</code>的交换机，类型为 <code>direct</code></p><p><img src="https://hopestation.top/upload/2020/12/image-20201203144805945-bcb34d13179d4cf4bba77ec127eb5a55.png" alt="image-20201203144805945"></p><h3 id="9-3-创建消费者"><a href="#9-3-创建消费者" class="headerlink" title="9.3 创建消费者"></a>9.3 创建消费者</h3><h4 id="9-3-1-编码"><a href="#9-3-1-编码" class="headerlink" title="9.3.1 编码"></a>9.3.1 编码</h4><blockquote><p>步骤：</p><ol><li>通道声明交换机 <code>channel.exchangeDeclare(&quot;logs_direct&quot;,BuiltinExchangeType.DIRECT);</code></li><li>创建一个临时队列 <code>channel.queueDeclare().getQueue();</code></li><li>通道与队列绑定 <code>queueBind(queueName,&quot;logs_direct&quot;,&quot;error&quot;);</code></li></ol></blockquote><p><strong>Consumer1（消费者1）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> direct;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> utils.RabbitMQUtils;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 路由模式 之 Direct</span></span><br><span class="line"><span class="comment"> * 消费者</span></span><br><span class="line"><span class="comment"> * 获取路由Key为 info 的消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;logs_direct&quot;</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">//通道声明交换机 参数1 交换机的名字   参数2 交换机的类型与生产者保持一致</span></span><br><span class="line">        <span class="comment">// BuiltinExchangeType.DIRECT 是个枚举 就是 direct</span></span><br><span class="line">        channel.exchangeDeclare(exchangeName,BuiltinExchangeType.DIRECT);</span><br><span class="line">        <span class="comment">//创建一个临时队列</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> channel.queueDeclare().getQueue();</span><br><span class="line">        <span class="comment">//基于RoutingKey绑定队列和交换机</span></span><br><span class="line">        <span class="comment">//参数1 队列名称</span></span><br><span class="line">        <span class="comment">//参数2 交换机名</span></span><br><span class="line">        <span class="comment">//参数3 路由Key</span></span><br><span class="line">        channel.queueBind(queueName,exchangeName,<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        channel.basicConsume(queueName,<span class="literal">true</span>,<span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="built_in">super</span>.handleDelivery(consumerTag, envelope, properties, body);</span><br><span class="line">                System.out.println(<span class="string">&quot;Consumer1 get Message = &gt; 【 &quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(body) + <span class="string">&quot; 】&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Consumer2（消费者2）</strong></p><p>在队列绑定时多绑定了两种类型，其他与消费者1无区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基于RoutingKey绑定队列和交换机</span></span><br><span class="line"><span class="comment">//参数1 队列名称</span></span><br><span class="line"><span class="comment">//参数2 交换机名</span></span><br><span class="line"><span class="comment">//参数3 路由Key</span></span><br><span class="line"><span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;logs_direct&quot;</span>;</span><br><span class="line">channel.queueBind(queueName,exchangeName,<span class="string">&quot;info&quot;</span>);</span><br><span class="line">channel.queueBind(queueName,exchangeName,<span class="string">&quot;warning&quot;</span>);</span><br><span class="line">channel.queueBind(queueName,exchangeName,<span class="string">&quot;error&quot;</span>);</span><br><span class="line"><span class="comment">//下面的代码，变成输出消费者2</span></span><br><span class="line">System.out.println(<span class="string">&quot;Consumer2 get Message = &gt; 【 &quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(body) + <span class="string">&quot; 】&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="9-3-2-查看结果"><a href="#9-3-2-查看结果" class="headerlink" title="9.3.2 查看结果"></a>9.3.2 查看结果</h4><ol><li>先运行两个消费者等待消息，再运行生产者</li></ol><p><strong>Consumer1</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#没有输出</span></span><br></pre></td></tr></table></figure><p><strong>Consumer2</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Consumer2 get Message = &gt; 【 Info Message And routingKey is 【info】 】</span><br></pre></td></tr></table></figure><blockquote><p>因为<strong>Consumer1</strong>只绑定了路由Key【error】，所以接受不到info的消息</p><p><code> channel.queueBind(queueName,&quot;logs_direct&quot;,&quot;error&quot;);</code> </p></blockquote><ol start="2"><li>改变生产者的路由Key为<code>error</code>运行，再来查看结果</li></ol><p><strong>Consumer1</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Consumer1 get Message = &gt; 【 Info Message And routingKey is 【error】 】</span><br></pre></td></tr></table></figure><p><strong>Consumer2</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Consumer2 get Message = &gt; 【 Info Message And routingKey is 【error】 】</span><br></pre></td></tr></table></figure><blockquote><p>因为<strong>Consumer1</strong>、<strong>Consumer2</strong> 都绑定了路由Key【error】，所以都能接受到消息</p><p><code> channel.queueBind(queueName,&quot;logs_direct&quot;,&quot;error&quot;);</code> </p><p>路由Key【waring】同理。</p></blockquote><h2 id="10-Topic-（主题模型）"><a href="#10-Topic-（主题模型）" class="headerlink" title="10. Topic （主题模型）"></a>10. Topic （主题模型）</h2><h3 id="10-1-模型认识"><a href="#10-1-模型认识" class="headerlink" title="10.1 模型认识"></a>10.1 模型认识</h3><p>Topic类型的Exchange与Direct区别：</p><ul><li><p>相同点：都是可以根据RoutingKey把消息路由到不同的队列。</p></li><li><p>不同点：Topic类型的Exchange可以让队列在绑定RoutingKey的时候使用通配符！**</p></li></ul><p>这种模型RoutingKey一般都是由一个或者多个单词组成，多个单词之间以”.”分割。例如：<code>item.insert</code></p><p><img src="https://hopestation.top/upload/2020/12/topic-03491ab2d4234e10b641366315799ec5.png" alt="topic"></p><blockquote><p>简而言之，Topic就是对Direct类型的增强，使用了通配符匹配路由Key。</p></blockquote><h3 id="9-2-创建生产者-1"><a href="#9-2-创建生产者-1" class="headerlink" title="9.2 创建生产者"></a>9.2 创建生产者</h3><h4 id="10-2-1-编码"><a href="#10-2-1-编码" class="headerlink" title="10.2.1 编码"></a>10.2.1 编码</h4><p>代码没有什么改变，主要将<code>Exchange</code>改为<code>Topic</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> topic;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> utils.RabbitMQUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主题模式</span></span><br><span class="line"><span class="comment"> *   创建生产者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Provider</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">//定义 路由key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">routingKey</span> <span class="operator">=</span> <span class="string">&quot;user.save&quot;</span>;</span><br><span class="line">        <span class="comment">//定义 路由名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;topics&quot;</span>;</span><br><span class="line">        <span class="comment">//BuiltinExchangeType.TOPIC 是一个枚举</span></span><br><span class="line">        channel.exchangeDeclare(exchangeName, BuiltinExchangeType.TOPIC);</span><br><span class="line">        <span class="comment">//发布消息</span></span><br><span class="line">        channel.basicPublish(exchangeName,routingKey,<span class="literal">null</span>,(<span class="string">&quot;TOPIC Message And routingKey is 【&quot;</span> + routingKey + <span class="string">&quot;】&quot;</span>).getBytes());</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        RabbitMQUtils.closeConnetctionAndChannel(channel,connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="10-2-2-运行结果"><a href="#10-2-2-运行结果" class="headerlink" title="10.2.2 运行结果"></a>10.2.2 运行结果</h4><p>增加了一个<code>topics</code>的交换机，类型为 <code>topic</code></p><p><img src="https://hopestation.top/upload/2020/12/topic01-f27e552f2a0949d3a8a80bad5f8cb07b.png" alt="topic01"></p><h3 id="10-3-创建消费者"><a href="#10-3-创建消费者" class="headerlink" title="10.3 创建消费者"></a>10.3 创建消费者</h3><h4 id="10-3-1-编码"><a href="#10-3-1-编码" class="headerlink" title="10.3.1 编码"></a>10.3.1 编码</h4><blockquote><p>关键代码：使用通配符 ‘‘*“ 绑定路由key</p><p><code>  String routingKey = &quot;user.*&quot;;</code></p><p><code>     channel.queueBind(queue,exchangeName,routingKey);</code></p></blockquote><p><strong>Consumer1（消费者1）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> utils.RabbitMQUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Topic 主题模式</span></span><br><span class="line"><span class="comment"> *  创建消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;topics&quot;</span>;</span><br><span class="line">        <span class="comment">//*（星号）可以代替一个单词。</span></span><br><span class="line">        <span class="comment">//＃（哈希）可以替代零个或多个单词。</span></span><br><span class="line">        <span class="comment">//user.* 就代表 user 和 1个单词 （比如user.del user.save 但是 user.save.ok 不会匹配）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">routingKey</span> <span class="operator">=</span> <span class="string">&quot;user.*&quot;</span>;</span><br><span class="line">        channel.exchangeDeclare(exchangeName, BuiltinExchangeType.TOPIC);</span><br><span class="line">        <span class="comment">//创建临时队列</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queue</span> <span class="operator">=</span> channel.queueDeclare().getQueue();</span><br><span class="line">        channel.queueBind(queue,exchangeName,routingKey);</span><br><span class="line">        channel.basicConsume(queue,<span class="literal">true</span>,<span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="built_in">super</span>.handleDelivery(consumerTag, envelope, properties, body);</span><br><span class="line">                System.out.println(<span class="string">&quot;Consumer1 get Message = &gt; 【 &quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(body) + <span class="string">&quot; 】&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Consumer2（消费者2）</strong></p><p>使用通配符 ‘‘#“ 绑定路由key，其他重复代码就不贴了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">routingKey</span> <span class="operator">=</span> <span class="string">&quot;user.*&quot;</span>;</span><br><span class="line">channel.queueBind(queue,exchangeName,routingKey);</span><br></pre></td></tr></table></figure><h4 id="9-3-2-查看结果-1"><a href="#9-3-2-查看结果-1" class="headerlink" title="9.3.2 查看结果"></a>9.3.2 查看结果</h4><ol><li><p>先运行两个消费者等待消息，再运行生产者</p></li><li><p>生产者分别指定<strong>routingKey</strong>为<code>user.save</code> , <code>user.save.ok</code> , <code>user</code>。运行了三次结果如下：</p></li></ol><p><strong>Consumer1</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Consumer1 get Message = &gt; 【 TOPIC Message And routingKey is 【user.save】 】</span><br></pre></td></tr></table></figure><p><strong>Consumer2</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Consumer2 get Message = &gt; 【 TOPIC Message And routingKey is 【user.save】 】</span><br><span class="line">Consumer2 get Message = &gt; 【 TOPIC Message And routingKey is 【user.save.ok】 】</span><br><span class="line">Consumer2 get Message = &gt; 【 TOPIC Message And routingKey is 【user】 】</span><br></pre></td></tr></table></figure><blockquote><p>因为<strong>Consumer1</strong>只绑定了路由Key 【user.*】;，所以接受不到第2、3条消息</p><p>而<strong>Consumer2</strong>绑定了路由Key 【user.#】;，所以都能接受</p><p>也可以自己再尝试其他 routingKey 和 通配符进行结果的验证</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ（二）</title>
      <link href="/2020/12/02/RabbitMQ%EF%BC%88%E4%BA%8C%EF%BC%89-rabbitmq%E4%BA%8C/"/>
      <url>/2020/12/02/RabbitMQ%EF%BC%88%E4%BA%8C%EF%BC%89-rabbitmq%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<p>目录：<br>[TOC]</p><hr><blockquote><p>上一篇，介绍了Rabbit的概念和安装。这一篇来说MQ的工作模型</p></blockquote><h2 id="6-HelloWorld（直连模型）"><a href="#6-HelloWorld（直连模型）" class="headerlink" title="6.HelloWorld（直连模型）"></a>6.HelloWorld（直连模型）</h2><p>官网给的向导有这么一张图</p><p><img src="https://hopestation.top/upload/2020/12/rabbitmq-type-50832a08a000481794fbe2fc130306cb.png" alt="img"></p><p>咱们就先来学习一下第一个<strong>HelloWorld（直连模型）</strong>，模型是这样的：</p><p><img src="https://hopestation.top/upload/2020/12/image-20201201172023861-f3631f5bb36f4bdd973e48a91b40f9d6.png" alt="image20201201172023861.png"></p><p>在上述模型中有以下概念：</p><ul><li>P：生产者，发送消息的程序</li><li>C：消费者，取出消息，一直等待消息的到来</li><li>queue：消息队列，类似一个邮箱，可以缓存消息。生产者向其中投递消息，消费者从中取出消息</li></ul><p>使用场景：比如注册用户发短信的时候，可以使用这种简单的模型</p><h3 id="6-1-准备工作"><a href="#6-1-准备工作" class="headerlink" title="6.1 准备工作"></a>6.1 准备工作</h3><p>首先，需要</p><ul><li>一个用户。本例是<code>admin</code></li><li>一个虚拟主机（且这个用户有权访问这个虚拟主机）。本例是<code>/ems</code></li></ul><blockquote><p>假如是按着上面操作到这里的，这些已经完成了。（消息队列不需要建）</p><p>另：我是把MQ部署在了我的Linux服务器上，所以Linux服务器还要开放<code>5672</code>端口，不然会导致：</p><p>&#x3D;&#x3D;&gt; java 连接消息队列 Connection timed out: connect 的异常</p></blockquote><h3 id="6-2-创建生产者"><a href="#6-2-创建生产者" class="headerlink" title="6.2 创建生产者"></a>6.2 创建生产者</h3><h4 id="6-2-1-编码"><a href="#6-2-1-编码" class="headerlink" title="6.2.1 编码"></a>6.2.1 编码</h4><ol><li><p>创建一个Maven项目，目录结构如下：<br><img src="https://hopestation.top/upload/2020/12/01-540da0db8a1548bda1805fa6964f028f.png" alt="image-20201201161900873"></p></li><li><p>POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-simple<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>写个Provider类，在helloworld包下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> helloworld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Provider</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生产消息</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessage</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建连接工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">//设置连接rabbitmq的主机</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;39.105.45.81&quot;</span>);</span><br><span class="line">        <span class="comment">//设置连接的端口号</span></span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">//设置连接的虚拟主机</span></span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/ems&quot;</span>);</span><br><span class="line">        <span class="comment">//设置访问虚拟主机的用户名密码</span></span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;你的密码&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取连接对象</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> connectionFactory.newConnection();</span><br><span class="line">        <span class="comment">//获取连接的通道对象</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">       <span class="comment">//通道绑定消息队列</span></span><br><span class="line">        <span class="comment">//参数1：队列名称 如果不存在则还会自动创建</span></span><br><span class="line">        <span class="comment">//参数2：durable 用来定义队列特性：队列（不包括消息）是否要持久化 true 持久化队列 false不持久化</span></span><br><span class="line">        <span class="comment">// （若持久化，在mq重启后还队列会存在，false则就不存在了） 注意：无论true false队列里的消息都会消失</span></span><br><span class="line">        <span class="comment">//参数3：exclusive 是否独占队列，true 这个队列只允许当前连接可用 false其他连接也可用</span></span><br><span class="line">        <span class="comment">//实际开发一般设为 false，期望多个连接共享一个队列</span></span><br><span class="line">        <span class="comment">//参数4：autoDelete 是否在消费完成后自动删除队列 true自动删除 false 不知道删除</span></span><br><span class="line">        <span class="comment">//当为true时，1.全部消费完成后，2.且没有消费者进行监听（断开连接）时，==》队列会被自动删除</span></span><br><span class="line">        <span class="comment">//参数5 额外附加参数</span></span><br><span class="line">        <span class="comment">//这里只是声明队列，消息不一定是向这里发送的。生产者和消费者要保持一致</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;hello&quot;</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发布消息 </span></span><br><span class="line">        <span class="comment">//参数1：交换机名称 参数2 队列名称 参数3 传递消息额外设置 参数4 消息的具体内容</span></span><br><span class="line">        <span class="comment">//参数2：这才是消息真正发送到的队列</span></span><br><span class="line">        <span class="comment">//参数3 为：MessageProperties.PERSISTENT_TEXT_PLAIN 表示消息持久化（前提队列也要持久化），然后重启MQ，消息依旧存在</span></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>,<span class="string">&quot;hello&quot;</span>,<span class="literal">null</span>,<span class="string">&quot;hello rabbitmq&quot;</span>.getBytes());</span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**声明消息队列的源代码注释</span></span><br><span class="line"><span class="comment">     * Like &#123;<span class="doctag">@link</span> Channel#queueDeclare(String, boolean, boolean, boolean, java.util.Map)&#125; but sets nowait</span></span><br><span class="line"><span class="comment">     * flag to true and returns no result (as there will be no response from the server).</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queue the name of the queue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> durable true if we are declaring a durable queue (the queue will survive a server restart)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exclusive true if we are declaring an exclusive queue (restricted to this connection)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> autoDelete true if we are declaring an autodelete queue (server will delete it when no longer in use)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arguments other properties (construction arguments) for the queue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> java.io.IOException if an error is encountered</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// void queueDeclareNoWait(String queue, boolean durable, boolean exclusive, boolean autoDelete,</span></span><br><span class="line">    <span class="comment">//                            Map&lt;String, Object&gt; arguments) throws IOException;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="6-2-2-查看结果"><a href="#6-2-2-查看结果" class="headerlink" title="6.2.2 查看结果"></a>6.2.2 查看结果</h4><ul><li>运行</li></ul><p><img src="https://hopestation.top/upload/2020/12/image-20201201162432634-17ef489f3979400db952015bb71609bb.png" alt="image20201201162432634.png"></p><ul><li><p>控制台结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#程序没有报异常，正常结束就说明成功了^_^</span></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure></li><li><p>管理界面显示结果</p><p><img src="https://hopestation.top/upload/2020/12/mqweb02-1def5414a86f4511aa5beb66c2082708.png" alt="img"></p></li></ul><blockquote><p>我运行了两次，所以消息总数是2。</p></blockquote><h3 id="6-3-创建消费者"><a href="#6-3-创建消费者" class="headerlink" title="6.3 创建消费者"></a>6.3 创建消费者</h3><h4 id="6-3-1-编码"><a href="#6-3-1-编码" class="headerlink" title="6.3.1 编码"></a>6.3.1 编码</h4><p>创建一个Consumer类，也是在helloworld包下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> helloworld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建连接工厂</span></span><br><span class="line">            <span class="type">ConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">            connectionFactory.setHost(<span class="string">&quot;39.105.45.81&quot;</span>);</span><br><span class="line">            connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">            connectionFactory.setVirtualHost(<span class="string">&quot;/ems&quot;</span>);</span><br><span class="line">            connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">            connectionFactory.setPassword(<span class="string">&quot;qeeq741&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建连接对象</span></span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> connectionFactory.newConnection();</span><br><span class="line">            <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">            channel.queueDeclare(<span class="string">&quot;hello&quot;</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">            <span class="comment">//消费消息</span></span><br><span class="line">            <span class="comment">//参数1： 消费的的那个队列的名称</span></span><br><span class="line">            <span class="comment">//参数2：开始消息的自动确认机制</span></span><br><span class="line">            <span class="comment">//参数3：消费时的回调接口</span></span><br><span class="line">            channel.basicConsume(<span class="string">&quot;hello&quot;</span>,<span class="literal">true</span>, <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                    <span class="built_in">super</span>.handleDelivery(consumerTag, envelope, properties, body);</span><br><span class="line">                    System.out.println(<span class="string">&quot;body = &quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">//假如不关闭就可以一直消费消息</span></span><br><span class="line"><span class="comment">//        channel.close();</span></span><br><span class="line"><span class="comment">//        connection.close();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里就不能在Test里写了</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testConsumer</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-3-2-查看结果"><a href="#6-3-2-查看结果" class="headerlink" title="6.3.2 查看结果"></a>6.3.2 查看结果</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">body = hello rabbitmq</span><br><span class="line">body = hello rabbitmq</span><br><span class="line"><span class="comment">#再运行一次 Provider 发送“body = hello rabbitmq 第三个”</span></span><br><span class="line"><span class="comment">#消费者也会收到这个新消息</span></span><br><span class="line">body = hello rabbitmq 第三个</span><br></pre></td></tr></table></figure><blockquote><p>注意在Consumer里，连接是没有关闭的。<br>这时可以再运行一次生产者，消费者也能立即消费这个新消息。</p></blockquote><h3 id="6-4-优化代码"><a href="#6-4-优化代码" class="headerlink" title="6.4 优化代码"></a>6.4 优化代码</h3><p>由于生产者和和消费者都来创建<code>ConnectionFactory</code>，比较浪费时间，又是相同的冗余代码。</p><p>这里将<strong>创建工厂</strong>，和<strong>关闭资源</strong>的方法封装成了<code>RabbitMQUtils</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> utils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ConnectionFactory connectionFactory;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//重量级及资源， 类加载时只执行一次</span></span><br><span class="line">        connectionFactory = <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;39.105.45.81&quot;</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/ems&quot;</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;qeeq741&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供创建连接的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> connectionFactory.newConnection();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭连接的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeConnetctionAndChannel</span><span class="params">(Channel channel,Connection connection)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(channel!=<span class="literal">null</span>) &#123;</span><br><span class="line">                channel.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(connection!=<span class="literal">null</span>) &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>所以Provider、Consumer就可以直接调用<code>RabbitMQUtils</code>了。替换比较简单，这里就不再粘贴代码了。<br>我的Gitee会有这部分的代码，可以在那里查看。</p></blockquote><h2 id="7-Work-Queues（工作队列）"><a href="#7-Work-Queues（工作队列）" class="headerlink" title="7. Work Queues（工作队列）"></a>7. Work Queues（工作队列）</h2><h3 id="7-1-模型认识"><a href="#7-1-模型认识" class="headerlink" title="7.1 模型认识"></a>7.1 模型认识</h3><p>第二个 <strong>Work Queues（工作队列）</strong>模型是这样的：</p><p><img src="https://hopestation.top/upload/2020/12/image-20201202151120941-e034e7e842d944a8bfaf7e3db428d078.png" alt="image20201202151120941.png"></p><p>与第一种模型很相似，只不过有多个消费者来共同处理队列里的消息。</p><p>使用场景：一般在处理队列的任务比较耗时时使用这种模型</p><h3 id="7-2-编码"><a href="#7-2-编码" class="headerlink" title="7.2 编码"></a>7.2 编码</h3><p><strong>创建生产者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取连接对象</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> RabbitMQUtils.getConnection();</span><br><span class="line"><span class="comment">//获取通道对象</span></span><br><span class="line"><span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"><span class="comment">//通过通道，声明工作队列</span></span><br><span class="line">channel.queueDeclare(<span class="string">&quot;work&quot;</span>,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line"><span class="comment">//循环生产消息</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    channel.basicPublish(<span class="string">&quot;&quot;</span>,<span class="string">&quot;work&quot;</span>,<span class="literal">null</span>,(<span class="string">&quot;Message 【&quot;</span> + i + <span class="string">&quot;】&quot;</span>).getBytes());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;send ok&quot;</span>);</span><br><span class="line"><span class="comment">//关闭资源</span></span><br><span class="line">RabbitMQUtils.closeConnetctionAndChannel(channel,connection);</span><br></pre></td></tr></table></figure><p><strong>创建消费者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">**</span><br><span class="line"> * 第一个消费者</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获取连接对象</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;work&quot;</span>,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        channel.basicConsume(<span class="string">&quot;work&quot;</span>,<span class="literal">true</span>,<span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="built_in">super</span>.handleDelivery(consumerTag, envelope, properties, body);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; Consumer1 get message = &quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第二个消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获取连接对象</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;work&quot;</span>,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        channel.basicConsume(<span class="string">&quot;work&quot;</span>,<span class="literal">true</span>,<span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="built_in">super</span>.handleDelivery(consumerTag, envelope, properties, body);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; Consumer2 get message = &quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-3-查看结果"><a href="#7-3-查看结果" class="headerlink" title="7.3 查看结果"></a>7.3 查看结果</h3><blockquote><p>最好先运行两个消费者，在运行生产者。效果明显。</p></blockquote><p><strong>生产者</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#发送完毕</span></span><br><span class="line">send ok</span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><p><strong>消费者1</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pool-1-thread-4 Consumer1 get message = Message 【0】</span><br><span class="line">pool-1-thread-4 Consumer1 get message = Message 【2】</span><br><span class="line">pool-1-thread-4 Consumer1 get message = Message 【4】</span><br><span class="line">pool-1-thread-4 Consumer1 get message = Message 【6】</span><br><span class="line">pool-1-thread-4 Consumer1 get message = Message 【8】</span><br></pre></td></tr></table></figure><p><strong>消费者2</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pool-1-thread-4 Consumer2 get message = Message 【1】</span><br><span class="line">pool-1-thread-4 Consumer2 get message = Message 【3】</span><br><span class="line">pool-1-thread-4 Consumer2 get message = Message 【5】</span><br><span class="line">pool-1-thread-4 Consumer2 get message = Message 【7】</span><br><span class="line">pool-1-thread-4 Consumer2 get message = Message 【9】</span><br></pre></td></tr></table></figure><p>消费者1：0 2 4 6 8 </p><p>消费者2：1 3 5 7 9</p><p>当我们不断改变生产者，发送消息的数量时，发现消费者1和消费者2总是一个挨着一个的消费消息。</p><blockquote><p>官网的解释：</p><p>By default, RabbitMQ will send each message to the next consumer, in sequence. On average every consumer will get the same number of messages. This way of distributing messages is called round-robin. Try this out with three or more workers.</p><p>翻译：</p><p>默认情况下，RabbitMQ将按顺序将每条消息发送到下一个使用者。平均每个消费者将收到相同数量的消息。这种分发消息的方式称为循环（轮询）。和三个或更多的工人一起试试这个</p></blockquote><p>也就是说多个消费者的情况，默认是一个替着一个循环，平均消费队列里的消息的。</p><blockquote><p>比如队列里有消息：123456789…  有三个消费者<br>消费者1：147..<br>消费者2：258..<br>消费者3：369..<br>多个消费者 以此类推。</p></blockquote><h2 id="8-Fanout（扇出-广播）"><a href="#8-Fanout（扇出-广播）" class="headerlink" title="8. Fanout（扇出|广播）"></a>8. Fanout（扇出|广播）</h2><p>第三个 <strong>Work Fanout（广播模式</strong> 模型是这样的：</p><p><img src="https://hopestation.top/upload/2020/12/fanout-ca0996df1c43454a9a79595e692cf299.png" alt="fanout"></p><p>在广播模式下，有以下约定：</p><ul><li>可以有多个消费者</li><li>每个消费者有自己的Queue（队列）</li><li>每个队列都要绑定到Exchange（交换机）</li><li>生产者发送的消息，只能发送到交换机，交换机来决定要发送给哪个队列，生产者无法决定</li><li>交换机把消息发给绑定过的所有队列</li><li>队列的消费者都能拿到消息。实现<strong>一条消息被多个消费者消费</strong></li></ul><p>数据的流向如图的箭头所示。</p><blockquote><p>官网的解释：</p><p>让我们快速回顾一下先前教程中介绍的内容：</p><ul><li>甲<em>生产者</em>是发送消息的用户的应用程序。</li><li>甲<em>队列</em>是一个缓冲区，用于存储消息。</li><li>甲<em>消费者</em>是接收消息的用户的应用程序。</li></ul><p>RabbitMQ消息传递模型中的核心思想是生产者从不将任何消息直接发送到队列。实际上，生产者经常甚至根本不知道是否将消息传递到任何队列。</p><p>相反，生产者只能将消息发送到<em>交换机</em>。交流是一件非常简单的事情。一方面，它接收来自生产者的消息，另一方面，将它们推入队列。交换必须确切知道如何处理收到的消息。是否应将其附加到特定队列？是否应该将其附加到许多队列中？还是应该丢弃它。规则由<em>交换类型</em>定义 。</p><p><img src="https://www.rabbitmq.com/img/tutorials/exchanges.png" alt="img"></p><p>有几种交换类型可用：direct，topic，headers 和fanout。</p></blockquote><h3 id="8-1-创建生产者"><a href="#8-1-创建生产者" class="headerlink" title="8.1 创建生产者"></a>8.1 创建生产者</h3><h4 id="8-1-1-编码"><a href="#8-1-1-编码" class="headerlink" title="8.1.1 编码"></a>8.1.1 编码</h4><blockquote><p>生产者的编码和以前的区别：</p><ol><li>需要绑定交换机 <code> channel.exchangeDeclare(&quot;logs&quot;,&quot;fanout&quot;);</code></li><li>消息放入交换机中 <code>channel.basicPublish(&quot;logs&quot;,&quot;&quot;,null,&quot;my fanout message&quot;.getBytes());</code></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fanout;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> utils.RabbitMQUtils;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扇出模式的生产者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Provider</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="comment">//获取通道</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">//将通道声明交换机</span></span><br><span class="line">        <span class="comment">//参数1 交换机的名称：随便起</span></span><br><span class="line">        <span class="comment">//参数2 交换机的类型：固定的几种类型 direct，topic，headers 和fanout</span></span><br><span class="line">        channel.exchangeDeclare(<span class="string">&quot;logs&quot;</span>,<span class="string">&quot;fanout&quot;</span>);</span><br><span class="line">        <span class="comment">//发送消息</span></span><br><span class="line">        <span class="comment">//广播模式时参数的填写</span></span><br><span class="line">        <span class="comment">// 参数1 交换机名称要写</span></span><br><span class="line">        <span class="comment">// 参数2 路由key不需要指定，空字符串就行</span></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;logs&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="literal">null</span>,<span class="string">&quot;my fanout message&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        RabbitMQUtils.closeConnetctionAndChannel(channel,connection);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>与之前不同的主要是这两处代码：</p><ul><li><code>channel.exchangeDeclare(&quot;logs&quot;,&quot;fanout&quot;);</code>声明交换机</li><li><code> channel.basicPublish(&quot;logs&quot;,&quot;&quot;,null,&quot;my fanout message&quot;.getBytes());</code>参数设置</li></ul><h4 id="8-1-2-运行结果"><a href="#8-1-2-运行结果" class="headerlink" title="8.1.2 运行结果"></a>8.1.2 运行结果</h4><p><img src="https://hopestation.top/upload/2020/12/image-20201203125509743-912e54a35be0488688ab8aa065a382f2.png" alt="image-20201203125509743"></p><p>然后再界面中 显示出了一个新的交换机<code>logs</code>。type为<code>fanout</code></p><h3 id="8-2-创建消费者"><a href="#8-2-创建消费者" class="headerlink" title="8.2 创建消费者"></a>8.2 创建消费者</h3><h4 id="8-2-1-编码"><a href="#8-2-1-编码" class="headerlink" title="8.2.1 编码"></a>8.2.1 编码</h4><p>实际代码，一共创建了三个消费者 <code>Consumer1 </code>、<code>Consumer2</code>、<code>Consumer3 </code></p><p>这里只贴出<code>Consumer1 </code>的代码，其他两个消费者类似</p><blockquote><p>消费者的编码和以前的区别：</p><ol><li>需要绑定交换机 <code> channel.exchangeDeclare(&quot;logs&quot;,&quot;fanout&quot;);</code></li><li>创建临时队列 <code>channel.queueDeclare().getQueue();</code></li><li>绑定临时队列 <code> channel.queueBind(queueName,&quot;logs&quot;,&quot;&quot;);</code></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fanout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> utils.RabbitMQUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扇出模式的消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">//通道绑定交换机</span></span><br><span class="line">        channel.exchangeDeclare(<span class="string">&quot;logs&quot;</span>,<span class="string">&quot;fanout&quot;</span>);</span><br><span class="line">        <span class="comment">//临时队列</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> channel.queueDeclare().getQueue();</span><br><span class="line">        <span class="comment">//绑定交换机和队列</span></span><br><span class="line">        channel.queueBind(queueName,<span class="string">&quot;logs&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">//消费消息</span></span><br><span class="line">        channel.basicConsume(queueName,<span class="literal">true</span>,<span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="built_in">super</span>.handleDelivery(consumerTag, envelope, properties, body);</span><br><span class="line">                System.out.println(<span class="string">&quot;Consumer1 get Message ==&gt;  【 &quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(body) + <span class="string">&quot; 】&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>写其他消费者时,这句话打印的消费者记得换成2和3，以免造成误会</p><p><code>System.out.println(&quot;Consumer1 get Message ==&gt;  【 &quot; + new String(body) + &quot; 】&quot;);</code></p><h4 id="8-2-2-查看结果"><a href="#8-2-2-查看结果" class="headerlink" title="8.2.2 查看结果"></a>8.2.2 查看结果</h4><p>**Consumer1 **</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Consumer1 get Message ==&gt;  【 my fanout message 】</span><br></pre></td></tr></table></figure><p>**Consumer2 **</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Consumer2 get Message ==&gt;  【 my fanout message 】</span><br></pre></td></tr></table></figure><p>**Consumer3 **</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Consumer3 get Message ==&gt;  【 my fanout message 】</span><br></pre></td></tr></table></figure><p>也就是说<strong>三个消费者都收到了消息队列里的同一条消息</strong>。</p><hr><ul><li>以上就是Helloworld、WorkQueue、Fanout模式的介绍</li><li><a href="https://hopestation.top/archives/rabbitmq03">下一篇</a> 来介绍<strong>路由模式</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ（一）</title>
      <link href="/2020/12/02/RabbitMQ%EF%BC%88%E4%B8%80%EF%BC%89-rabbitmq%E4%B8%80/"/>
      <url>/2020/12/02/RabbitMQ%EF%BC%88%E4%B8%80%EF%BC%89-rabbitmq%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p>目录：</p><p>[TOC]</p><hr><h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><h2 id="1-MQ是什么"><a href="#1-MQ是什么" class="headerlink" title="1. MQ是什么"></a>1. MQ是什么</h2><h3 id="1-1-Message-Queue"><a href="#1-1-Message-Queue" class="headerlink" title="1.1 Message + Queue"></a>1.1 Message + Queue</h3><blockquote><p>在介绍RabbitMQ之前，先来说说什么是MQ</p></blockquote><p><strong>Message</strong></p><p>消息：很简单就是我们的数据</p><p><strong>Queue</strong></p><p>队列：是只允许在一端进行插入操作，而在另一端进行删除操作的线性表。</p><p><strong>队列是一种先进先出（First in First Out）的线性表，简称FIFO。允许插入的一端称为队尾，允许删除的一端称为队头。</strong>假设队列是q&#x3D;（a1,a2,…,an），那么a1就是队头元素，而an是队尾元素。这样我们就可以删除时，总是从a1开始，而插入时，列在最后。这也比较符合我们通常生活中的习惯，排在第一个的优先出列，最后来的当然在队伍的最后。</p><p><img src="https://hopestation.top/upload/2020/12/image-20201130140514722-57b6e8cdeaff4f43b374e5f4ed5ac94d.png" alt="image20201130140514722.png"></p><blockquote><p>那么，假如队列里的元素不是a，而是消息。就可以称为是简单的消息队列了。</p></blockquote><h3 id="1-2-MQ的概念"><a href="#1-2-MQ的概念" class="headerlink" title="1.2 MQ的概念"></a>1.2 MQ的概念</h3><p><strong>MQ</strong>（Message Queue）消息队列，是基础数据结构中“先进先出”的一种数据机构。指把要传输的数据（消息）放在队列中，用队列机制来实现消息传递——生产者产生消息并把消息放入队列，然后由消费者去处理。消费者可以到指定队列拉取消息，或者订阅相应的队列，由MQ服务端给其推送消息。 </p><ol><li>首先得有个队列</li><li>生产者：产生消息并把消息放入队列</li><li>消费者：从队列里消费消息（拉取、订阅）</li></ol><p><img src="https://hopestation.top/upload/2020/12/image-20201130153656283-accf383319e84146942d4d8ce1dedb33.png" alt="image20201130153656283.png"></p><h3 id="1-3-MQ的作用"><a href="#1-3-MQ的作用" class="headerlink" title="1.3 MQ的作用"></a>1.3 MQ的作用</h3><p>消息队列中间件是分布式系统中重要的组件，主要解决应用解耦，异步消息，流量削锋等问题，实现高性能，高可用，可伸缩和最终一致性架构。 </p><p><strong>解耦</strong>：一个业务需要多个模块共同实现，或者一条消息有多个系统需要对应处理，只需要主业务完成以后，发送一条MQ，其余模块消费MQ消息，即可实现业务，降低模块之间的耦合。</p><p><strong>异步</strong>：主业务执行结束后从属业务通过MQ，异步执行，减低业务的响应时间，提高用户体验。</p><p><strong>削峰</strong>：高并发情况下，业务异步处理，提供高峰期业务处理能力，避免系统瘫痪。</p><h3 id="1-4-MQ的缺点"><a href="#1-4-MQ的缺点" class="headerlink" title="1.4 MQ的缺点"></a>1.4 MQ的缺点</h3><p>1、系统可用性降低。依赖服务也多，服务越容易挂掉。需要考虑MQ瘫痪的情况</p><p>2、系统复杂性提高。需要考虑消息丢失、消息重复消费、消息传递的顺序性</p><p>3、业务一致性。主业务和从属业务一致性的处理</p><blockquote><p>可以参考知乎的回答：<a href="https://www.zhihu.com/question/54152397">https://www.zhihu.com/question/54152397</a></p></blockquote><h2 id="2-MQ有哪些"><a href="#2-MQ有哪些" class="headerlink" title="2. MQ有哪些"></a>2. MQ有哪些</h2><p>消息队列已经逐渐成为企业IT系统内部通信的核心手段。它具有低耦合、可靠投递、广播、流量控制、最终一致性等一系列功能，成为异步RPC的主要手段之一。当今市面上有很多主流的消息中间件，如老牌的ActiveMQ、RabbitMQ，炙手可热的Kafka，阿里巴巴自主开发RocketMQ等。</p><h3 id="2-1-使用场景"><a href="#2-1-使用场景" class="headerlink" title="2.1 使用场景"></a>2.1 使用场景</h3><ol><li><strong>Rabbit</strong><br>一般公司真实使用较多。结合Spring框架方便。<br>综合性好。性能好，延时很低；吞吐量到万级，MQ功能比较完备，开源，管理界面不错，社区活跃</li><li><strong>Rocket</strong><br>阿里开源，性能好，支持事务（需要购买官方版），能承受高吞吐量<br>对于分布式事务，一致性来说比Kafka好。一般有实力的公司选用。</li><li><strong>Kafka</strong><br>大数据、超高吞吐量就选它吧，极高的可用性以及可靠性，而且分布式可以任意扩展。适合数据收集，日志处理<br>对于数据的重复、错误、丢失没有严格的要求</li><li><strong>ActiveMq</strong><br>老牌的MQ，有丰富的API，中小型企业受欢迎。但吞吐量不大，目前使用者不算太多。</li></ol><h3 id="2-2-对比区别"><a href="#2-2-对比区别" class="headerlink" title="2.2 对比区别"></a>2.2 对比区别</h3><table><thead><tr><th>特性</th><th>ActiveMq</th><th>RabbitMq</th><th>RocketMQ</th><th>Kafka</th></tr></thead><tbody><tr><td>成熟度</td><td>成熟</td><td>成熟</td><td>比较成熟</td><td>成熟的日志领域</td></tr><tr><td>时效性</td><td></td><td>微秒级</td><td>毫秒级</td><td>毫秒级</td></tr><tr><td>社区活跃度</td><td>低</td><td>高</td><td>高</td><td>高</td></tr><tr><td>单机吞吐量</td><td>万级，吞吐量比RocketMQ和Kafka要低了一个数量级</td><td>万级，吞吐量比RocketMQ和Kafka要低了一个数量级</td><td>10万级，RocketMQ也是可以支撑高吞吐的一种MQ</td><td>10万级别，这是kafka最大的优点，就是吞吐量高。一般配合大数据类的系统来进行实时数据计算、日志采集等场景</td></tr><tr><td>topic数量对吞吐量的影响</td><td></td><td></td><td>topic可以达到几百，几千个的级别，吞吐量会有较小幅度的下降这是RocketMQ的一大优势，在同等机器下，可以支撑大量的topic</td><td>topic从几十个到几百个的时候，吞吐量会大幅度下降所以在同等机器下，kafka尽量保证topic数量不要过多。如果要支撑大规模topic，需要增加更多的机器资源</td></tr><tr><td>可用性</td><td>高，基于主从架构实现高可用性</td><td>高，基于主从架构实现高可用性</td><td>非常高，分布式架构</td><td>非常高，kafka是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用</td></tr><tr><td>消息可靠性</td><td>有较低的概率丢失数据</td><td></td><td>经过参数优化配置，可以做到0丢失</td><td>经过参数优化配置，消息可以做到0丢失</td></tr><tr><td>功能支持</td><td>MQ领域的功能极其完备</td><td>基于erlang开发，所以并发能力很强，性能极其好，延时很低</td><td>MQ功能较为完善，还是分布式的，扩展性好</td><td>功能较为简单，主要支持简单的MQ功能，在大数据领域的实时计算以及日志采集被大规模使用，是事实上的标准</td></tr><tr><td>优劣势总结</td><td>非常成熟，功能强大，在业内大量的公司以及项目中都有应用偶尔会有较低概率丢失消息而且现在社区以及国内应用都越来越少，官方社区现维护越来越少，几个月才发布一个版本而且确实主要是基于解耦和异步来用的，较少在大规模吞吐的场景中使用</td><td>rlang语言开发，性能极其好，延时很低；吞吐量到万级，MQ功能比较完备而且开源提供的管理界面非常棒，用起来很好用社区相对比较活跃，几乎每个月都发布几个版本分在国内一些互联网公司近几年用rabbitmq也比较多一些但是问题也是显而易见的，RabbitMQ确实吞吐量会低一些，这是因为他做的实现机制比较重。而且erlang开发，国内有几个公司有实力做erlang源码级别的研究和定制？如果说你没这个实力的话，确实偶尔会有一些问题，你很难去看懂源码，你公司对这个东西的掌控很弱，基本职能依赖于开源社区的快速维护和修复bug。而且rabbitmq集群动态扩展会很麻烦，不过这个我觉得还好。其实主要是erlang语言本身带来的问题。很难读源码，很难定制和掌控。</td><td>接口简单易用，而且毕竟在阿里大规模应用过，有阿里品牌保障日处理消息上百亿之多，可以做到大规模吞吐，性能也非常好，分布式扩展也很方便，社区维护还可以，可靠性和可用性都是ok的，还可以支撑大规模的topic数量，支持复杂MQ业务场景而且一个很大的优势在于，阿里出品都是java系的，我们可以自己阅读源码，定制自己公司的MQ，可以掌控社区活跃度相对较为一般，不过也还可以，文档相对来说简单一些，然后接口这块不是按照标准JMS规范走的有些系统要迁移需要修改大量代码还有就是阿里出台的技术，你得做好这个技术万一被抛弃，社区黄掉的风险，那如果你们公司有技术实力我觉得用RocketMQ挺好的</td><td>kafka的特点其实很明显，就是仅仅提供较少的核心功能，但是提供超高的吞吐量，ms级的延迟，极高的可用性以及可靠性，而且分布式可以任意扩展同时kafka最好是支撑较少的topic数量即可，保证其超高吞吐量而且kafka唯一的一点劣势是有可能消息重复消费，那么对数据准确性会造成极其轻微的影响，在大数据领域中以及日志采集中，这点轻微影响可以忽略这个特性天然适合大数据实时计算以及日志收集</td></tr></tbody></table><h2 id="3-AMQP协议"><a href="#3-AMQP协议" class="headerlink" title="3. AMQP协议"></a>3. AMQP协议</h2><p>Rabbit是基于AMQP协议的</p><p>下图是AMQP的协议模型：</p><p><img src="https://hopestation.top/upload/2020/12/1538609-20190720105435977-1170222541-35d56e7138df4b608a0a138454933088.png" alt="1538609201907201054359771170222541.png"></p><p>正如图中所看到的，AMQP协议模型有三部分组成：生产者、消费者和服务端。</p><p>生产者是投递消息的一方，首先连接到Server，建立一个连接，开启一个信道；然后生产者声明交换器和队列，设置相关属性，并通过路由键将交换器和队列进行绑定。同理，消费者也需要进行建立连接，开启信道等操作，便于接收消息。</p><p>接着生产者就可以发送消息，发送到服务端中的虚拟主机，虚拟主机中的交换器根据路由键选择路由规则，然后发送到不同的消息队列中，这样订阅了消息队列的消费者就可以获取到消息，进行消费。</p><h2 id="4-Rabbit的安装"><a href="#4-Rabbit的安装" class="headerlink" title="4. Rabbit的安装"></a>4. Rabbit的安装</h2><blockquote><p>可以从官网下载，但一般比较缓慢（可以往下看，我分享了3.8.3版本的百度云链接）</p></blockquote><p><strong><a href="https://www.rabbitmq.com/">1. 官网界面</a>：点击Get Started</strong></p><p><img src="https://hopestation.top/upload/2020/12/image-20201130163532286-2a95584e2da242319c12de27b509f726.png" alt="image20201130163532286.png"></p><p><strong>2. 点击DownLoad，然后进行选择</strong></p><p><img src="https://hopestation.top/upload/2020/12/image-20201130164031038-a09304938494430788b5c944653ce1d1.png" alt="image20201130164031038.png"></p><blockquote><p>我是部署到了租的CentOs服务器上面，也就是说下面讲的是Linux的部署方式</p></blockquote><h3 id="4-1-安装Erlang"><a href="#4-1-安装Erlang" class="headerlink" title="4.1 安装Erlang"></a>4.1 安装Erlang</h3><h4 id="4-1-1-下载Erlang"><a href="#4-1-1-下载Erlang" class="headerlink" title="4.1.1 下载Erlang"></a>4.1.1 下载Erlang</h4><p>RabbitMQ是Erlang语言编写，所以Erang环境必须要有</p><p>注：Erlang环境一定要与RabbitMQ版本匹配：<a href="https://www.rabbitmq.com/which-erlang.html">https://www.rabbitmq.com/which-erlang.html</a></p><p><strong>Erlang下载</strong>:</p><ul><li>链接：<a href="https://pan.baidu.com/s/1GsPsvfTDyzERPjiZ3wrvWg">https://pan.baidu.com/s/1GsPsvfTDyzERPjiZ3wrvWg</a> </li><li>提取码：uzvm</li></ul><blockquote><p>Erlang其他下载地址：</p><p><a href="https://www.rabbitmq.com/releases/erlang/%EF%BC%88%E6%A0%B9%E6%8D%AE%E8%87%AA%E8%BA%AB%E9%9C%80%E6%B1%82%E5%8F%8A%E5%8C%B9%E9%85%8D%E5%85%B3%E7%B3%BB%EF%BC%8C%E4%B8%8B%E8%BD%BD%E5%AF%B9%E5%BA%94rpm%E5%8C%85%EF%BC%89">https://www.rabbitmq.com/releases/erlang/（根据自身需求及匹配关系，下载对应rpm包）</a></p><p><a href="https://www.erlang.org/downloads">https://www.erlang.org/downloads</a></p><p><a href="http://erlang.org/download/">http://erlang.org/download/</a> <strong>推荐</strong></p></blockquote><h4 id="4-1-2-安装Erlang编译安装必要依赖"><a href="#4-1-2-安装Erlang编译安装必要依赖" class="headerlink" title="4.1.2 安装Erlang编译安装必要依赖"></a>4.1.2 安装Erlang编译安装必要依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#没有换行是一句话，太长了</span></span><br><span class="line">sudo yum install -y gcc gcc-c++ glibc-devel make ncurses-devel openssl-devel autoconf java-1.8.0-openjdk-devel git</span><br></pre></td></tr></table></figure><h4 id="4-1-3-编译并安装"><a href="#4-1-3-编译并安装" class="headerlink" title="4.1.3 编译并安装"></a>4.1.3 编译并安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.首先将刚刚下载的erlang的压缩包，上传到的你服务器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.利用cd命令，进入到压缩包的目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3.解压</span></span><br><span class="line">tar -zxvf otp_src_22.3.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#4. 进入otp_src_22.3目录</span></span><br><span class="line"><span class="built_in">cd</span> otp_src_22.3/</span><br><span class="line"></span><br><span class="line"><span class="comment">#5. 编译&amp;安装 （执行下面的两个命令）</span></span><br><span class="line">./otp_build autoconf</span><br><span class="line"></span><br><span class="line">./configure &amp;&amp; make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure><p>默认安装在&#x2F;usr&#x2F;local&#x2F;lib&#x2F;erlang&#x2F;目录下</p><h4 id="4-1-4-验证"><a href="#4-1-4-验证" class="headerlink" title="4.1.4 验证"></a>4.1.4 验证</h4><p><strong>1. 查看erl 版本</strong> ：<code>erl -version</code></p><blockquote><p>Erlang (SMP,ASYNC_THREADS,HIPE) (BEAM) emulator version xx.x</p></blockquote><p><strong>2. 执行erl</strong> ：<code>erl</code></p><blockquote><p>Erlang&#x2F;OTP 22 [erts-10.7] [source] [64-bit] [smp:2:2] [ds:2:2:10] [async-threads:1] [hipe]</p><ol><li>Eshell V10.7  (abort with ^G)</li><li>1&gt;</li></ol><p>我是直接 Ctrl  + C 退出 erl命令的</p></blockquote><p>以上是Erlang的安装，还是有点hard的。接下来才到主角<strong>RabbitMq</strong>的安装（simpler）</p><blockquote><p>我当时就差点被这个安装包和安装劝退了..要坚持下来</p></blockquote><h3 id="4-2-安装Rabbit"><a href="#4-2-安装Rabbit" class="headerlink" title="4.2 安装Rabbit"></a>4.2 安装Rabbit</h3><h4 id="4-2-1-下载"><a href="#4-2-1-下载" class="headerlink" title="4.2.1 下载"></a>4.2.1 下载</h4><ol><li><p>百度云下载，再上传到服务器（推荐）</p><p>再给个百度云链接，一步到胃 ^ _ ^</p><p><strong>rabbitmq-server-generic-unix-3.8.3.tar.xz</strong></p><ul><li>链接：<a href="https://pan.baidu.com/s/1grH-RhZSoKy-heqQ6XBQ-g">https://pan.baidu.com/s/1grH-RhZSoKy-heqQ6XBQ-g</a> </li><li>提取码：qixr</li></ul></li><li><p>下面这个命令也可以直接获取rabbitmq-server（但一般下载很慢，或不能下载 。不推荐）</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.bintray.com/rabbitmq/all/rabbitmq-server/3.8.3/rabbitmq-server-generic-unix-3.8.3.tar.xz</span><br></pre></td></tr></table></figure><ol start="3"><li><p>其他下载链接</p><blockquote><p><a href="https://github.com/rabbitmq/rabbitmq-server/releases">https://github.com/rabbitmq/rabbitmq-server/releases</a> 推荐</p><p><a href="https://www.rabbitmq.com/install-rpm.html">https://www.rabbitmq.com/install-rpm.html</a></p><p><a href="https://www.rabbitmq.com/releases/rabbitmq-server/">https://www.rabbitmq.com/releases/rabbitmq-server/</a></p><p><a href="https://dl.bintray.com/rabbitmq/all/rabbitmq-server/">https://dl.bintray.com/rabbitmq/all/rabbitmq-server/</a>  推荐</p><p><a href="https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.3/rabbitmq-server-generic-unix-3.8.3.tar.xz">rabbitmq-server-generic-unix-3.8.3.tar.xz</a></p></blockquote></li></ol><h4 id="4-2-2-解压"><a href="#4-2-2-解压" class="headerlink" title="4.2.2 解压"></a>4.2.2 解压</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1. 将刚刚的压缩包上传到服务器</span></span><br><span class="line"><span class="comment">#2. 利用cd目录 进入压缩包的目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3. 解压 (执行下面两个命令)</span></span><br><span class="line">xz -d rabbitmq-server-generic-unix-3.8.3.tar.xz</span><br><span class="line"></span><br><span class="line">tar -xvf rabbitmq-server-generic-unix-3.8.3.tar</span><br><span class="line"></span><br><span class="line"><span class="comment">#4. 移动到 /usr/local/ 目录下</span></span><br><span class="line"><span class="built_in">mv</span> rabbitmq_server-3.8.3 /usr/local/</span><br></pre></td></tr></table></figure><h4 id="4-2-3-配置环境变量"><a href="#4-2-3-配置环境变量" class="headerlink" title="4.2.3 配置环境变量"></a>4.2.3 配置环境变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编辑配置文件</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment"># 在最后一行添加如下命令</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/lib/erlang/bin:/usr/local/rabbitmq_server-3.8.3/sbin</span><br><span class="line"><span class="comment">#使环境变量生效（source命令通常用于重新执行刚修改的初始化文件，使之立即生效）</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>附上一个图</p><p><img src="https://hopestation.top/upload/2020/12/image-20201201094631802-f368fa400c7a4b39b38d728bbf2a66b5.png" alt="image20201201094631802.png"></p><h3 id="4-3-启动MQ"><a href="#4-3-启动MQ" class="headerlink" title="4.3 启动MQ"></a>4.3 启动MQ</h3><blockquote><p>报错 ERROR: node with name “rabbit” already running on “VM_0_2_centos”</p><p>如果启动不了 看一下进程里是否已启动</p><p>我自己是一次运行成功了，没有出错</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1. 开启管理界面的插件</span></span><br><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br><span class="line"><span class="comment">#2. 运行</span></span><br><span class="line">rabbitmq-server 或 rabbitmq-server -detached(后台运行)</span><br></pre></td></tr></table></figure><p>显示成这样就是成功啦^_^</p><p><img src="https://hopestation.top/upload/2020/12/image-20201201100541313-db6d5054bdf24a4f99ad6627d984ecdd.png" alt="image20201201100541313.png"></p><h4 id="4-3-1-添加新用户"><a href="#4-3-1-添加新用户" class="headerlink" title="4.3.1 添加新用户"></a>4.3.1 添加新用户</h4><ul><li>默认账号密码是（guest&#x2F;guest），外网不能访问，但可以修改设置</li><li>还可以添加新用户（外网可以访问）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#新添加账号：用户名：admin 密码：admin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1. 添加命令</span></span><br><span class="line">rabbitmqctl add_user admin admin（这里可以写你的密码）</span><br><span class="line"></span><br><span class="line"><span class="comment">#2. 设置管理员角色</span></span><br><span class="line">rabbitmqctl set_user_tags admin administrator</span><br></pre></td></tr></table></figure><h4 id="4-3-2-访问后台"><a href="#4-3-2-访问后台" class="headerlink" title="4.3.2 访问后台"></a>4.3.2 访问后台</h4><p><a href="http://localhost:15672/">http://localhost:15672</a> 或者 你的ip:15672</p><p>输入你的用户名密码</p><p>就进入了RabbitMq的控制界面，实际开发中一般用这个界面比较多。也可能使用命令行的方式。</p><p><img src="https://hopestation.top/upload/2020/12/image-20201201101054756-0e3200f819c04e68a98d7b6065610cf0.png" alt="image20201201101054756.png"></p><h4 id="4-3-3-其他操作"><a href="#4-3-3-其他操作" class="headerlink" title="4.3.3 其他操作"></a>4.3.3 其他操作</h4><ol><li>停止MQ</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl shutdown</span><br></pre></td></tr></table></figure><ol start="2"><li><p>解除guest账户的本地登录限制</p><p>修改核心配置参数<br>rabbitmq的核心配置参数在&#x2F;usr&#x2F;local&#x2F;rabbitmq_server-3.8.3&#x2F;ebin&#x2F;rabbit.app里</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/rabbitmq_server-3.8.3/ebin/rabbit.app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到loopback_users 修改为如下内容（去除 &lt;&lt;&quot;guest&quot;&gt;&gt;中&lt;&lt;&quot;&quot;&gt;&gt;） &#123;loopback_users, [guest]&#125;,</span></span><br></pre></td></tr></table></figure><ol start="3"><li>命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#显示命令帮助</span></span><br><span class="line">rabbitmqctl <span class="built_in">help</span></span><br><span class="line"><span class="comment">#插件命令帮助</span></span><br><span class="line">rabbitmq-plugins</span><br><span class="line"><span class="comment">#插件</span></span><br><span class="line">看插件打开情况：rabbitmq-plugins list</span><br><span class="line"></span><br><span class="line">启动监控管理器：rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br><span class="line"></span><br><span class="line">关闭监控管理器：rabbitmq-plugins <span class="built_in">disable</span> rabbitmq_management</span><br><span class="line"><span class="comment">#队列</span></span><br><span class="line"></span><br><span class="line">查看所有的队列：rabbitmqctl list_queues</span><br><span class="line"></span><br><span class="line">清除所有的队列：rabbitmqctl reset</span><br><span class="line"><span class="comment">#状态</span></span><br><span class="line"></span><br><span class="line">查看状态：rabbitmqctl status</span><br><span class="line"></span><br><span class="line">查看集群状态：rabbitmqctl cluster_status</span><br><span class="line"></span><br><span class="line">集群同步：</span><br><span class="line"></span><br><span class="line">所有节点的值相同：/var/lib/rabbitmq/.erlang.cookie</span><br><span class="line"></span><br><span class="line">加入集群：</span><br><span class="line"></span><br><span class="line">host1和host2，在host2上操作</span><br><span class="line"></span><br><span class="line">先停止：rabbitmqctl -n rabbit stop_app</span><br><span class="line"></span><br><span class="line">加入：rabbitmqctl -n rabbit join_cluster rabbit@<span class="variable">$rabbit_hostname1</span></span><br><span class="line"></span><br><span class="line">再启动：rabbitmqctl -n rabbit start_app</span><br><span class="line"></span><br><span class="line"><span class="comment">#用户管理</span></span><br><span class="line"></span><br><span class="line">新增 rabbitmqctl add_user admin admin</span><br><span class="line"></span><br><span class="line">删除 rabbitmqctl delete_user admin</span><br><span class="line"></span><br><span class="line">修改 rabbitmqctl change_password admin admin123</span><br><span class="line"></span><br><span class="line">用户列表 rabbitmqctl  list_users</span><br><span class="line"></span><br><span class="line">设置角色 rabbitmqctl set_user_tags admin administrator monitoring policymaker management</span><br><span class="line"></span><br><span class="line">设置用户权限 rabbitmqctl  set_permissions  -p  VHostPath  admin  ConfP  WriteP  ReadP</span><br><span class="line"></span><br><span class="line">查询所有权限 rabbitmqctl  list_permissions  [-p  VHostPath]</span><br><span class="line"></span><br><span class="line">指定用户权限 rabbitmqctl  list_user_permissions  admin</span><br><span class="line"></span><br><span class="line">清除用户权限 rabbitmqctl  clear_permissions  [-p VHostPath]  admin</span><br><span class="line"></span><br><span class="line"><span class="comment">#多应用使用</span></span><br><span class="line"></span><br><span class="line">rabbitmqctl -n rabbit_ceilometer 命令</span><br></pre></td></tr></table></figure><blockquote><p>安装部分参考自:<em>我是Superman丶</em>的<a href="https://blog.csdn.net/G971005287W/article/details/106090600?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-5.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-5.control">文章</a></p></blockquote><h2 id="5-管理界面初识"><a href="#5-管理界面初识" class="headerlink" title="5.管理界面初识"></a>5.管理界面初识</h2><h3 id="5-1-概览界面"><a href="#5-1-概览界面" class="headerlink" title="5.1 概览界面"></a>5.1 概览界面</h3><p><img src="https://hopestation.top/upload/2020/12/mqweb01-fda2f10010e94bcf9fbed2008328f44e.png" alt="img"></p><h3 id="5-2-交换机界面"><a href="#5-2-交换机界面" class="headerlink" title="5.2  交换机界面"></a>5.2  交换机界面</h3><p><img src="https://hopestation.top/upload/2020/12/mqweb-0335203fcd794c229222e3ce3661d50c.png" alt="img"></p><h3 id="5-3-Admin界面"><a href="#5-3-Admin界面" class="headerlink" title="5.3 Admin界面"></a>5.3 Admin界面</h3><h4 id="5-3-1-用户授权"><a href="#5-3-1-用户授权" class="headerlink" title="5.3.1 用户授权"></a>5.3.1 用户授权</h4><p>进入用户管理，我们之前添加的admin用户还没有权限。<br>点击Name一栏的<code>admin</code>，为其设置权限</p><p><img src="https://hopestation.top/upload/2020/12/image-20201201112505595-882a0d8111404d289ac1c5eb5cea8ec7.png" alt="image20201201112505595.png"></p><p>一进来默认的信息已经填好了，直接点击<code>Set permission</code> 批准即可</p><p><img src="https://hopestation.top/upload/2020/12/image-20201201130121379-c339ee63020f48aea2fa5b7230f2a5a0.png" alt="image20201201130121379.png">Q.assets\image-20201201130121379.png)</p><h4 id="5-3-2-创建虚拟主机"><a href="#5-3-2-创建虚拟主机" class="headerlink" title="5.3.2 创建虚拟主机"></a>5.3.2 创建虚拟主机</h4><p>Admin -&gt; Virtual Hosts -&gt; Add a new virtual hosts</p><p><img src="https://hopestation.top/upload/2020/12/image-20201201125843432-79f3757f356c4ca499da7e84460cff6a.png" alt="image20201201125843432.png"></p><p>以上就是Rabbit的介绍好安装啦，<a href="https://hopestation.top/archives/rabbitmq02">下一篇</a>来实战编码。</p>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程（三）</title>
      <link href="/2020/12/01/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%89%EF%BC%89-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%89/"/>
      <url>/2020/12/01/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%89%EF%BC%89-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<p><a href="https://gitee.com/hopestation/thread-learn"><img src="https://gitee.com/hopestation/thread-learn/widgets/widget_card.svg?colors=393222,ebdfc1,fffae5,d8ca9f,393222,a28b40" alt="hopeStation/thread-learn"></a></p><h2 id="Stream流式计算"><a href="#Stream流式计算" class="headerlink" title="Stream流式计算"></a>Stream流式计算</h2><h2 id="异步回调（Future）"><a href="#异步回调（Future）" class="headerlink" title="异步回调（Future）"></a>异步回调（Future）</h2><p>设计的初衷：对将来的某个时间的结果进行建模</p><h2 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h2><p>JMM即为JAVA 内存模型（java memory model），是一个概念</p><h3 id="关于JMM的一些约定"><a href="#关于JMM的一些约定" class="headerlink" title="关于JMM的一些约定"></a>关于JMM的一些约定</h3><ol><li>线程解锁前<br>必须把共享变量<strong>立刻刷回主存</strong></li><li>线程加锁前<br>必须把读取<strong>主存</strong>中的<strong>最新值</strong>到线程的<strong>工作内存</strong>中</li><li>加锁和解锁 是同一把锁</li></ol><h3 id="八个操作"><a href="#八个操作" class="headerlink" title="八个操作"></a>八个操作</h3><p><img src="https://hopestation.top/upload/2020/12/image-20201126165607193-cea87a2c89ad4f60a7a66712de9a63a4.png" alt="image20201126165607193.png"></p><h3 id="八种线程之间的交互指令"><a href="#八种线程之间的交互指令" class="headerlink" title="八种线程之间的交互指令"></a>八种线程之间的交互指令</h3><ol><li><strong>lock（锁定）</strong>：作用于主内存的变量，把一个变量标识为一条线程独占状 。</li><li><strong>unlock（解锁）</strong>：作用于主内存变量，把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。</li><li><strong>read（读取）</strong>：作用于主内存变量，把一个变量值从主内存传输到线程的工作内存中，以便随后的load动作使用</li><li><strong>load（载入）</strong>：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中。</li><li><strong>use（使用）</strong>：作用于工作内存的变量，把工作内存中的一个变量值传递给执行引擎，每当虚拟机遇到一个需要使用变量的值的字节码指令时将会执行这个操作。</li><li><strong>assign（赋值）</strong>：作用于工作内存的变量，它把一个从执行引擎接收到的值赋值给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。</li><li><strong>store（存储）</strong>：作用于工作内存的变量，把工作内存中的一个变量的值传送到主内存中，以便随后的write的操作。</li><li><strong>write（写入）</strong>：作用于主内存的变量，它把store操作从工作内存中一个变量的值传送到主内存的变量中。</li></ol><h3 id="JMM对交互指令的约束"><a href="#JMM对交互指令的约束" class="headerlink" title="JMM对交互指令的约束"></a>JMM对交互指令的约束</h3><p>如果要把一个变量从主内存中复制到工作内存，就需要按顺寻地执行read和load操作，如果把变量从工作内存中同步回主内存中，就要按顺序地执行store和write操作。</p><p>Java内存模型只要求上述操作必须按顺序执行，而没有保证必须是连续执行。也就是read和load之间，store和write之间是可以插入其他指令的，如对主内存中的变量a、b进行访问时，可能的顺序是read a，read b，load b， load a。Java内存模型还规定了在执行上述八种基本操作时，必须满足如下规则：</p><ul><li>不允许read和load、store和write操作之一单独出现</li><li>不允许一个线程丢弃它的最近assign的操作，即变量在工作内存中改变了之后必须同步到主内存中。</li><li>不允许一个线程无原因地（没有发生过任何assign操作）把数据从工作内存同步回主内存中。</li><li>一个新的变量只能在主内存中诞生，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量。即就是对一个变量实施use和store操作之前，必须先执行过了assign和load操作。</li><li>一个变量在同一时刻只允许一条线程对其进行lock操作，lock和unlock必须成对出现</li><li>如果对一个变量执行lock操作，将会清空工作内存中此变量的值，在执行引擎使用这个变量前需要重新执行load或assign操作初始化变量的值</li><li>如果一个变量事先没有被lock操作锁定，则不允许对它执行unlock操作；也不允许去unlock一个被其他线程锁定的变量。</li><li>对一个变量执行unlock操作之前，必须先把此变量同步到主内存中（执行store和write操作）。</li></ul><h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><p>提供轻量级的同步机制</p><ul><li>保证可见性</li><li>不保证原子性</li><li>禁止指令重排</li></ul><h4 id="什么是指令重排"><a href="#什么是指令重排" class="headerlink" title="什么是指令重排"></a>什么是指令重排</h4><p>你写的程序，计算机并不是按照你写的那样去执行的</p><p>源代码 -&gt; 编译器优化的重排 -&gt; 指令并行也可能会重排 -&gt; 内存系统也会重排 -&gt; 执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">5</span>;<span class="comment">//1</span></span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">5</span>;<span class="comment">//2</span></span><br><span class="line">x = x + <span class="number">1</span>;<span class="comment">//3</span></span><br><span class="line">y = y + x; <span class="comment">//4</span></span><br></pre></td></tr></table></figure><p>真正的的执行顺序不一定是 1234，有可能是 2134，1324</p><p>但不可呢是 1243 ，因为 <strong>处理器在进行指令重排时，会考虑数据之间的依赖性</strong>，不会影响正确的结果</p><p>但是在多线程的情况下，可能会出错，举个例子：</p><p>x,y,a,b的初始值都是0</p><table><thead><tr><th>顺序</th><th>线程A</th><th>线程B</th></tr></thead><tbody><tr><td>先执行</td><td>x&#x3D;a</td><td>y&#x3D;b</td></tr><tr><td>后执行</td><td>b&#x3D;1</td><td>a&#x3D;2</td></tr></tbody></table><p>正确的执行结果 x&#x3D;0,y&#x3D;0</p><p>指令重排后的顺序也可能变成</p><table><thead><tr><th>顺序</th><th>线程A</th><th>线程B</th></tr></thead><tbody><tr><td>先执行</td><td>b&#x3D;1</td><td>a&#x3D;2</td></tr><tr><td>后执行</td><td>x&#x3D;a</td><td>y&#x3D;b</td></tr></tbody></table><p>正确的执行结果 x&#x3D;2,y&#x3D;1</p><p><strong>volatile可以避免指令重排</strong></p><ol><li>保证特定操作的执行顺序</li><li>可以保证某些变量的内存可见性</li></ol><h2 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h2><p>坑：</p><p>Integer（-128~127比较特殊）</p><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p><strong>死锁</strong>是<strong>指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象</strong>，若无外力作用，它们都将无法推进下去。此时称系统处于<strong>死锁状态</strong>或系统产生了<strong>死锁</strong>，这些永远在互相等待的进程称为<strong>死锁进程</strong>。</p><p><img src="https://hopestation.top/upload/2020/12/image-20201130103019041-8c72ca3a837e4d73b95ef8baed48c98b.png" alt="image20201130103019041.png"></p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><blockquote><p>不推荐使用String类型 作为锁对象</p><p>String对象存在于常量池中，相同内容的String对象地址相同，为同一对象。因此如果使用String作为锁时，如果之前设置String对象锁的值与后面设置的锁对应的String对象值相同则会影响代码的执行</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 死锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDeadLock</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="type">boolean</span> flag;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 必须是static的，</span></span><br><span class="line"><span class="comment">     * 在main方法里，创建了两个对象，如果不是静态的，就变成了每一个对象都有o1 o2，无法造成死锁</span></span><br><span class="line"><span class="comment">     * static来保证：两个线程 来争夺这相同的这两个对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">o2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyDeadLock</span><span class="params">(<span class="type">boolean</span> flag)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.flag)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o1) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; get lock o1&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (o2) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; get lock o2&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o2) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; get lock o2&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (o1) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; get lock o1&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyDeadLock</span>(<span class="literal">true</span>));</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyDeadLock</span>(<span class="literal">false</span>));</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排查死锁"><a href="#排查死锁" class="headerlink" title="排查死锁"></a>排查死锁</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看进程号</span></span><br><span class="line">C:\Program Files\Java\jdk1.8.0_181\bin&gt;jps -l</span><br><span class="line">7952 lock.Test</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># jstack用于打印出给定的java进程ID或core file或远程调试服务的Java堆栈信息</span></span><br><span class="line">C:\Program Files\Java\jdk1.8.0_181\bin&gt;jstack 7952</span><br><span class="line">...</span><br><span class="line"><span class="comment">#发现了死锁</span></span><br><span class="line"><span class="comment">#Found one Java-level deadlock</span></span><br><span class="line">Found one Java-level deadlock:</span><br><span class="line">=============================</span><br><span class="line"><span class="string">&quot;Thread-1&quot;</span>:</span><br><span class="line">  waiting to lock monitor 0x00000000575bae38 (object 0x00000000d70b8190, a java.</span><br><span class="line">lang.Object),</span><br><span class="line">  <span class="built_in">which</span> is held by <span class="string">&quot;Thread-0&quot;</span></span><br><span class="line"><span class="string">&quot;Thread-0&quot;</span>:</span><br><span class="line">  waiting to lock monitor 0x00000000575b8448 (object 0x00000000d70b81a0, a java.</span><br><span class="line">lang.Object),</span><br><span class="line">  <span class="built_in">which</span> is held by <span class="string">&quot;Thread-1&quot;</span></span><br><span class="line"></span><br><span class="line">Java stack information <span class="keyword">for</span> the threads listed above:</span><br><span class="line">===================================================</span><br><span class="line"><span class="string">&quot;Thread-1&quot;</span>:</span><br><span class="line">        at lock.MyDeadLock.run(MyDeadLock.java:45)</span><br><span class="line">        - waiting to lock &lt;0x00000000d70b8190&gt; (a java.lang.Object)</span><br><span class="line">        - locked &lt;0x00000000d70b81a0&gt; (a java.lang.Object)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"><span class="string">&quot;Thread-0&quot;</span>:</span><br><span class="line">        at lock.MyDeadLock.run(MyDeadLock.java:31)</span><br><span class="line">        - waiting to lock &lt;0x00000000d70b81a0&gt; (a java.lang.Object)</span><br><span class="line">        - locked &lt;0x00000000d70b8190&gt; (a java.lang.Object)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"><span class="comment">#Found 1 deadlock.</span></span><br><span class="line">Found 1 deadlock.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>排查问题：</p><ul><li>查看日志</li><li>查看堆栈信息</li></ul>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JUC </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程（二）</title>
      <link href="/2020/12/01/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%BA%8C/"/>
      <url>/2020/12/01/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<p><a href="https://gitee.com/hopestation/thread-learn"><img src="https://gitee.com/hopestation/thread-learn/widgets/widget_card.svg?colors=393222,ebdfc1,fffae5,d8ca9f,393222,a28b40" alt="hopeStation/thread-learn"></a></p><h2 id="并发集合"><a href="#并发集合" class="headerlink" title="并发集合"></a>并发集合</h2><p>并发修改异常<br>java.util.ConcurrentModificationException</p><h3 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h3><p><a href="https://www.cnblogs.com/myseries/p/10877420.html">https://www.cnblogs.com/myseries/p/10877420.html</a></p><h2 id="JUC辅助类"><a href="#JUC辅助类" class="headerlink" title="JUC辅助类"></a>JUC辅助类</h2><h2 id="BlockQueue"><a href="#BlockQueue" class="headerlink" title="BlockQueue"></a>BlockQueue</h2><p><strong>四组API</strong></p><table><thead><tr><th>情况</th><th>抛出异常</th><th>不抛出异常</th><th>失败等待</th><th>时间段等待</th></tr></thead><tbody><tr><td>增加操作</td><td>add()</td><td>offer()</td><td>put()</td><td>offer(…)</td></tr><tr><td>取出操作</td><td>remove()</td><td>poll()</td><td>take()</td><td>poll(..)</td></tr><tr><td>查看队首元素</td><td>element()</td><td>peek()</td><td>.</td><td>.</td></tr></tbody></table><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><h4 id="池化技术"><a href="#池化技术" class="headerlink" title="池化技术"></a>池化技术</h4><p>简单点来说，就是提前保存大量的资源，以备不时之需。</p><p>对于线程，内存，oracle的连接对象等等，这些都是资源，程序中当你创建一个线程或者在堆上申请一块内存时，都涉及到很多系统调用，也是非常消耗CPU的，如果你的程序需要很多类似的工作线程或者需要频繁的申请释放小块内存，如果没有在这方面进行优化，那很有可能这部分代码将会成为影响你整个程序性能的瓶颈。</p><h4 id="常见的池化技术"><a href="#常见的池化技术" class="headerlink" title="常见的池化技术"></a>常见的池化技术</h4><ul><li>线程池</li><li>连接池</li><li>内存池</li><li>对象池</li></ul><blockquote><p>参考自：<a href="https://blog.csdn.net/syviah/article/details/46550161">https://blog.csdn.net/syviah/article/details/46550161</a></p><ol><li><p>对象池<br>就是提前创建很多对象，将用过的对象保存起来，等下一次需要这种对象的时候，再拿出来重复使用</p></li><li><p>线程池</p><p>线程池的原理很简单，类似于操作系统中的缓冲区的概念，它的流程如下：</p><p>先启动若干数量的线程，并让这些线程都处于睡眠状态，当客户端有一个新请求时，就会唤醒线程池中的某一个睡眠线程，让它来处理客户端的这个请求，当处理完这个请求后，线程又处于睡眠状态。</p><p>可能你也许会问：为什么要搞得这么麻烦，如果每当客户端有新的请求时，我就创建一个新的线程不就完了？这也许是个不错的方法，因为它能使得你编写代码相对容易一些，但你却忽略了一个重要的问题??性能！</p><p>一个省级数据大集中的银行网络中心，高峰期每秒的客户端请求并发数超过100，如果为每个客户端请求创建一个新线程的话，那耗费的CPU时间和内存将是惊人的，如果采用一个拥有200个线程的线程池，那将会节约大量的的系统资源，使得更多的CPU时间和内存用来处理实际的商业应用，而不是频繁的线程创建与销毁。</p></li><li><p>内存池</p><p>如何更好的管理在应用程序中内存的使用，同时提高内存使用的效率，这是值得每一个开发人员深思的问题。内存池(Memory pool)提供了一种比较可行的解决方案。首先是创建内存池。这个过程的主要任务是预先分配足够大的内存，形成一个初步的“内存池”。分配内存，也就是用户请求内存时，会返回内存池中一块空闲的内存，并将其标志置为已使用，当然具体细节和方法有很多。释放内存时，不是真正地调用free或是delete的过程，而是把内存放回内存池的过程。在把内存放入内存池的同时，要把标志位置为空闲。最后在应用程序结束时，要把内存池销毁。这里主要做的工作就是把内存池中的每一块内存释放。</p><p>使用内存池的好处：</p><p>1、减少了内存碎片的产生。这个可以从创建内存池的过程中看出。我们在创建内存池时，分配的都是一块块比较整的内存块，这样可以减少内存碎片的产生。</p><p> 2、提高了内存的使用效率。这个可以从分配内存和释放内存的过程中看出。每次的分配与释放并不是去调用系统提供的函数或是操作符去操作实际的内存，而是在复用内存池中的内存。</p><p>缺点：</p><p>就是很有可能会造成内存的浪费，原因也很明显，开始分配了一大块内存，不是全部都用得到的。</p></li><li><p>数据库连接池</p><p>连接池比较典型的有oracle的连接池。</p><p> 数据库连接是一种关键的有限的昂贵的资源，这一点在多用户的网页应用程序中体现得尤为突出。 一个数据库连接对象均对应一个物理数据库连接，每次操作都打开一个物理连接，使用完都关闭连接，这样造成系统的 性能低下。</p><p>数据库连接池的解决方案是在应用程序启动时建立足够的数据库连接，并讲这些连接组成一个连接池(简单说：在一个“池”里放了好多半成品的数据库联接对象)，由应用程序动态地对池中的连接进行申请、使用和释放。对于多于连接池中连接数的并发请求，应该在请求队列中排队等待。并且应用程序可以根据池中连接的使用率，动态增加或减少池中的连接数。</p><p>  连接池技术尽可能多地重用了消耗内存地资源，大大节省了内存，提高了服务器地服务效率，能够支持更多的客户服务。通过使用连接池，将大大提高程序运行效率，同时，我们可以通过其自身的管理机制来监视数据库连接的数量、使用情况等。</p><ol><li><p>最小连接数是连接池一直保持的数据库连接，所以如果应用程序对数据库连接的使用量不大，将会有大量的数据库连接资源被浪费；</p></li><li><p>最大连接数是连接池能申请的最大连接数，如果数据库连接请求超过此数，后面的数据库连接请求将被加入到等待队列中，这会影响之后的数据库操作。</p></li></ol></li></ol></blockquote><h4 id="线程池的作用"><a href="#线程池的作用" class="headerlink" title="线程池的作用"></a>线程池的作用</h4><ul><li>降低资源的消耗（资源复用）</li><li>提升响应速度（拿来就用）</li><li>方便管理</li></ul><p>线程可以复用，可以控制最大并发数！</p><h4 id="线程池必会"><a href="#线程池必会" class="headerlink" title="线程池必会"></a>线程池必会</h4><p>3大方法，7大参数，4种拒绝策略</p><h4 id="三大方法"><a href="#三大方法" class="headerlink" title="三大方法"></a>三大方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单个线程池</span></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line"><span class="comment">//创建一个固定的线程池的大小</span></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line"><span class="comment">//可伸缩的线程池</span></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br></pre></td></tr></table></figure><p>源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newSingleThreadExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Executors</span>.FinalizableDelegatedExecutorService(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0L</span>, TimeUnit.MILLISECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newFixedThreadPool</span><span class="params">(<span class="type">int</span> var0)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(var0, var0, <span class="number">0L</span>, TimeUnit.MILLISECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newCachedThreadPool</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">0</span>, <span class="number">2147483647</span>, <span class="number">60L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,</span></span><br><span class="line"><span class="params">                          <span class="type">int</span> maximumPoolSize,</span></span><br><span class="line"><span class="params">                          <span class="type">long</span> keepAliveTime,</span></span><br><span class="line"><span class="params">                          TimeUnit unit,</span></span><br><span class="line"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class="line"><span class="params">                          ThreadFactory threadFactory,</span></span><br><span class="line"><span class="params">                          RejectedExecutionHandler handler)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">        keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    <span class="keyword">if</span> (workQueue == <span class="literal">null</span> || threadFactory == <span class="literal">null</span> || handler == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="built_in">this</span>.acc = System.getSecurityManager() == <span class="literal">null</span> ?</span><br><span class="line">        <span class="literal">null</span> :</span><br><span class="line">    AccessController.getContext();</span><br><span class="line">    <span class="built_in">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="built_in">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="built_in">this</span>.workQueue = workQueue;</span><br><span class="line">    <span class="built_in">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">    <span class="built_in">this</span>.threadFactory = threadFactory;</span><br><span class="line">    <span class="built_in">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="七大参数"><a href="#七大参数" class="headerlink" title="七大参数"></a>七大参数</h4><ol><li><p><strong>corePoolSize</strong>: 核心线程数</p></li><li><p><strong>maximumPoolSize</strong>允许创建的最大线程数</p></li><li><p><strong>keepAliveTime</strong>： 这个看一下单词也能猜出它的主要作用了吧？当线程池的线程数大于核心线程数的时候，线程空闲时间超过这个时间后还没有任务给它做的话就会关闭。小于等于核心线程数的时候不会被关闭，但是可以通过public void allowCoreThreadTimeOut(true)来设置使其可以被关闭。</p></li><li><p><strong>TimeUnit</strong> unit：keepAliveTime的时间单位(作转换用)<br>this.keepAliveTime &#x3D; unit.toNanos(keepAliveTime);</p></li><li><p><strong>BlockingQueue</strong> workQueue: 任务队列</p></li><li><p><strong>ThreadFactory</strong> threadFactory: 生成线程的工厂，另一个重载的方法就是带有这个参数的。</p></li><li><p><strong>RejectedExecutionHandler</strong> handler 当线程池满了，但还有新任务提交的时候，就会采用这个策略来进行处理 ThreadPoolExecutor 中已经定义好四个实现类了：</p></li></ol><h4 id="四种拒绝策略"><a href="#四种拒绝策略" class="headerlink" title="四种拒绝策略"></a>四种拒绝策略</h4><ul><li><p>public static class AbortPolicy implements RejectedExecutionHandler；</p><p>直接抛出 RejectedExecutionException 异常，这个是默认的处理策略。</p></li><li><p>public static class CallerRunsPolicy implements RejectedExecutionHandler；</p><p>如果线程池没有被关闭，就交由提交任务的线程来执行。</p></li><li><p>public static class DiscardOldestPolicy implements RejectedExecutionHandler</p><p>这个策略就是讲等待队列头的任务给扔掉，然后将这个新任务提交到等待队列中。</p></li><li><p>public static class DiscardPolicy implements RejectedExecutionHandler</p><p>   丢弃任务，不做任何处理。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JUC </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可重入锁、不可重入锁（转）</title>
      <link href="/2020/11/27/%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81%E3%80%81%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81%EF%BC%88%E8%BD%AC%EF%BC%89-%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81%E8%BD%AC/"/>
      <url>/2020/11/27/%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81%E3%80%81%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81%EF%BC%88%E8%BD%AC%EF%BC%89-%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文作者：航海到IT的转变,梦想一直在路上<br>原文链接：<a href="https://blog.csdn.net/wb_zjp283121/article/details/88973970">https://blog.csdn.net/wb_zjp283121/article/details/88973970</a></p></blockquote><br><h1 id="什么是可重入锁与不可重入锁？"><a href="#什么是可重入锁与不可重入锁？" class="headerlink" title="什么是可重入锁与不可重入锁？"></a><strong>什么是可重入锁与不可重入锁？</strong></h1><p>“<strong>可重入锁</strong>”这四个字分开来解释：</p><ul><li><strong>可</strong>：可以。</li><li><strong>重</strong>：再次。</li><li><strong>入</strong>：进入。</li><li><strong>锁</strong>：同步锁。</li></ul><p>综上所述，“<strong>可重入锁</strong>”就是这把同步锁可以再次进入。</p><p>进入什么？</p><p>进入<strong>同步域（即同步代码块&#x2F;方法或显式锁锁定的代码）</strong>。</p><p>通俗来讲，<strong>可重入锁就是一证通</strong>。</p><p><img src="http://p9.pstatp.com/large/pgc-image/80acb55db12e4d959f79f001db81407a" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>只需一个证就可以通过所有<strong>相同</strong>关卡：</p><p><img src="http://p3.pstatp.com/large/pgc-image/237fd4c8032742e6abe2427e72b38d2b" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>不可重入锁就是：<strong>即使每个关卡相同，你也得再拿一个一摸一样的证件来</strong>：</p><p><img src="http://p1.pstatp.com/large/pgc-image/d435143f8bb14dc5842a7e89c35e47bd" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>如果把证件看作是同步锁，把关卡看作是同步域（即同步代码块&#x2F;方法或显式锁锁定的代码），那么<strong>可重入锁指的是可重复可递归调用的锁，在外层使用锁之后，在内层仍然可以使用，并且不发生死锁，这样的锁就叫做可重入锁。与可重入锁相反，不可重入锁不可递归调用，递归调用就发生死锁。</strong></p><p>可重入锁和不可重入锁下面都有例子演示，希望大家可以结合例子体会可重入锁与不可重入锁的区别与联系。</p><p>看了不可重入锁的动画，大家心想：这不有病吗？已经有证件了，后面还要证件。所以，可重入锁就成了隐式锁和显式锁的默认选项。</p><p>隐式锁（即synchronized关键字使用的锁）默认是可重入锁，显式锁（即Lock）也有ReentrantLock这样的可重入锁。</p><p>单词Reentrant就是<strong>重入</strong>的意思，ReentrantLock即<strong>可重入锁</strong>。</p><p>隐式锁，即synchronized关键字用的锁。在<a href="https://www.toutiao.com/i6662379038067130891/?group_id=6662379038067130891">《“全栈2019”Java多线程第二十七章：Lock获取lock&#x2F;释放unlock锁》</a>一章中有介绍过，感兴趣的小伙伴可以前去阅读。</p><h1 id="3-隐式锁可重入锁例子"><a href="#3-隐式锁可重入锁例子" class="headerlink" title="3.隐式锁可重入锁例子"></a><strong>3.隐式锁可重入锁例子</strong></h1><p>我们先来看看隐式锁的可重入锁的例子。</p><p>隐式锁的可重入锁的例子很简单，这里我们先写一个匿名内部类实现Runnable接口的对象：</p><p><img src="http://p3.pstatp.com/large/pgc-image/2e7aa766c83640499a73797dd4484eec" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>先不着急把run()方法写好，先来把线程创建好。</p><p><strong>需要锁的地方一定是多个线程，但是这里我们只需1个线程即可，因为只要演示锁可重入即可，不需要多个线程去竞争锁，所以这里创建1个线程</strong>，并把runnable对象传递给线程：</p><p><img src="http://p1.pstatp.com/large/pgc-image/013b719324d7424ebd8fd75da22890d6" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>紧接着，我们启动线程的代码也写了：</p><p><img src="http://p1.pstatp.com/large/pgc-image/739c627090684d8695b43b1167a56c71" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>接下来，我们来完善run()方法内部。</p><p>在run()方法内部需要做的是，同步调用同步，即同步代码块&#x2F;方法内部执行同步代码块&#x2F;方法。我们先写一个外层同步代码块&#x2F;方法：</p><p><img src="http://p1.pstatp.com/large/pgc-image/c3cc4f08b2ca439da783a3c6c2f9b29c" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>其次是在同步代码块&#x2F;方法内部去执行另一个同步代码块&#x2F;方法：</p><p><img src="http://p3.pstatp.com/large/pgc-image/d34382acd70f4b4a939b9f76be212695" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>好了，例子写完了，运行程序，执行结果：</p><p><img src="http://p1.pstatp.com/large/pgc-image/f1274c4b72ee44189e6058eb2929bd66" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>从运行结果来看，符合预期。</p><p>为什么说符合预期？</p><p>因为只要同步递归调用不发生死锁就是可重入锁，在上例中，外层同步代码块嵌套内层同步代码块，满足同步递归调用，所以说隐式锁默认就是可重入锁。</p><h1 id="4-显式锁可重入锁例子"><a href="#4-显式锁可重入锁例子" class="headerlink" title="4.显式锁可重入锁例子"></a><strong>4.显式锁可重入锁例子</strong></h1><p>显式锁即Lock。在上一章<a href="https://www.toutiao.com/i6662379038067130891/?group_id=6662379038067130891">《“全栈2019”Java多线程第二十七章：Lock获取lock&#x2F;释放unlock锁》</a>中也有介绍过，感兴趣的小伙伴可以前去阅读。</p><p>下面我们就来用显式锁改写上一小节例子。</p><p>首先，我们创建出显式锁对象：</p><p><img src="http://p3.pstatp.com/large/pgc-image/b1bffc9b28d94947a3af4bcb8d0160ee" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>其次，我们将外层同步代码块开始的地方换成lock.lock()，结束的地方换成lock.unlock()。即这两个地方：</p><p><img src="http://p3.pstatp.com/large/pgc-image/a176f986527d4388b2b2d063adb98c90" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>换完之后的样子：</p><p><img src="http://p1.pstatp.com/large/pgc-image/c20fb114ad2c4eb495f13dcbccfc3241" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>然后是将内层同步代码块开始的地方换成lock.lock()，结束的地方换成lock.unlock()。即这两个地方：</p><p><img src="http://p3.pstatp.com/large/pgc-image/549cd2ec4d1c4dfda9186df90a310dd2" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>换完之后的样子：</p><p><img src="http://p3.pstatp.com/large/pgc-image/a01e70d7eb124255be7f0fd821b2eeb4" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>好了，例子用显式锁改写完成。</p><p>接下来运行程序，观察执行结果：</p><p><img src="http://p1.pstatp.com/large/pgc-image/610c71e757244c1e833be3f12fd679d8" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>从运行结果来看，符合预期。</p><p>为什么说符合预期？</p><p>因为我们例子经过显式锁改写之后没有发生死锁，所以显式锁默认的也是可重入锁。</p><p>另外，该例子不光没有产生死锁，而且还<strong>更加直观的展现了可重入锁获取锁释放锁的流程</strong>。</p><h1 id="5-可重入锁的工作原理"><a href="#5-可重入锁的工作原理" class="headerlink" title="5.可重入锁的工作原理"></a>5.可重入锁的工作原理</h1><p><strong>可重入锁的工作原理很简单，就是用一个计数器来记录锁被获取的次数，获取锁一次计数器+1，释放锁一次计数器-1，当计数器为0时，表示锁可用。</strong></p><p>我们简单的来模拟出这个工作原理。</p><p>先定义一个计数器变量：</p><p><img src="http://p3.pstatp.com/large/pgc-image/e3018b9a2db046b4beb964d17d002950" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>然后，在获取同步锁的地方让计数器+1，并输出该锁被获取的次数：</p><p><img src="http://p1.pstatp.com/large/pgc-image/4db27bd51bb54bc4b6a7e7d45dad057f" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>接着，在释放锁的地方让计数器-1，并输出该锁被获取的次数：</p><p><img src="http://p1.pstatp.com/large/pgc-image/c8239c9f4b6b431691d9e8a5db6c641f" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>同理，在内层同步代码块也这么做：</p><p><img src="http://p1.pstatp.com/large/pgc-image/3930b2ea4e654a68ba42a0f9f3ab230a" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>例子书写完毕，运行程序，执行结果：</p><p><img src="http://p3.pstatp.com/large/pgc-image/68c4778ed8a246159024da3225efb6bf" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>从运行结果来看，符合预期。</p><p><strong>这里需要注意的是，我们同步域需要的锁一定要是同一把锁</strong>。</p><h1 id="6-不可重入锁例子"><a href="#6-不可重入锁例子" class="headerlink" title="6.不可重入锁例子"></a><strong>6.不可重入锁例子</strong></h1><p>再看一遍不可重入锁的动画：</p><p><img src="http://p1.pstatp.com/large/pgc-image/e49f1553174c42318820d7bea46f43c7" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>可以看出不可重入锁是每一个同步域需要的锁即使一样，也要你重新获取锁。现有阶段的锁默认都是可重入锁。所以我们得<strong>自己造一把不可重入锁</strong>。</p><p>首先，定义一个不可重入锁NotReentrantLock类：</p><p><img src="http://p1.pstatp.com/large/pgc-image/9f3c47a7545b4f0cbf9a5b90039ecdab" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>然后，实现Lock接口：</p><p><img src="http://p3.pstatp.com/large/pgc-image/ec0b6e1df8774840a1908a474525f415" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>接着，我们需要着重实现两个方法即可，一个lock()方法：</p><p><img src="http://p1.pstatp.com/large/pgc-image/ca46549ac3014663bf577eec87f3de82" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>还有一个unlock()方法：</p><p><img src="http://p1.pstatp.com/large/pgc-image/b0b41c7d879e446db65cc6afc0370bab" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>怎么实现lock()方法呢？</p><p>根据不可重入锁的动画和定义来看，只需将锁和一个线程绑定即可。</p><p>于是，我们在类中定义一个Thread类型的变量，用于绑定线程：</p><p><img src="http://p1.pstatp.com/large/pgc-image/b3291a95e61e4ad3ae5f597ca84702ae" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>紧接着，我们在lock()方法中记录当前来获取锁的线程：</p><p><img src="http://p9.pstatp.com/large/pgc-image/3e21c9c00dae476082b1ecbfde3e4c1b" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>于是，线程绑定工作就做完了。</p><p><strong>如果该线程已经拿到锁之后，还要再获取锁时，就给它wait，即不可重入</strong>：</p><p><img src="http://p3.pstatp.com/large/pgc-image/3c3d164e8406495991a9fcdd1bc7599c" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>lock()方法实现完毕。</p><p>那unlock()方法怎么实现呢？</p><p><strong>如果当前线程为绑定线程时，我们将绑定线程变量thread置空即可</strong>。</p><p>先获取当前线程：</p><p><img src="http://p9.pstatp.com/large/pgc-image/0828457f51ec4b869ae735ea2a169291" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>如果当前线程不为绑定线程，则使当前线程等待：</p><p><img src="http://p3.pstatp.com/large/pgc-image/449d65c749ba4759bbec0ab5bdca4bb7" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>如果当前线程为绑定线程，则将绑定线程变量置空：</p><p><img src="http://p3.pstatp.com/large/pgc-image/81a312713b4e46be8f38a99d73d097da" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>最后唤醒所有等待该锁的线程：</p><p><img src="http://p3.pstatp.com/large/pgc-image/11728799ed0b460abc842ba551cb6399" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>至此，不可重入锁写完了。</p><p>下面，来用用自定义的不可重入锁。</p><p>还是上一小节的例子，只不过将ReentrantLock对象改为NotReentrantLock对象：</p><p><img src="http://p1.pstatp.com/large/pgc-image/7ca21ffbf82d4a69b7e913fcdc74cc20" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>例子改写完毕，运行程序，执行结果：</p><p><img src="http://p3.pstatp.com/large/pgc-image/e6311cd254304df89cd67b57956c34d3" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>从运行结果来看，符合预期。</p><p>外层同步域已经拿到锁了，它不能连续再拿第二次锁：</p><p><img src="http://p1.pstatp.com/large/pgc-image/dd7e149a015e49e2b19ac7f66b7b7b11" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>接下来，外层同步域执行到内层同步域：</p><p><img src="http://p1.pstatp.com/large/pgc-image/4a907303dbac4183b78d0a200f02498d" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>此时内层同步域也需要和外层同步域一样的锁，于是就去执行lock.lock()方法，当发生当前线程就是绑定线程时，就wait了：</p><p><img src="http://p1.pstatp.com/large/pgc-image/4977cad59cb14a09b3deb043ed939fb7" alt="“全栈2019”Java多线程第二十九章：可重入锁与不可重入锁详解"></p><p>于是，程序就停止不动。</p><h1 id="7-不可重入锁别名"><a href="#7-不可重入锁别名" class="headerlink" title="7.不可重入锁别名"></a>7.不可重入锁别名</h1><p>不可重入锁也叫<strong>自旋锁</strong>。</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h1><ul><li>可重入锁指的是可重复可递归调用的锁，在外层使用锁之后，在内层仍然可以使用，并且不发生死锁，这样的锁就叫做可重入锁。与可重入锁相反，不可重入锁不可递归调用，递归调用就发生死锁。</li><li>隐式锁（即synchronized关键字使用的锁）默认是可重入锁，显式锁（即Lock）也有ReentrantLock这样的可重入锁。</li><li>可重入锁的工作原理很简单，就是用一个计数器来记录锁被获取的次数，获取锁一次计数器+1，释放锁一次计数器-1，当计数器为0时，表示锁可用。</li><li>不可重入锁也叫自旋锁。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 锁 </tag>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>volatile关键字解析</title>
      <link href="/2020/11/27/volatile%E5%85%B3%E9%94%AE%E5%AD%97%E8%A7%A3%E6%9E%90-volatile%E5%85%B3%E9%94%AE%E5%AD%97%E8%A7%A3%E6%9E%90/"/>
      <url>/2020/11/27/volatile%E5%85%B3%E9%94%AE%E5%AD%97%E8%A7%A3%E6%9E%90-volatile%E5%85%B3%E9%94%AE%E5%AD%97%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<blockquote><p>作者：Matrix海子<br>出处：<a href="http://www.cnblogs.com/dolphin0520/">http://www.cnblogs.com/dolphin0520/</a></p></blockquote><p>Java并发编程：volatile关键字解析</p><p>　　 volatile这个关键字可能很多朋友都听说过，或许也都用过。在Java 5之前，它是一个备受争议的关键字，因为在程序中使用它往往会导致出人意料的结果。在Java 5之后，volatile关键字才得以重获生机。</p><p>　　volatile关键字虽然从字面上理解起来比较简单，但是要用好不是一件容易的事情。由于volatile关键字是与Java的内存模型有关的，因此在讲述volatile关键之前，我们先来了解一下与内存模型相关的概念和知识，然后分析了volatile关键字的实现原理，最后给出了几个使用volatile关键字的场景。</p><p>　　以下是本文的目录大纲：</p><p>　　一.内存模型的相关概念</p><p>　　二.并发编程中的三个概念</p><p>　　三.Java内存模型</p><p>　　四..深入剖析volatile关键字</p><p>　　五.使用volatile关键字的场景</p><p>　　若有不正之处请多多谅解，并欢迎批评指正。</p><p>　　请尊重作者劳动成果，转载请标明原文链接：</p><p>　　<a href="http://www.cnblogs.com/dolphin0520/p/3920373.html">http://www.cnblogs.com/dolphin0520/p/3920373.html</a></p><h2 id="一-内存模型的相关概念"><a href="#一-内存模型的相关概念" class="headerlink" title="一.内存模型的相关概念"></a>一.内存模型的相关概念</h2><p>　　大家都知道，计算机在执行程序时，每条指令都是在CPU中执行的，而执行指令过程中，势必涉及到数据的读取和写入。由于程序运行过程中的临时数据是存放在主存（物理内存）当中的，这时就存在一个问题，由于CPU执行速度很快，而从内存读取数据和向内存写入数据的过程跟CPU执行指令的速度比起来要慢的多，因此如果任何时候对数据的操作都要通过和内存的交互来进行，会大大降低指令执行的速度。因此在CPU里面就有了高速缓存。</p><p>　　也就是，当程序在运行过程中，会将运算需要的数据从主存复制一份到CPU的高速缓存当中，那么CPU进行计算时就可以直接从它的高速缓存读取数据和向其中写入数据，当运算结束之后，再将高速缓存中的数据刷新到主存当中。举个简单的例子，比如下面的这段代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i = i + 1;</span><br></pre></td></tr></table></figure><p> 　当线程执行这个语句时，会先从主存当中读取i的值，然后复制一份到高速缓存当中，然后CPU执行指令对i进行加1操作，然后将数据写入高速缓存，最后将高速缓存中i最新的值刷新到主存当中。</p><p>　　这个代码在单线程中运行是没有任何问题的，但是在多线程中运行就会有问题了。在多核CPU中，每条线程可能运行于不同的CPU中，因此每个线程运行时有自己的高速缓存（对单核CPU来说，其实也会出现这种问题，只不过是以线程调度的形式来分别执行的）。本文我们以多核CPU为例。</p><p>　　比如同时有2个线程执行这段代码，假如初始时i的值为0，那么我们希望两个线程执行完之后i的值变为2。但是事实会是这样吗？</p><p>　　可能存在下面一种情况：初始时，两个线程分别读取i的值存入各自所在的CPU的高速缓存当中，然后线程1进行加1操作，然后把i的最新值1写入到内存。此时线程2的高速缓存当中i的值还是0，进行加1操作之后，i的值为1，然后线程2把i的值写入内存。</p><p>　　最终结果i的值是1，而不是2。这就是著名的缓存一致性问题。通常称这种被多个线程访问的变量为共享变量。</p><p>　　也就是说，如果一个变量在多个CPU中都存在缓存（一般在多线程编程时才会出现），那么就可能存在缓存不一致的问题。</p><p>　　为了解决缓存不一致性问题，通常来说有以下2种解决方法：</p><p>　　1）通过在总线加LOCK#锁的方式</p><p>　　2）通过缓存一致性协议</p><p>　　这2种方式都是硬件层面上提供的方式。</p><p>　　在早期的CPU当中，是通过在总线上加LOCK#锁的形式来解决缓存不一致的问题。因为CPU和其他部件进行通信都是通过总线来进行的，如果对总线加LOCK#锁的话，也就是说阻塞了其他CPU对其他部件访问（如内存），从而使得只能有一个CPU能使用这个变量的内存。比如上面例子中 如果一个线程在执行 i &#x3D; i +1，如果在执行这段代码的过程中，在总线上发出了LCOK#锁的信号，那么只有等待这段代码完全执行完毕之后，其他CPU才能从变量i所在的内存读取变量，然后进行相应的操作。这样就解决了缓存不一致的问题。</p><p>　　但是上面的方式会有一个问题，由于在锁住总线期间，其他CPU无法访问内存，导致效率低下。</p><p>　　所以就出现了缓存一致性协议。最出名的就是Intel 的MESI协议，MESI协议保证了每个缓存中使用的共享变量的副本是一致的。它核心的思想是：当CPU写数据时，如果发现操作的变量是共享变量，即在其他CPU中也存在该变量的副本，会发出信号通知其他CPU将该变量的缓存行置为无效状态，因此当其他CPU需要读取这个变量时，发现自己缓存中缓存该变量的缓存行是无效的，那么它就会从内存重新读取。</p><p><img src="https://images0.cnblogs.com/blog/288799/201408/212219343783699.jpg" alt="img"></p><h2 id="二-并发编程中的三个概念"><a href="#二-并发编程中的三个概念" class="headerlink" title="二.并发编程中的三个概念"></a>二.并发编程中的三个概念</h2><p>　　在并发编程中，我们通常会遇到以下三个问题：原子性问题，可见性问题，有序性问题。我们先看具体看一下这三个概念：</p><p><strong>1.原子性</strong></p><p>　　原子性：即一个操作或者多个操作 要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。</p><p>　　一个很经典的例子就是银行账户转账问题：</p><p>　　比如从账户A向账户B转1000元，那么必然包括2个操作：从账户A减去1000元，往账户B加上1000元。</p><p>　　试想一下，如果这2个操作不具备原子性，会造成什么样的后果。假如从账户A减去1000元之后，操作突然中止。然后又从B取出了500元，取出500元之后，再执行 往账户B加上1000元 的操作。这样就会导致账户A虽然减去了1000元，但是账户B没有收到这个转过来的1000元。</p><p>　　所以这2个操作必须要具备原子性才能保证不出现一些意外的问题。</p><p>　　同样地反映到并发编程中会出现什么结果呢？</p><p>　　举个最简单的例子，大家想一下假如为一个32位的变量赋值过程不具备原子性的话，会发生什么后果？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">9</span>;</span><br></pre></td></tr></table></figure><p> 　假若一个线程执行到这个语句时，我暂且假设为一个32位的变量赋值包括两个过程：为低16位赋值，为高16位赋值。</p><p>　　那么就可能发生一种情况：当将低16位数值写入之后，突然被中断，而此时又有一个线程去读取i的值，那么读取到的就是错误的数据。</p><p><strong>2.可见性</strong></p><p>　　可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。</p><p>　　举个简单的例子，看下面这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线程1执行的代码</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">i = <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//线程2执行的代码</span></span><br><span class="line">j = i;</span><br></pre></td></tr></table></figure><p> 　假若执行线程1的是CPU1，执行线程2的是CPU2。由上面的分析可知，当线程1执行 i &#x3D;10这句时，会先把i的初始值加载到CPU1的高速缓存中，然后赋值为10，那么在CPU1的高速缓存当中i的值变为10了，却没有立即写入到主存当中。</p><p>　　此时线程2执行 j &#x3D; i，它会先去主存读取i的值并加载到CPU2的缓存当中，注意此时内存当中i的值还是0，那么就会使得j的值为0，而不是10.</p><p>　　这就是可见性问题，线程1对变量i修改了之后，线程2没有立即看到线程1修改的值。</p><p><strong>3.有序性</strong></p><p>　　有序性：即程序执行的顺序按照代码的先后顺序执行。举个简单的例子，看下面这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;              </span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">i = <span class="number">1</span>;                <span class="comment">//语句1  </span></span><br><span class="line">flag = <span class="literal">true</span>;          <span class="comment">//语句2</span></span><br></pre></td></tr></table></figure><p> 　上面代码定义了一个int型变量，定义了一个boolean类型变量，然后分别对两个变量进行赋值操作。从代码顺序上看，语句1是在语句2前面的，那么JVM在真正执行这段代码的时候会保证语句1一定会在语句2前面执行吗？不一定，为什么呢？这里可能会发生指令重排序（Instruction Reorder）。</p><p>　　下面解释一下什么是指令重排序，一般来说，处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的。</p><p>　　比如上面的代码中，语句1和语句2谁先执行对最终的程序结果并没有影响，那么就有可能在执行过程中，语句2先执行而语句1后执行。</p><p>　　但是要注意，虽然处理器会对指令进行重排序，但是它会保证程序最终结果会和代码顺序执行结果相同，那么它靠什么保证的呢？再看下面一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;    <span class="comment">//语句1</span></span><br><span class="line"><span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">2</span>;    <span class="comment">//语句2</span></span><br><span class="line">a = a + <span class="number">3</span>;    <span class="comment">//语句3</span></span><br><span class="line">r = a*a;     <span class="comment">//语句4</span></span><br></pre></td></tr></table></figure><p> 　这段代码有4个语句，那么可能的一个执行顺序是：</p><p>　　<img src="https://images0.cnblogs.com/blog/288799/201408/212305263939989.jpg" alt="img"></p><p>　　</p><p>　　那么可不可能是这个执行顺序呢： 语句2  语句1  语句4  语句3</p><p>　　不可能，因为处理器在进行重排序时是会考虑指令之间的数据依赖性，如果一个指令Instruction 2必须用到Instruction 1的结果，那么处理器会保证Instruction 1会在Instruction 2之前执行。</p><p>　　虽然重排序不会影响单个线程内程序执行的结果，但是多线程呢？下面看一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线程1:</span></span><br><span class="line">context = loadContext();   <span class="comment">//语句1</span></span><br><span class="line">inited = <span class="literal">true</span>;             <span class="comment">//语句2</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//线程2:</span></span><br><span class="line"><span class="keyword">while</span>(!inited )&#123;</span><br><span class="line">  sleep()</span><br><span class="line">&#125;</span><br><span class="line">doSomethingwithconfig(context);</span><br></pre></td></tr></table></figure><p> 　上面代码中，由于语句1和语句2没有数据依赖性，因此可能会被重排序。假如发生了重排序，在线程1执行过程中先执行语句2，而此是线程2会以为初始化工作已经完成，那么就会跳出while循环，去执行doSomethingwithconfig(context)方法，而此时context并没有被初始化，就会导致程序出错。</p><p> 　从上面可以看出，指令重排序不会影响单个线程的执行，但是会影响到线程并发执行的正确性。</p><p>　　也就是说，要想并发程序正确地执行，必须要保证原子性、可见性以及有序性。只要有一个没有被保证，就有可能会导致程序运行不正确。</p><h2 id="三-Java内存模型"><a href="#三-Java内存模型" class="headerlink" title="三.Java内存模型"></a>三.Java内存模型</h2><p>　　在前面谈到了一些关于内存模型以及并发编程中可能会出现的一些问题。下面我们来看一下Java内存模型，研究一下Java内存模型为我们提供了哪些保证以及在java中提供了哪些方法和机制来让我们在进行多线程编程时能够保证程序执行的正确性。</p><p>　　在Java虚拟机规范中试图定义一种Java内存模型（Java Memory Model，JMM）来屏蔽各个硬件平台和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的内存访问效果。那么Java内存模型规定了哪些东西呢，它定义了程序中变量的访问规则，往大一点说是定义了程序执行的次序。注意，为了获得较好的执行性能，Java内存模型并没有限制执行引擎使用处理器的寄存器或者高速缓存来提升指令执行速度，也没有限制编译器对指令进行重排序。也就是说，在java内存模型中，也会存在缓存一致性问题和指令重排序的问题。</p><p>　　Java内存模型规定所有的变量都是存在主存当中（类似于前面说的物理内存），每个线程都有自己的工作内存（类似于前面的高速缓存）。线程对变量的所有操作都必须在工作内存中进行，而不能直接对主存进行操作。并且每个线程不能访问其他线程的工作内存。</p><p>　　举个简单的例子：在java中，执行下面这个语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i = 10;</span><br></pre></td></tr></table></figure><p> 　执行线程必须先在自己的工作线程中对变量i所在的缓存行进行赋值操作，然后再写入主存当中。而不是直接将数值10写入主存当中。</p><p>　　那么Java语言 本身对 原子性、可见性以及有序性提供了哪些保证呢？</p><p><strong>1.原子性</strong></p><p>　　在Java中，对基本数据类型的变量的读取和赋值操作是原子性操作，即这些操作是不可被中断的，要么执行，要么不执行。</p><p>　　上面一句话虽然看起来简单，但是理解起来并不是那么容易。看下面一个例子i：</p><p>　　请分析以下哪些操作是原子性操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span>;         <span class="comment">//语句1</span></span><br><span class="line">y = x;         <span class="comment">//语句2</span></span><br><span class="line">x++;           <span class="comment">//语句3</span></span><br><span class="line">x = x + <span class="number">1</span>;     <span class="comment">//语句4</span></span><br></pre></td></tr></table></figure><p> 　咋一看，有些朋友可能会说上面的4个语句中的操作都是原子性操作。其实只有语句1是原子性操作，其他三个语句都不是原子性操作。</p><p>　　语句1是直接将数值10赋值给x，也就是说线程执行这个语句的会直接将数值10写入到工作内存中。</p><p>　　语句2实际上包含2个操作，它先要去读取x的值，再将x的值写入工作内存，虽然读取x的值以及 将x的值写入工作内存 这2个操作都是原子性操作，但是合起来就不是原子性操作了。</p><p>　　同样的，x++和 x &#x3D; x+1包括3个操作：读取x的值，进行加1操作，写入新的值。</p><p> 　所以上面4个语句只有语句1的操作具备原子性。</p><p>　　也就是说，只有简单的读取、赋值（而且必须是将数字赋值给某个变量，变量之间的相互赋值不是原子操作）才是原子操作。</p><p>　　不过这里有一点需要注意：在32位平台下，对64位数据的读取和赋值是需要通过两个操作来完成的，不能保证其原子性。但是好像在最新的JDK中，JVM已经保证对64位数据的读取和赋值也是原子性操作了。</p><p>　　从上面可以看出，Java内存模型只保证了基本读取和赋值是原子性操作，如果要实现更大范围操作的原子性，可以通过synchronized和Lock来实现。由于synchronized和Lock能够保证任一时刻只有一个线程执行该代码块，那么自然就不存在原子性问题了，从而保证了原子性。</p><p><strong>2.可见性</strong></p><p>　　对于可见性，Java提供了volatile关键字来保证可见性。</p><p>　　当一个共享变量被volatile修饰时，它会保证修改的值会立即被更新到主存，当有其他线程需要读取时，它会去内存中读取新值。</p><p>　　而普通的共享变量不能保证可见性，因为普通共享变量被修改之后，什么时候被写入主存是不确定的，当其他线程去读取时，此时内存中可能还是原来的旧值，因此无法保证可见性。</p><p>　　另外，通过synchronized和Lock也能够保证可见性，synchronized和Lock能保证同一时刻只有一个线程获取锁然后执行同步代码，并且在释放锁之前会将对变量的修改刷新到主存当中。因此可以保证可见性。</p><p><strong>3.有序性</strong></p><p>　　在Java内存模型中，允许编译器和处理器对指令进行重排序，但是重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。</p><p>　　在Java里面，可以通过volatile关键字来保证一定的“有序性”（具体原理在下一节讲述）。另外可以通过synchronized和Lock来保证有序性，很显然，synchronized和Lock保证每个时刻是有一个线程执行同步代码，相当于是让线程顺序执行同步代码，自然就保证了有序性。</p><p>　　另外，Java内存模型具备一些先天的“有序性”，即不需要通过任何手段就能够得到保证的有序性，这个通常也称为 happens-before 原则。如果两个操作的执行次序无法从happens-before原则推导出来，那么它们就不能保证它们的有序性，虚拟机可以随意地对它们进行重排序。</p><p>　　下面就来具体介绍下happens-before原则（先行发生原则）：</p><ul><li>程序次序规则：一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作</li><li>锁定规则：一个unLock操作先行发生于后面对同一个锁额lock操作</li><li>volatile变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作</li><li>传递规则：如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生于操作C</li><li>线程启动规则：Thread对象的start()方法先行发生于此线程的每个一个动作</li><li>线程中断规则：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生</li><li>线程终结规则：线程中所有的操作都先行发生于线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值手段检测到线程已经终止执行</li><li>对象终结规则：一个对象的初始化完成先行发生于他的finalize()方法的开始</li></ul><p>　　这8条原则摘自《深入理解Java虚拟机》。</p><p>　　这8条规则中，前4条规则是比较重要的，后4条规则都是显而易见的。</p><p>　　下面我们来解释一下前4条规则：</p><p>　　对于程序次序规则来说，我的理解就是一段程序代码的执行在单个线程中看起来是有序的。注意，虽然这条规则中提到“书写在前面的操作先行发生于书写在后面的操作”，这个应该是程序看起来执行的顺序是按照代码顺序执行的，因为虚拟机可能会对程序代码进行指令重排序。虽然进行重排序，但是最终执行的结果是与程序顺序执行的结果一致的，它只会对不存在数据依赖性的指令进行重排序。因此，在单个线程中，程序执行看起来是有序执行的，这一点要注意理解。事实上，这个规则是用来保证程序在单线程中执行结果的正确性，但无法保证程序在多线程中执行的正确性。</p><p>　　第二条规则也比较容易理解，也就是说无论在单线程中还是多线程中，同一个锁如果出于被锁定的状态，那么必须先对锁进行了释放操作，后面才能继续进行lock操作。</p><p>　　第三条规则是一条比较重要的规则，也是后文将要重点讲述的内容。直观地解释就是，如果一个线程先去写一个变量，然后一个线程去进行读取，那么写入操作肯定会先行发生于读操作。</p><p>　　第四条规则实际上就是体现happens-before原则具备传递性。</p><h2 id="四-深入剖析volatile关键字"><a href="#四-深入剖析volatile关键字" class="headerlink" title="四.深入剖析volatile关键字"></a>四.深入剖析volatile关键字</h2><p>　　在前面讲述了很多东西，其实都是为讲述volatile关键字作铺垫，那么接下来我们就进入主题。</p><p><strong>1.volatile关键字的两层语义</strong></p><p>　　一旦一个共享变量（类的成员变量、类的静态成员变量）被volatile修饰之后，那么就具备了两层语义：</p><p>　　1）保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。</p><p>　　2）禁止进行指令重排序。</p><p>　　先看一段代码，假如线程1先执行，线程2后执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线程1</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">stop</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span>(!stop)&#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//线程2</span></span><br><span class="line">stop = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p> 　这段代码是很典型的一段代码，很多人在中断线程时可能都会采用这种标记办法。但是事实上，这段代码会完全运行正确么？即一定会将线程中断么？不一定，也许在大多数时候，这个代码能够把线程中断，但是也有可能会导致无法中断线程（虽然这个可能性很小，但是只要一旦发生这种情况就会造成死循环了）。</p><p>　　下面解释一下这段代码为何有可能导致无法中断线程。在前面已经解释过，每个线程在运行过程中都有自己的工作内存，那么线程1在运行的时候，会将stop变量的值拷贝一份放在自己的工作内存当中。</p><p>　　那么当线程2更改了stop变量的值之后，但是还没来得及写入主存当中，线程2转去做其他事情了，那么线程1由于不知道线程2对stop变量的更改，因此还会一直循环下去。</p><p>　　但是用volatile修饰之后就变得不一样了：</p><p>　　第一：使用volatile关键字会强制将修改的值立即写入主存；</p><p>　　第二：使用volatile关键字的话，当线程2进行修改时，会导致线程1的工作内存中缓存变量stop的缓存行无效（反映到硬件层的话，就是CPU的L1或者L2缓存中对应的缓存行无效）；</p><p>　　第三：由于线程1的工作内存中缓存变量stop的缓存行无效，所以线程1再次读取变量stop的值时会去主存读取。</p><p>　　那么在线程2修改stop值时（当然这里包括2个操作，修改线程2工作内存中的值，然后将修改后的值写入内存），会使得线程1的工作内存中缓存变量stop的缓存行无效，然后线程1读取时，发现自己的缓存行无效，它会等待缓存行对应的主存地址被更新之后，然后去对应的主存读取最新的值。</p><p>　　那么线程1读取到的就是最新的正确的值。</p><p><strong>2.volatile保证原子性吗？</strong></p><p>　　从上面知道volatile关键字保证了操作的可见性，但是volatile能保证对变量的操作是原子性吗？</p><p>　　下面看一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">inc</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increase</span><span class="params">()</span> &#123;</span><br><span class="line">        inc++;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000</span>;j++)</span><br><span class="line">                        test.increase();</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;.start();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">while</span>(Thread.activeCount()&gt;<span class="number">1</span>)  <span class="comment">//保证前面的线程都执行完</span></span><br><span class="line">            Thread.<span class="keyword">yield</span>();</span><br><span class="line">        System.out.println(test.inc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 　大家想一下这段程序的输出结果是多少？也许有些朋友认为是10000。但是事实上运行它会发现每次运行结果都不一致，都是一个小于10000的数字。</p><p>　　可能有的朋友就会有疑问，不对啊，上面是对变量inc进行自增操作，由于volatile保证了可见性，那么在每个线程中对inc自增完之后，在其他线程中都能看到修改后的值啊，所以有10个线程分别进行了1000次操作，那么最终inc的值应该是1000*10&#x3D;10000。</p><p>　　这里面就有一个误区了，volatile关键字能保证可见性没有错，但是上面的程序错在没能保证原子性。可见性只能保证每次读取的是最新的值，但是volatile没办法保证对变量的操作的原子性。</p><p>　　在前面已经提到过，自增操作是不具备原子性的，它包括读取变量的原始值、进行加1操作、写入工作内存。那么就是说自增操作的三个子操作可能会分割开执行，就有可能导致下面这种情况出现：</p><p>　　假如某个时刻变量inc的值为10，</p><p>　　线程1对变量进行自增操作，线程1先读取了变量inc的原始值，然后线程1被阻塞了；</p><p>　　然后线程2对变量进行自增操作，线程2也去读取变量inc的原始值，由于线程1只是对变量inc进行读取操作，而没有对变量进行修改操作，所以不会导致线程2的工作内存中缓存变量inc的缓存行无效，所以线程2会直接去主存读取inc的值，发现inc的值时10，然后进行加1操作，并把11写入工作内存，最后写入主存。</p><p>　　然后线程1接着进行加1操作，由于已经读取了inc的值，注意此时在线程1的工作内存中inc的值仍然为10，所以线程1对inc进行加1操作后inc的值为11，然后将11写入工作内存，最后写入主存。</p><p>　　那么两个线程分别进行了一次自增操作后，inc只增加了1。</p><p>　　解释到这里，可能有朋友会有疑问，不对啊，前面不是保证一个变量在修改volatile变量时，会让缓存行无效吗？然后其他线程去读就会读到新的值，对，这个没错。这个就是上面的happens-before规则中的volatile变量规则，但是要注意，线程1对变量进行读取操作之后，被阻塞了的话，并没有对inc值进行修改。然后虽然volatile能保证线程2对变量inc的值读取是从内存中读取的，但是线程1没有进行修改，所以线程2根本就不会看到修改的值。</p><p>　　根源就在这里，自增操作不是原子性操作，而且volatile也无法保证对变量的任何操作都是原子性的。</p><p>　　把上面的代码改成以下任何一种都可以达到效果：</p><p>　　采用synchronized：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="type">int</span> <span class="variable">inc</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">increase</span><span class="params">()</span> &#123;</span><br><span class="line">        inc++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000</span>;j++)</span><br><span class="line">                        test.increase();</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;.start();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(Thread.activeCount()&gt;<span class="number">1</span>)  <span class="comment">//保证前面的线程都执行完</span></span><br><span class="line">            Thread.<span class="keyword">yield</span>();</span><br><span class="line">        System.out.println(test.inc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　采用Lock：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="type">int</span> <span class="variable">inc</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">increase</span><span class="params">()</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inc++;</span><br><span class="line">        &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000</span>;j++)</span><br><span class="line">                        test.increase();</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;.start();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(Thread.activeCount()&gt;<span class="number">1</span>)  <span class="comment">//保证前面的线程都执行完</span></span><br><span class="line">            Thread.<span class="keyword">yield</span>();</span><br><span class="line">        System.out.println(test.inc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　采用AtomicInteger：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="type">AtomicInteger</span> <span class="variable">inc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">increase</span><span class="params">()</span> &#123;</span><br><span class="line">        inc.getAndIncrement();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000</span>;j++)</span><br><span class="line">                        test.increase();</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;.start();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(Thread.activeCount()&gt;<span class="number">1</span>)  <span class="comment">//保证前面的线程都执行完</span></span><br><span class="line">            Thread.<span class="keyword">yield</span>();</span><br><span class="line">        System.out.println(test.inc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　在java 1.5的java.util.concurrent.atomic包下提供了一些原子操作类，即对基本数据类型的 自增（加1操作），自减（减1操作）、以及加法操作（加一个数），减法操作（减一个数）进行了封装，保证这些操作是原子性操作。atomic是利用CAS来实现原子性操作的（Compare And Swap），CAS实际上是利用处理器提供的CMPXCHG指令实现的，而处理器执行CMPXCHG指令是一个原子性操作。</p><p><strong>3.volatile能保证有序性吗？</strong></p><p>　　在前面提到volatile关键字能禁止指令重排序，所以volatile能在一定程度上保证有序性。</p><p>　　volatile关键字禁止指令重排序有两层意思：</p><p>　　1）当程序执行到volatile变量的读操作或者写操作时，在其前面的操作的更改肯定全部已经进行，且结果已经对后面的操作可见；在其后面的操作肯定还没有进行；</p><p>　　2）在进行指令优化时，不能将在对volatile变量访问的语句放在其后面执行，也不能把volatile变量后面的语句放到其前面执行。</p><p>　　可能上面说的比较绕，举个简单的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//x、y为非volatile变量</span></span><br><span class="line"><span class="comment">//flag为volatile变量</span></span><br><span class="line"> </span><br><span class="line">x = <span class="number">2</span>;        <span class="comment">//语句1</span></span><br><span class="line">y = <span class="number">0</span>;        <span class="comment">//语句2</span></span><br><span class="line">flag = <span class="literal">true</span>;  <span class="comment">//语句3</span></span><br><span class="line">x = <span class="number">4</span>;         <span class="comment">//语句4</span></span><br><span class="line">y = -<span class="number">1</span>;       <span class="comment">//语句5</span></span><br></pre></td></tr></table></figure><p> 　由于flag变量为volatile变量，那么在进行指令重排序的过程的时候，不会将语句3放到语句1、语句2前面，也不会讲语句3放到语句4、语句5后面。但是要注意语句1和语句2的顺序、语句4和语句5的顺序是不作任何保证的。</p><p>　　并且volatile关键字能保证，执行到语句3时，语句1和语句2必定是执行完毕了的，且语句1和语句2的执行结果对语句3、语句4、语句5是可见的。</p><p>　　那么我们回到前面举的一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线程1:</span></span><br><span class="line">context = loadContext();   <span class="comment">//语句1</span></span><br><span class="line">inited = <span class="literal">true</span>;             <span class="comment">//语句2</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//线程2:</span></span><br><span class="line"><span class="keyword">while</span>(!inited )&#123;</span><br><span class="line">  sleep()</span><br><span class="line">&#125;</span><br><span class="line">doSomethingwithconfig(context);</span><br></pre></td></tr></table></figure><p> 　前面举这个例子的时候，提到有可能语句2会在语句1之前执行，那么久可能导致context还没被初始化，而线程2中就使用未初始化的context去进行操作，导致程序出错。</p><p>　　这里如果用volatile关键字对inited变量进行修饰，就不会出现这种问题了，因为当执行到语句2时，必定能保证context已经初始化完毕。</p><p><strong>4.volatile的原理和实现机制</strong></p><p>　　前面讲述了源于volatile关键字的一些使用，下面我们来探讨一下volatile到底如何保证可见性和禁止指令重排序的。</p><p>　　下面这段话摘自《深入理解Java虚拟机》：</p><p>　　“观察加入volatile关键字和没有加入volatile关键字时所生成的汇编代码发现，加入volatile关键字时，会多出一个lock前缀指令”</p><p>　　lock前缀指令实际上相当于一个内存屏障（也成内存栅栏），内存屏障会提供3个功能：</p><p>　　1）它确保指令重排序时不会把其后面的指令排到内存屏障之前的位置，也不会把前面的指令排到内存屏障的后面；即在执行到内存屏障这句指令时，在它前面的操作已经全部完成；</p><p>　　2）它会强制将对缓存的修改操作立即写入主存；</p><p>　　3）如果是写操作，它会导致其他CPU中对应的缓存行无效。</p><h2 id="五-使用volatile关键字的场景"><a href="#五-使用volatile关键字的场景" class="headerlink" title="五.使用volatile关键字的场景"></a>五.使用volatile关键字的场景</h2><p>　　synchronized关键字是防止多个线程同时执行一段代码，那么就会很影响程序执行效率，而volatile关键字在某些情况下性能要优于synchronized，但是要注意volatile关键字是无法替代synchronized关键字的，因为volatile关键字无法保证操作的原子性。通常来说，使用volatile必须具备以下2个条件：</p><p>　　1）对变量的写操作不依赖于当前值</p><p>　　2）该变量没有包含在具有其他变量的不变式中</p><p>　　实际上，这些条件表明，可以被写入 volatile 变量的这些有效值独立于任何程序的状态，包括变量的当前状态。</p><p>　　事实上，我的理解就是上面的2个条件需要保证操作是原子性操作，才能保证使用volatile关键字的程序在并发时能够正确执行。</p><p>　　下面列举几个Java中使用volatile的几个场景。</p><p><strong>1.状态标记量</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span>(!flag)&#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFlag</span><span class="params">()</span> &#123;</span><br><span class="line">    flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">inited</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//线程1:</span></span><br><span class="line">context = loadContext();  </span><br><span class="line">inited = <span class="literal">true</span>;            </span><br><span class="line"> </span><br><span class="line"><span class="comment">//线程2:</span></span><br><span class="line"><span class="keyword">while</span>(!inited )&#123;</span><br><span class="line">sleep()</span><br><span class="line">&#125;</span><br><span class="line">doSomethingwithconfig(context);</span><br></pre></td></tr></table></figure><p><strong>2.double check</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span>(instance==<span class="literal">null</span>)</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 　至于为何需要这么写请参考：</p><p>　　《Java 中的双重检查（Double-Check）》<a href="http://blog.csdn.net/dl88250/article/details/5439024">http://blog.csdn.net/dl88250/article/details/5439024</a></p><p>　　和<a href="http://www.iteye.com/topic/652440">http://www.iteye.com/topic/652440</a></p><p>　　参考资料：</p><p>　　《Java编程思想》</p><p>　　《深入理解Java虚拟机》</p><p>　　<a href="http://jiangzhengjun.iteye.com/blog/652532">http://jiangzhengjun.iteye.com/blog/652532</a></p><p>　　<a href="http://blog.sina.com.cn/s/blog_7bee8dd50101fu8n.html">http://blog.sina.com.cn/s/blog_7bee8dd50101fu8n.html</a></p><p>　　<a href="http://ifeve.com/volatile/">http://ifeve.com/volatile/</a></p><p>　　<a href="http://blog.csdn.net/ccit0519/article/details/11241403">http://blog.csdn.net/ccit0519/article/details/11241403</a></p><p>　　<a href="http://blog.csdn.net/ns_code/article/details/17101369">http://blog.csdn.net/ns_code/article/details/17101369</a></p><p>　　<a href="http://www.cnblogs.com/kevinwu/archive/2012/05/02/2479464.html">http://www.cnblogs.com/kevinwu/archive/2012/05/02/2479464.html</a></p><p>　　<a href="http://www.cppblog.com/elva/archive/2011/01/21/139019.html">http://www.cppblog.com/elva/archive/2011/01/21/139019.html</a></p><p>　　<a href="http://ifeve.com/volatile-array-visiblity/">http://ifeve.com/volatile-array-visiblity/</a></p><p>　　<a href="http://www.bdqn.cn/news/201312/12579.shtml">http://www.bdqn.cn/news/201312/12579.shtml</a></p><p>　　<a href="http://exploer.blog.51cto.com/7123589/1193399">http://exploer.blog.51cto.com/7123589/1193399</a></p><p>　　<a href="http://www.cnblogs.com/Mainz/p/3556430.html">http://www.cnblogs.com/Mainz/p/3556430.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>乐观锁：CAS（转）</title>
      <link href="/2020/11/27/%E4%B9%90%E8%A7%82%E9%94%81%EF%BC%9ACAS%EF%BC%88%E8%BD%AC%EF%BC%89-%E4%B9%90%E8%A7%82%E9%94%81cas%E8%BD%AC/"/>
      <url>/2020/11/27/%E4%B9%90%E8%A7%82%E9%94%81%EF%BC%9ACAS%EF%BC%88%E8%BD%AC%EF%BC%89-%E4%B9%90%E8%A7%82%E9%94%81cas%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文作者：xiao潇<br>原文连接：<a href="https://blog.csdn.net/xiaobudian0381/article/details/91564648">https://blog.csdn.net/xiaobudian0381/article/details/91564648</a></p></blockquote><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><p>本文从 <strong>CAS实例</strong> –&gt; <strong>什么是UnSafe类</strong> –&gt; <strong>CAS底层</strong> –&gt;<strong>AtomicInteger.getAndIncrement() 进行分析</strong> –&gt;<strong>CAS缺点</strong> –&gt; <strong>什么是ABA问题</strong> –&gt;<strong>原子引用</strong> –&gt;<strong>如何解决ABA问题</strong> –&gt;<strong>时间戳原子引用</strong></p><h2 id="CAS实例"><a href="#CAS实例" class="headerlink" title="CAS实例"></a>CAS实例</h2><p>CAS：比较并交换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">integer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">// true 100</span></span><br><span class="line">        System.out.println(integer.compareAndSet(<span class="number">5</span>, <span class="number">100</span>) +<span class="string">&quot; &quot;</span>+ integer.get());</span><br><span class="line">        integer.compareAndSet(<span class="number">5</span>,<span class="number">30</span>);</span><br><span class="line">        <span class="comment">//false 100</span></span><br><span class="line">        System.out.println(integer.compareAndSet(<span class="number">5</span>, <span class="number">30</span>) +<span class="string">&quot; &quot;</span>+ integer.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1234567891011</span></span><br></pre></td></tr></table></figure><h2 id="什么是UnSafe类"><a href="#什么是UnSafe类" class="headerlink" title="什么是UnSafe类"></a>什么是UnSafe类</h2><p>UnSafe类是CAS的核心类，由于Java无法直接访问底层系统，所以要通过本地的native方法进行访问，UnSafe类就相当于一个后门，基于该类可以直接操作特定内存中的数据，其内部就像C的指针一样操作内存。观察UnSafe类的源码，可以看到UnSafe类都是native方法，也就是说Unsafe类都是直接调用操作系统底层资源执行任务。</p><h2 id="CAS底层"><a href="#CAS底层" class="headerlink" title="CAS底层"></a>CAS底层</h2><p><strong>java.util.concurrent</strong>完全建立在CAS之上，CAS有三个操作数，内存值V、旧的预期值A、要修改的值B，如果 V &#x3D;&#x3D; A, 那么 V &#x3D;B，返回true；否则什么都不做返回false。</p><ol><li>CAS 的全称 Compare-And-Swap，它是一条 CPU 并发</li><li>CAS 说白了就是使用真实值和期望值进行比较，如果相等的话，进行修改成功，否则修改失败。</li><li>在Java中 CAS 底层使用的就是自旋锁 + UnSafe类。</li></ol><p>CAS并发原语体现在Java语言就是UnSafe类中的各个方法，调用UnSafe类的CAS方法，JVM会帮我们实现出CAS的汇编指令，这是一种完全依赖于硬件的功能，通过它体现了原子性操作。CAS是系统原语，属于操作系统指令范畴，若干条指令组成，执行必须是连续的，并且执行过程中不会被中断，也就是说CAS是一种CPU的原子指令，不会造成所谓的数据不一致情况。</p><h2 id="AtomicInteger-getAndIncrement-进行分析"><a href="#AtomicInteger-getAndIncrement-进行分析" class="headerlink" title="AtomicInteger.getAndIncrement() 进行分析"></a>AtomicInteger.getAndIncrement() 进行分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndIncrement</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> unsafe.getAndAddInt(<span class="built_in">this</span>, valueOffset, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>this是 AtomicInteger实例对象；</li><li>valueOffset是基于该实例对象的偏移量；</li><li>1是需要加的值<br>然后调用的是 UnSafe类 的 getAndAddInt方法。</li></ol><h3 id="UnSafe-的-getAndAddInt"><a href="#UnSafe-的-getAndAddInt" class="headerlink" title="UnSafe 的 getAndAddInt"></a>UnSafe 的 getAndAddInt</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndAddInt</span><span class="params">(Object var1, <span class="type">long</span> var2, <span class="type">int</span> var4)</span> &#123;</span><br><span class="line">    <span class="type">int</span> var5;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        var5 = <span class="built_in">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">    &#125; <span class="keyword">while</span>(!<span class="built_in">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>var1 AtomicInteger 对象本身</li><li>var2 内存地址偏移量</li><li>var4 要进行加多少</li><li>var5 在通过var1 var2 找出了主物理内存上面真实的值 用当前该对象的值比较var5 如果相同更新var5 + var4 并返回true</li><li>如果不同，继续取值然后再比较，直至更新完成</li></ol><h2 id="CAS缺点？"><a href="#CAS缺点？" class="headerlink" title="CAS缺点？"></a>CAS缺点？</h2><ol><li>循环时间长开销大；<br>如果线程数比较多的话，CAS请求失败会一直循环下去，这样的话CPU带来的开销就比较大。</li><li>只能保证一个共享变量的原子操作；<br>对于多个共享变量操作时，循环 CAS 就无法保证操作的原子性。</li><li>会出现ABA问题。</li></ol><h2 id="什么是ABA问题"><a href="#什么是ABA问题" class="headerlink" title="什么是ABA问题"></a>什么是ABA问题</h2><p>举例说明：有两个人A、B，桌子上有一个耳机，然后A去拿耳机用，桌子上换成饼干，耳机用完，桌子上又换回了耳机。对于桌子而言状态变化：耳机 — 饼干 — 耳机。然后B同学去桌子拿耳机用，在B看来桌子上的耳机没有变化，但是过程中耳机已经被使用过了，这就是ABA问题。换句话说就是： 开头和结尾是一样的，中间的过程会发生变化。</p><h2 id="原子引用"><a href="#原子引用" class="headerlink" title="原子引用"></a>原子引用</h2><p><strong>AtomicReference</strong> 一般的都是保证基本类型的原子性，对于一个类而言可以使用原子引用进行封装。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AtomicReference&lt;User&gt; are = <span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><p>以上就完成了保证User类原子性。</p><h2 id="如何解决ABA问题"><a href="#如何解决ABA问题" class="headerlink" title="如何解决ABA问题"></a>如何解决ABA问题</h2><p>使用CAS+版本号进行解决，对一个数据如果修改了的话，那么版本号就进行+1，然后再循环比较的时候，不仅仅比较值再根据版本号就可以解决ABA问题。</p><h2 id="时间戳原子引用"><a href="#时间戳原子引用" class="headerlink" title="时间戳原子引用"></a>时间戳原子引用</h2><p>其中原有的原子性上面加入了版本号的概念：<br>使用案例：线程B修改值的时候，发现虽然内存中的值和预期的值一样，但是由于版本号已经发生了改变，所以修改失败。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StampedReferenceDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        AtomicStampedReference&lt;Integer&gt; stampedReference = <span class="keyword">new</span> <span class="title class_">AtomicStampedReference</span>&lt;&gt;(<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">stamp</span> <span class="operator">=</span> stampedReference.getStamp();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 的版本号为：&quot;</span> + stamp);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            stampedReference.compareAndSet(<span class="number">100</span>, <span class="number">101</span>, stampedReference.getStamp(), stampedReference.getStamp() + <span class="number">1</span> );</span><br><span class="line">            stampedReference.compareAndSet(<span class="number">101</span>, <span class="number">100</span>, stampedReference.getStamp(), stampedReference.getStamp() + <span class="number">1</span> );</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">stamp</span> <span class="operator">=</span> stampedReference.getStamp();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 的版本号为：&quot;</span> + stamp);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> stampedReference.compareAndSet(<span class="number">100</span>, <span class="number">2019</span>, stamp, stamp + <span class="number">1</span>);</span><br><span class="line">            System.out.println(b); <span class="comment">// false</span></span><br><span class="line">            System.out.println(stampedReference.getReference()); <span class="comment">// 100</span></span><br><span class="line">            System.out.println(stampedReference.getStamp()); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动装箱、拆箱的时间消耗</title>
      <link href="/2020/11/26/%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%E3%80%81%E6%8B%86%E7%AE%B1%E7%9A%84%E6%97%B6%E9%97%B4%E6%B6%88%E8%80%97-%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%E6%8B%86%E7%AE%B1%E7%9A%84%E6%97%B6%E9%97%B4%E6%B6%88%E8%80%97/"/>
      <url>/2020/11/26/%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%E3%80%81%E6%8B%86%E7%AE%B1%E7%9A%84%E6%97%B6%E9%97%B4%E6%B6%88%E8%80%97-%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%E6%8B%86%E7%AE%B1%E7%9A%84%E6%97%B6%E9%97%B4%E6%B6%88%E8%80%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>装箱就是自动将基本数据类型转换为包装器类型:  比如 int-&gt; Integer<br>拆箱就是自动将包装器类型转换为基本数据类型:  比如  Integer -&gt; int</p></blockquote><h3 id="对比耗时"><a href="#对比耗时" class="headerlink" title="对比耗时"></a>对比耗时</h3><h4 id="1-使用自动装箱、拆箱"><a href="#1-使用自动装箱、拆箱" class="headerlink" title="1. 使用自动装箱、拆箱"></a>1. 使用自动装箱、拆箱</h4><p>用for循环，从1-1亿 进行累加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="comment">//包装类型</span></span><br><span class="line">       <span class="type">Long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10_0000_0000</span>; i++) &#123;</span><br><span class="line">           sum += i;</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">&quot;sum==&gt; &quot;</span> + sum);</span><br><span class="line">       <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">       System.out.println(<span class="string">&quot;Test1 :take &quot;</span> + (end - start)/<span class="number">1000.0f</span> +  <span class="string">&quot; seconds&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>耗时<br>sum&#x3D;&#x3D;&gt; 499999999500000000<br>Test1 :take 5.892 seconds</p><h4 id="2-不使用自动装箱、拆箱"><a href="#2-不使用自动装箱、拆箱" class="headerlink" title="2. 不使用自动装箱、拆箱"></a>2. 不使用自动装箱、拆箱</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="comment">//普通类型</span></span><br><span class="line">       <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10_0000_0000</span>; i++) &#123;</span><br><span class="line">           sum += i;</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">&quot;sum==&gt; &quot;</span> + sum);</span><br><span class="line">       <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">       System.out.println(<span class="string">&quot;Test1 :take &quot;</span> + (end - start)/<span class="number">1000.0f</span> +  <span class="string">&quot; seconds&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>耗时<br>sum&#x3D;&#x3D;&gt; 499999999500000000<br>Test1 :take 0.74 seconds</p><h4 id="3-结论"><a href="#3-结论" class="headerlink" title="3. 结论"></a>3. 结论</h4><ul><li><strong>频繁的</strong>自动装箱、拆箱会耗费大量的时间</li><li>在执行大量运算的时候，尽量使用普通类型进行运算，在结果处使用包装类型即可</li></ul><h3 id="原因探究"><a href="#原因探究" class="headerlink" title="原因探究"></a>原因探究</h3><h4 id="自动装箱"><a href="#自动装箱" class="headerlink" title="自动装箱"></a>自动装箱</h4><p>比如在执行Long l &#x3D; 100 的时候，实际上执行了 Long.valueOf（100）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//valueOf源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">valueOf</span><span class="params">(<span class="type">long</span> l)</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">      <span class="keyword">if</span> (l &gt;= -<span class="number">128</span> &amp;&amp; l &lt;= <span class="number">127</span>) &#123; <span class="comment">// will cache</span></span><br><span class="line">          <span class="keyword">return</span> LongCache.cache[(<span class="type">int</span>)l + offset];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Long</span>(l);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也就是说在 -128~127之间是从缓存里取出的。一旦超出了这个范围就会创建一个Long的对象。所以装箱的过程会增加内存的消耗，影响性能。</p><p>这个创建对象的过程就是耗费时间的原因所在。执行上面的代码不断创建了Long的对象，自然执行之间会久一些。</p><h4 id="自动拆箱"><a href="#自动拆箱" class="headerlink" title="自动拆箱"></a>自动拆箱</h4><p>Long obj&#x3D; 100;<br>long l &#x3D; obj;(此处自动拆箱）<br>实际上调用了 obj.longValue();方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//源码</span></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the value of this &#123;<span class="doctag">@code</span> Long&#125; as a</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> long&#125; value.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">longValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA查看JDK源码</title>
      <link href="/2020/11/26/IDEA%E6%9F%A5%E7%9C%8BJDK%E6%BA%90%E7%A0%81-idea%E6%9F%A5%E7%9C%8Bjdk%E6%BA%90%E7%A0%81/"/>
      <url>/2020/11/26/IDEA%E6%9F%A5%E7%9C%8BJDK%E6%BA%90%E7%A0%81-idea%E6%9F%A5%E7%9C%8Bjdk%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p><strong>查看源码时，IDEA默认是反编译的文件。并没有源码的注释，和参数变量名。</strong></p><p>比如List：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">List</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">Collection</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>;</span><br><span class="line">    isEmpty();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决方法</strong>：</p><p>File -&gt; Project Structure -&gt; SDKs -&gt; SourcePath -&gt; 导入JDK中src.zip压缩包</p><p><img src="https://hopestation.top/upload/2020/11/image-66f17f202e4b43dc8bedbd0d28fbb9a4.png" alt="image.png"></p><p><img src="https://hopestation.top/upload/2020/11/image-a47f22c9cc574ebd9f6befe3e63e05f0.png" alt="image.png"></p><p>再次查看源码，已经带有注释，方便我们理解代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">List</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">Collection</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="comment">// Query Operations</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the number of elements in this list.  If this list contains</span></span><br><span class="line"><span class="comment">     * more than &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt; elements, returns</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the number of elements in this list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns &lt;tt&gt;true&lt;/tt&gt; if this list contains no elements.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this list contains no elements</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CONCAT函数</title>
      <link href="/2020/11/25/CONCAT%E5%87%BD%E6%95%B0-concat%E5%87%BD%E6%95%B0/"/>
      <url>/2020/11/25/CONCAT%E5%87%BD%E6%95%B0-concat%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="CONCAT函数"><a href="#CONCAT函数" class="headerlink" title="CONCAT函数"></a>CONCAT函数</h3><h4 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h4><p>语法：concat(str1, str2,…)</p><p>返回结果为连接参数产生的字符串，如果有任何一个参数为null，则返回值为null</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> concat(id,<span class="string">&#x27;,&#x27;</span>,name,<span class="string">&#x27;,&#x27;</span>,age) <span class="keyword">from</span> <span class="keyword">user</span></span><br></pre></td></tr></table></figure><h4 id="concat-ws"><a href="#concat-ws" class="headerlink" title="concat_ws()"></a>concat_ws()</h4><p>功能：和concat()一样，将多个字符串连接成一个字符串，但是可以一次性指定分隔符～（concat_ws就是concat with separator）</p><p>语法：concat_ws(separator, str1, str2, …)</p><p>说明：第一个参数指定分隔符。需要注意的是分隔符不能为null，如果为null，则返回结果为null。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> concat_ws(<span class="string">&#x27;,&#x27;</span>,id,name) <span class="keyword">from</span> <span class="keyword">user</span></span><br></pre></td></tr></table></figure><h4 id="group-concat"><a href="#group-concat" class="headerlink" title="group_concat()"></a>group_concat()</h4><p>功能：将group by产生的同一个分组中的值连接起来，返回一个字符串结果。</p><p>语法：group_concat( [distinct] 要连接的字段 [order by 排序字段 asc&#x2F;desc ] [separator ‘分隔符’] )</p><p>说明：通过使用distinct可以排除重复值；如果希望对结果中的值进行排序，可以使用order by子句；separator是一个字符串值，缺省为一个逗号。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name group_concat(id <span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">desc</span> separator <span class="string">&#x27;-&#x27;</span>) <span class="keyword">from</span> <span class="keyword">user</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS获取当前月份的第一天和最后一天</title>
      <link href="/2020/11/25/JS%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%9C%88%E4%BB%BD%E7%9A%84%E7%AC%AC%E4%B8%80%E5%A4%A9%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E5%A4%A9-js%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%9C%88%E4%BB%BD%E7%9A%84%E7%AC%AC%E4%B8%80%E5%A4%A9%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E5%A4%A9/"/>
      <url>/2020/11/25/JS%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%9C%88%E4%BB%BD%E7%9A%84%E7%AC%AC%E4%B8%80%E5%A4%A9%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E5%A4%A9-js%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%9C%88%E4%BB%BD%E7%9A%84%E7%AC%AC%E4%B8%80%E5%A4%A9%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<h4 id="获取当前月份的-第一天"><a href="#获取当前月份的-第一天" class="headerlink" title="获取当前月份的 第一天"></a>获取当前月份的 第一天</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getCurrentMonthFirst</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">       date.<span class="title function_">setDate</span>(<span class="number">1</span>);</span><br><span class="line">       <span class="keyword">var</span> month = <span class="built_in">parseInt</span>(date.<span class="title function_">getMonth</span>()+<span class="number">1</span>);</span><br><span class="line">       <span class="keyword">var</span> day = date.<span class="title function_">getDate</span>();</span><br><span class="line">       <span class="keyword">if</span> (month &lt; <span class="number">10</span>) &#123;</span><br><span class="line">           month = <span class="string">&#x27;0&#x27;</span> + month</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (day &lt; <span class="number">10</span>) &#123;</span><br><span class="line">           day = <span class="string">&#x27;0&#x27;</span> + day</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> date.<span class="title function_">getFullYear</span>() + <span class="string">&#x27;-&#x27;</span> + month + <span class="string">&#x27;-&#x27;</span> + day;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="当前月份的-最后一天"><a href="#当前月份的-最后一天" class="headerlink" title="当前月份的 最后一天"></a>当前月份的 最后一天</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getCurrentMonthLast</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="keyword">var</span> date=<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">       <span class="keyword">var</span> currentMonth=date.<span class="title function_">getMonth</span>();</span><br><span class="line">       <span class="keyword">var</span> nextMonth=++currentMonth;</span><br><span class="line">       <span class="keyword">var</span> nextMonthFirstDay=<span class="keyword">new</span> <span class="title class_">Date</span>(date.<span class="title function_">getFullYear</span>(),nextMonth,<span class="number">1</span>);</span><br><span class="line">       <span class="keyword">var</span> oneDay=<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>;</span><br><span class="line">       <span class="keyword">var</span> lastTime = <span class="keyword">new</span> <span class="title class_">Date</span>(nextMonthFirstDay-oneDay);</span><br><span class="line">       <span class="keyword">var</span> month = <span class="built_in">parseInt</span>(lastTime.<span class="title function_">getMonth</span>()+<span class="number">1</span>);</span><br><span class="line">       <span class="keyword">var</span> day = lastTime.<span class="title function_">getDate</span>();</span><br><span class="line">       <span class="keyword">if</span> (month &lt; <span class="number">10</span>) &#123;</span><br><span class="line">           month = <span class="string">&#x27;0&#x27;</span> + month</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (day &lt; <span class="number">10</span>) &#123;</span><br><span class="line">           day = <span class="string">&#x27;0&#x27;</span> + day</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> date.<span class="title function_">getFullYear</span>() + <span class="string">&#x27;-&#x27;</span> + month + <span class="string">&#x27;-&#x27;</span> + day;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA插件：阿里代码规范检查</title>
      <link href="/2020/11/23/IDEA%E6%8F%92%E4%BB%B6%EF%BC%9A%E9%98%BF%E9%87%8C%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E6%A3%80%E6%9F%A5-idea%E6%8F%92%E4%BB%B6%E9%98%BF%E9%87%8C%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E6%A3%80%E6%9F%A5/"/>
      <url>/2020/11/23/IDEA%E6%8F%92%E4%BB%B6%EF%BC%9A%E9%98%BF%E9%87%8C%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E6%A3%80%E6%9F%A5-idea%E6%8F%92%E4%BB%B6%E9%98%BF%E9%87%8C%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E6%A3%80%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>IDEA-&gt;File-&gt;Setting</p><p><img src="https://hopestation.top/upload/2020/11/image-7afd9eb65cef4838920e172850b1953f.png" alt="image.png"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><img src="https://hopestation.top/upload/2020/11/image-6dd35cf6c99d439fa2337ec0bc7882ac.png" alt="image.png"></p><p>检测结果</p><p><img src="https://hopestation.top/upload/2020/11/image-5a1dc0d372f44402b4bde8408b5043d1.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上传文件的大小设置</title>
      <link href="/2020/11/20/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E7%9A%84%E5%A4%A7%E5%B0%8F%E8%AE%BE%E7%BD%AE-%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E7%9A%84%E5%A4%A7%E5%B0%8F%E8%AE%BE%E7%BD%AE/"/>
      <url>/2020/11/20/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E7%9A%84%E5%A4%A7%E5%B0%8F%E8%AE%BE%E7%BD%AE-%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E7%9A%84%E5%A4%A7%E5%B0%8F%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>VUE</li><li>spring boot项目</li><li>Nginx</li></ul><h2 id="文件大小限制"><a href="#文件大小限制" class="headerlink" title="文件大小限制"></a>文件大小限制</h2><ol><li>application.yml配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: xxx</span><br><span class="line">  servlet:</span><br><span class="line">    multipart:</span><br><span class="line">      enabled: true #是否启用http上传处理</span><br><span class="line">      max-request-size: 5MB #最大请求文件的大小</span><br><span class="line">      max-file-size: 5MB #设置单个文件最大长度</span><br></pre></td></tr></table></figure><ol start="2"><li>Nginx配置</li></ol><p>vi &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</p><p>修改http下的client_max_body_size为5M（你所允许的最大文件大小）</p><ol start="3"><li>VUE代码限制</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用的是ElementUI的组件</span></span><br><span class="line"> </span><br><span class="line">&lt;el-upload</span><br><span class="line">                :before-upload=<span class="string">&quot;beforeAvatarUpload&quot;</span></span><br><span class="line">                :on-success=<span class="string">&quot;onSuccess&quot;</span></span><br><span class="line">                :on-preview=<span class="string">&quot;handlePictureCardPreview&quot;</span></span><br><span class="line">                :on-remove=<span class="string">&quot;handleRemove&quot;</span></span><br><span class="line">                :action=<span class="string">&quot;imgActionURL&quot;</span></span><br><span class="line">                :file-list=<span class="string">&quot;fileList&quot;</span></span><br><span class="line">                :disabled=<span class="string">&quot;uploadDisable&quot;</span></span><br><span class="line">                list-type=<span class="string">&quot;picture-card&quot;</span>&gt;</span><br><span class="line">                <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-plus&quot;</span>/&gt;</span></span></span><br><span class="line">              &lt;/el-upload&gt;</span><br><span class="line">              <span class="language-xml"><span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;dialogVisible&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">img</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">:src</span>=<span class="string">&quot;dialogImageUrl&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"> // 文件上传成功时的钩子</span></span><br><span class="line"><span class="language-xml">    onSuccess(res, file, fileList) &#123;</span></span><br><span class="line"><span class="language-xml">      this.fileList = fileList</span></span><br><span class="line"><span class="language-xml">      if (res.code === 200) &#123;</span></span><br><span class="line"><span class="language-xml">        this.fileList[this.fileList.length - 1].url = this.fileList[</span></span><br><span class="line"><span class="language-xml">          this.fileList.length - 1</span></span><br><span class="line"><span class="language-xml">        ].response.data</span></span><br><span class="line"><span class="language-xml">      &#125; else &#123;</span></span><br><span class="line"><span class="language-xml">        this.$message.error(&#x27;上传失败请重新上传&#x27;)</span></span><br><span class="line"><span class="language-xml">      &#125;</span></span><br><span class="line"><span class="language-xml">    &#125;,</span></span><br><span class="line"><span class="language-xml">    // 上传文件之前的钩子</span></span><br><span class="line"><span class="language-xml">    beforeAvatarUpload(file) &#123;</span></span><br><span class="line"><span class="language-xml">      let isJPG = file.type === &#x27;image/jpeg&#x27;</span></span><br><span class="line"><span class="language-xml">      let isPNG = file.type === &#x27;image/png&#x27;</span></span><br><span class="line"><span class="language-xml">      let isLt5M = file.size / 1024 / 1024 &lt; 5</span></span><br><span class="line"><span class="language-xml">      if (this.fileList.length &gt; 4) &#123;</span></span><br><span class="line"><span class="language-xml">        this.$message.error(&#x27;最多只能上传5张图片!&#x27;)</span></span><br><span class="line"><span class="language-xml">        return false</span></span><br><span class="line"><span class="language-xml">      &#125;</span></span><br><span class="line"><span class="language-xml">      if (!isJPG &amp;&amp; !isPNG) &#123;</span></span><br><span class="line"><span class="language-xml">        this.$message.error(&#x27;上传图片只能是 JPG或PNG 格式!&#x27;)</span></span><br><span class="line"><span class="language-xml">        return false</span></span><br><span class="line"><span class="language-xml">      &#125;</span></span><br><span class="line"><span class="language-xml">      if (!isLt5M) &#123;</span></span><br><span class="line"><span class="language-xml">        this.$message.error(&#x27;上传图片大小不能超过 5MB!&#x27;)</span></span><br><span class="line"><span class="language-xml">        return false</span></span><br><span class="line"><span class="language-xml">      &#125;</span></span><br><span class="line"><span class="language-xml">    &#125;,</span></span><br><span class="line"><span class="language-xml">    handleRemove(file, fileList) &#123;</span></span><br><span class="line"><span class="language-xml">      this.fileList = fileList</span></span><br><span class="line"><span class="language-xml">    &#125;,</span></span><br><span class="line"><span class="language-xml">    handlePictureCardPreview(file) &#123;</span></span><br><span class="line"><span class="language-xml">      this.dialogImageUrl = file.url</span></span><br><span class="line"><span class="language-xml">      this.dialogVisible = true</span></span><br><span class="line"><span class="language-xml">    &#125;,</span></span><br></pre></td></tr></table></figure><ol start="3"><li>Controller代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;file.xxImg&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String xxImg;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;file.xx&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/uploadImg&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;Object&gt; <span class="title function_">uploadImg</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">now</span>    <span class="operator">=</span>    Calendar.getInstance();</span><br><span class="line">        <span class="type">String</span> <span class="variable">year</span> <span class="operator">=</span> Integer.toString(now.get(Calendar.YEAR));</span><br><span class="line">        <span class="type">String</span> <span class="variable">month</span> <span class="operator">=</span> Integer.toString(now.get(Calendar.MONTH)+<span class="number">1</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">savePath</span> <span class="operator">=</span> xxImg+ <span class="string">&quot;Rectify/&quot;</span> + year + <span class="string">&quot;/&quot;</span> + month + <span class="string">&quot;/&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> Utils.getUUID() + suffix.substring(suffix.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">            System.out.println(fileName);</span><br><span class="line">            <span class="type">File</span> <span class="variable">tempFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(savePath);</span><br><span class="line">            <span class="comment">// 判断路径是否存在,不存在就创建一个</span></span><br><span class="line">            <span class="keyword">if</span> (!tempFile.exists()) &#123;</span><br><span class="line">                tempFile.mkdirs();</span><br><span class="line">            &#125;</span><br><span class="line">            is = file.getInputStream();</span><br><span class="line">            os = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(tempFile.getPath() + File.separator + fileName);</span><br><span class="line">            <span class="type">byte</span>[] bs = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((len = is.read(bs)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 写入输出文件</span></span><br><span class="line">                os.write(bs, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">resUrl</span> <span class="operator">=</span> service + savePath + fileName;</span><br><span class="line">            <span class="keyword">return</span> CommonResult.success(resUrl);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> CommonResult.forbidden(<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 完毕，关闭所有链接</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                os.close();</span><br><span class="line">                is.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 文件 </tag>
            
            <tag> 下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程（一）</title>
      <link href="/2020/11/18/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%80/"/>
      <url>/2020/11/18/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p><a href="https://gitee.com/hopestation/thread-learn"><img src="https://gitee.com/hopestation/thread-learn/widgets/widget_card.svg?colors=393222,ebdfc1,fffae5,d8ca9f,393222,a28b40" alt="hopeStation/thread-learn"></a></p><h1 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h1><script src='https://gitee.com/hopestation/thread-learn/widget_preview' async defer></script><div id="osc-gitee-widget-tag"></div><style>.osc_pro_color {color: #393222 !important;}.osc_panel_color {background-color: #ebdfc1 !important;}.osc_background_color {background-color: #fffae5 !important;}.osc_border_color {border-color: #d8ca9f !important;}.osc_desc_color {color: #393222 !important;}.osc_link_color * {color: #a28b40 !important;}</style><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h4 id="JUC"><a href="#JUC" class="headerlink" title="JUC"></a>JUC</h4><p>它是<code>java.util .concurrent</code>工具包的简称。这是一个处理线程的工具包，JDK 1.5开始出现的</p><h4 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h4><p>指在系统中正在运行的一个应用程序；程序一旦运行就是进程；是<strong>系统进行资源分配和调度的基本单位</strong></p><h4 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h4><p>是操作系统能够进行运算调度的最小单位。<strong>它被包含在进程之中</strong>，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。Java里默认有两个线程：主线程（Main方法）、和垃圾回收（GC）线程</p><p>创建线程的方式有三种：</p><ul><li>继承Thread</li><li>实现Runnable接口</li><li>实现Callable接口</li></ul><p>在调用start方法开启线程时，底层调用start0方法，接下来start0()方法会调用JVM_StartThread()方法，是通过C++或C的代码，来通过操作系统创建线程的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.threadStatus != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalThreadStateException</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.group.add(<span class="built_in">this</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">var1</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//调用start0</span></span><br><span class="line">            <span class="built_in">this</span>.start0();</span><br><span class="line">            var1 = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!var1) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.group.threadStartFailed(<span class="built_in">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable var8) &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//本地方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">start0</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h4 id="并发、并行"><a href="#并发、并行" class="headerlink" title="并发、并行"></a>并发、并行</h4><ul><li>并发：Concurrent</li><li>并行：Parallel</li></ul><p>Erlang 之父 Joe Armstrong 用一张5岁小孩都能看懂的图解释了并发与并行的区别</p><p><img src="https://pic4.zhimg.com/80/v2-674f0d37fca4fac1bd2df28a2b78e633_720w.jpg?source=1940ef5c" alt="img"></p><p>并发是两个队列<strong>交替</strong>使用一台咖啡机，并行是两个队列<strong>同时</strong>使用两台咖啡机，如果串行，一个队列使用一台咖啡机，那么哪怕前面那个人便秘了去厕所呆半天，后面的人也只能死等着他回来才能去接咖啡，这效率无疑是最低的。</p><p>并发和并行都可以是很多个线程，就看这些线程能不能同时被（多个）cpu执行，如果可以就说明是并行，而并发是多个线程被（一个）cpu 轮流切换着执行。</p><h4 id="CPU核心数"><a href="#CPU核心数" class="headerlink" title="CPU核心数"></a>CPU核心数</h4><p>java.lang.Runtime.availableProcessors() 方法: 返回可用处理器的Java虚拟机的数量</p><p>这个值可以在虚拟机中的某个调用过程中改变。应用程序是可用的处理器数量敏感，因此应该偶尔查询该属性，并适当调整自己的资源使用情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span> + Runtime.getRuntime().availableProcessors());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并发编程的<strong>本质</strong>：充分利用CPU的资源</p><h4 id="Sleep、Wait"><a href="#Sleep、Wait" class="headerlink" title="Sleep、Wait"></a>Sleep、Wait</h4><p>区别如下</p><ul><li><p><strong>类</strong>：这两个方法来自不同的类分别是Thread和Object</p></li><li><p><strong>是否释放锁</strong>：最主要是sleep方法没有释放同步锁，而wait方法释放了同步锁，使得其他线程可以使用同步控制块或者方法。</p></li><li><p><strong>使用范围</strong> ：wait，notify和notifyAll只能在同步控制方法或者同步控制块里面使用，而sleep可以在任何地方使用（使用范围）</p></li><li><p><strong>作用</strong>：sleep是Thread类的静态方法。sleep的作用是让线程休眠制定的时间，在时间到达时恢复</p><p>wait是Object的方法，也就是说可以对任意一个对象调用wait方法，调用wait方法将会将调用者的线程挂起，直到其他线程调用同一个对象的notify方法才会重新激活调用者。</p></li></ul><p>而实际上<strong>常用的睡眠方法</strong>是<code>java.util.concurrent.TimeUnit</code>包下的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">10</span>);<span class="comment">//等待10秒</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="comment">//TimeUnit.DAYS.sleep(1);//等待1天，还有小时，分钟等单位</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line">Thu Nov <span class="number">12</span> <span class="number">11</span>:<span class="number">21</span>:<span class="number">59</span> GMT+08:<span class="number">00</span> <span class="number">2020</span></span><br><span class="line">Thu Nov <span class="number">12</span> <span class="number">11</span>:<span class="number">22</span>:09 GMT+08:<span class="number">00</span> <span class="number">2020</span></span><br></pre></td></tr></table></figure><h2 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h2><p>线程的状态，在Java中规定在了<strong>Thread.State</strong>这个枚举类型中，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a thread which has not yet started.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * NEW：一个尚未启动的线程的状态。也称之为初始状态、开始状态。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    NEW,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a runnable thread.  A thread in the runnable</span></span><br><span class="line"><span class="comment">     * state is executing in the Java virtual machine but it may</span></span><br><span class="line"><span class="comment">     * be waiting for other resources from the operating system</span></span><br><span class="line"><span class="comment">     * such as processor.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * RUNNABLE：一个可以运行的线程的状态，可以运行是指这个线程已经在JVM中运行了，</span></span><br><span class="line"><span class="comment">     * 但是有可能正在等待其他的系统资源。也称之为就绪状态、可运行状态。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RUNNABLE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a thread blocked waiting for a monitor lock.</span></span><br><span class="line"><span class="comment">     * A thread in the blocked state is waiting for a monitor lock</span></span><br><span class="line"><span class="comment">     * to enter a synchronized block/method or</span></span><br><span class="line"><span class="comment">     * reenter a synchronized block/method after calling</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> Object#wait() Object.wait&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * BLOCKED：一个线程因为等待监视锁而被阻塞的状态。也称之为阻塞状态。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    BLOCKED,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a waiting thread.</span></span><br><span class="line"><span class="comment">     * A thread is in the waiting state due to calling one of the</span></span><br><span class="line"><span class="comment">     * following methods:</span></span><br><span class="line"><span class="comment">     * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> Object#wait() Object.wait&#125; with no timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> #join() Thread.join&#125; with no timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> LockSupport#park() LockSupport.park&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;A thread in the waiting state is waiting for another thread to</span></span><br><span class="line"><span class="comment">     * perform a particular action.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * For example, a thread that has called &lt;tt&gt;Object.wait()&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">     * on an object is waiting for another thread to call</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;Object.notify()&lt;/tt&gt; or &lt;tt&gt;Object.notifyAll()&lt;/tt&gt; on</span></span><br><span class="line"><span class="comment">     * that object. A thread that has called &lt;tt&gt;Thread.join()&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">     * is waiting for a specified thread to terminate.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * WAITING：一个正在等待的线程的状态。也称之为等待状态。造成线程等待的原因有三种:</span></span><br><span class="line"><span class="comment">     * 分别是调用Object.wait()、join()以及LockSupport.park()方法。</span></span><br><span class="line"><span class="comment">     * 处于等待状态的线程，正在等待其他线程去执行一个特定的操作。</span></span><br><span class="line"><span class="comment">     * 例如：因为wait()而等待的线程正在等待另一个线程去调用notify()或notifyAll();</span></span><br><span class="line"><span class="comment">     * 一个因为join()而等待的线程正在等待另一个线程结束。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    WAITING,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a waiting thread with a specified waiting time.</span></span><br><span class="line"><span class="comment">     * A thread is in the timed waiting state due to calling one of</span></span><br><span class="line"><span class="comment">     * the following methods with a specified positive waiting time:</span></span><br><span class="line"><span class="comment">     * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> #sleep Thread.sleep&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> Object#wait(long) Object.wait&#125; with timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> #join(long) Thread.join&#125; with timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> LockSupport#parkNanos LockSupport.parkNanos&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> LockSupport#parkUntil LockSupport.parkUntil&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * TIMED_WAITING：一个在限定时间内等待的线程的状态。也称之为限时等待状态。</span></span><br><span class="line"><span class="comment">     * 造成线程限时等待状态的原因有五种:</span></span><br><span class="line"><span class="comment">     * 分别是：Thread.sleep(long)、Object.wait(long)、join(long)、</span></span><br><span class="line"><span class="comment">     * LockSupport.parkNanos(obj,long)和LockSupport.parkUntil(obj,long)。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TIMED_WAITING,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a terminated thread.</span></span><br><span class="line"><span class="comment">     * The thread has completed execution.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * TERMINATED：一个完全运行完成的线程的状态。也称之为终止状态、结束状态。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TERMINATED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程状态转换图</p><p><img src="https://hopestation.top/upload/2020/11/image-e1539a3ef3fe46fea0e3d3ac834beb8f.png" alt="image.png"></p><h2 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h2><p>Lock是一个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util.concurrent.locks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Lock</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> var1, TimeUnit var3)</span> <span class="keyword">throws</span> InterruptedException;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Condition <span class="title function_">newCondition</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实现类</p><p><img src="https://hopestation.top/upload/2020/12/image-20201112132926316-4c0013a666514239a82ed8a877d1c804.png" alt="image20201112132926316.png"></p><p>常用的锁：ReentrantLock（可重入锁）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReentrantLock</span> <span class="keyword">implements</span> <span class="title class_">Lock</span>, Serializable &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ReentrantLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//默认是非公平锁</span></span><br><span class="line">        <span class="built_in">this</span>.sync = <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>.NonfairSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ReentrantLock</span><span class="params">(<span class="type">boolean</span> var1)</span> &#123;</span><br><span class="line">        <span class="comment">//根据参数确定</span></span><br><span class="line">        <span class="built_in">this</span>.sync = (ReentrantLock.Sync)(var1 ? <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>.FairSync() : <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>.NonfairSync());</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>NonfairSync 非公平锁：也就是没有先后顺序，看CPU心情（调度顺序），Synchronized就是非公平锁</li></ul><ul><li>FairSync 公平锁，进行排队，先来的（等待时间久的）先执行，后来的（等待时间短的）后执行</li></ul><h2 id="Synchronized与Lock的区别"><a href="#Synchronized与Lock的区别" class="headerlink" title="Synchronized与Lock的区别"></a>Synchronized与Lock的区别</h2><ol><li><p><strong>来源</strong>：<br>lock是一个接口，而synchronized是java的一个关键字，synchronized是内置的语言实现</p><blockquote><h4 id="synchronized和lock的用法区别"><a href="#synchronized和lock的用法区别" class="headerlink" title="synchronized和lock的用法区别"></a>synchronized和lock的用法区别</h4><p>synchronized：在需要同步的对象中加入此控制，synchronized可以加在方法上，也可以加在特定代码块中，括号中表示需要锁的对象。</p><p>lock：一般使用ReentrantLock类做为锁。在加锁和解锁处需要通过lock()和unlock()显示指出。所以一般会在finally块中写unlock()以防死锁。</p></blockquote></li><li><p><strong>类型</strong><br>synchronized是可重入锁，不可以中断的，非公平<br>Lock可重入锁，可以中断，默认非公平，根据参数可以设置公平、非公平</p></li><li><p><strong>异常是否释放锁</strong>：<br>synchronized在发生异常时候会自动释放占有的锁，因此不会出现死锁；而lock发生异常时候，不会主动释放占有的锁，必须手动unlock来释放锁，可能引起死锁的发生。（所以最好将同步代码块用try catch包起来，finally中写入unlock，避免死锁的发生。）</p></li><li><p><strong>是否响应中断</strong><br>lock等待锁过程中可以用interrupt来中断等待，而synchronized只能等待锁的释放，不能响应中断</p><blockquote><p>当锁一直在阻塞的时候，lock锁还可以通过lock.tryLock(2000L,TimeUnit.MILLISECONDS)来指定尝试获取的时间</p><p>if (lock.tryLock(2000L,TimeUnit.MILLISECONDS))  {  &#x2F;&#x2F;获锁成功代码段 }</p><p>else{ &#x2F;&#x2F;具体获取锁失败的回复响应 }</p></blockquote></li><li><p><strong>是否知道获取锁</strong><br>Lock可以通过trylock来知道有没有获取锁，而synchronized不能；</p></li><li><p><strong>读写分离</strong><br>Lock可以提高多个线程进行读操作的效率。（可以通过readwritelock实现读写分离）</p></li><li><p><strong>性能</strong><br>如果竞争资源不激烈，两者的性能是差不多的，而当竞争资源非常激烈时（即有大量线程同时竞争），此时Lock的性能要远远优于synchronized。所以说，在具体使用时要根据适当情况选择。</p><blockquote><h4 id="synchronized和lock性能区别"><a href="#synchronized和lock性能区别" class="headerlink" title="synchronized和lock性能区别"></a>synchronized和lock性能区别</h4><p>synchronized是托管给JVM执行的，<br>而lock是java写的控制锁的代码。</p><p>在Java1.5中，synchronize是性能低效的。因为这是一个重量级操作，需要调用操作接口，导致有可能加锁消耗的系统时间比加锁以外的操作还多。相比之下使用Java提供的Lock对象，性能更高一些。</p><p>但是到了Java1.6，发生了变化。synchronize在语义上很清晰，可以进行很多优化，有适应自旋，锁消除，锁粗化，轻量级锁，偏向锁等等。导致在Java1.6上synchronize的性能并不比Lock差。官方也表示，他们也更支持synchronize，在未来的版本中还有优化余地。</p><p>2种机制的具体区别：<br><strong>synchronized原始采用的是CPU悲观锁机制，即线程获得的是独占锁。</strong>独占锁意味着其他线程只能依靠阻塞来等待线程释放锁。而在CPU转换线程阻塞时会引起线程上下文切换，当有很多线程竞争锁的时候，会引起CPU频繁的上下文切换导致效率很低。</p><p><strong>而Lock用的是乐观锁方式。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。乐观锁实现的机制就是CAS操作</strong>（Compare and Swap）。我们可以进一步研究ReentrantLock的源代码，会发现其中比较重要的获得锁的一个方法是compareAndSetState。这里其实就是调用的CPU提供的特殊指令。</p><p>现代的CPU提供了指令，可以自动更新共享数据，而且能够检测到其他线程的干扰，而 compareAndSet() 就用这些代替了锁定。这个算法称作非阻塞算法，意思是一个线程的失败或者挂起不应该影响其他线程的失败或挂起的算法。</p></blockquote></li><li><p><strong>调度</strong><br>synchronized使用Object对象本身的wait 、notify、notifyAll调度机制，而Lock可以使用Condition进行线程之间的调度</p></li><li><p><strong>使用场景</strong><br>synchronized时候锁少量的同步代码块，Lock适合锁大量的同步代码块</p><blockquote><h4 id="synchronized和lock用途区别"><a href="#synchronized和lock用途区别" class="headerlink" title="synchronized和lock用途区别"></a>synchronized和lock用途区别</h4><p>synchronized原语和ReentrantLock在一般情况下没有什么区别，但是在非常复杂的同步应用中，请考虑使用ReentrantLock，特别是遇到下面2种需求的时候。</p><p>1.某个线程在等待一个锁的控制权的这段时间需要中断<br>2.需要分开处理一些wait-notify，ReentrantLock里面的Condition应用，能够控制notify哪个线程<br>3.具有公平锁功能，每个到来的线程都将排队等候</p><p>下面细细道来……</p><p>先说第一种情况，ReentrantLock的lock机制有2种，忽略中断锁和响应中断锁，这给我们带来了很大的灵活性。比如：如果A、B 2个线程去竞争锁，A线程得到了锁，B线程等待，但是A线程这个时候实在有太多事情要处理，就是一直不返回，B线程可能就会等不及了，想中断自己，不再等待这个锁了，转而处理其他事情。这个时候<strong>ReentrantLock就提供了2种机制：可中断&#x2F;可不中断</strong><br>第一，B线程中断自己（或者别的线程中断它），但是ReentrantLock不去响应，继续让B线程等待，你再怎么中断，我全当耳边风（synchronized原语就是如此）；<br>第二，B线程中断自己（或者别的线程中断它），ReentrantLock处理了这个中断，并且不再等待这个锁的到来，完全放弃。</p></blockquote></li></ol><h2 id="生产者和消费者问题"><a href="#生产者和消费者问题" class="headerlink" title="生产者和消费者问题"></a>生产者和消费者问题</h2><h3 id="synchronized-版"><a href="#synchronized-版" class="headerlink" title="synchronized 版"></a>synchronized 版</h3><p>synchronized + wait + notify 解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JUC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">pc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Data</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Data</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.incrment();</span><br><span class="line">                    Thread.sleep(<span class="number">101</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.decrment();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.incrment();</span><br><span class="line">                    Thread.sleep(<span class="number">101</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.decrment();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 资源类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Data</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//+1</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">synchronized</span>  <span class="keyword">void</span> <span class="title function_">incrment</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">//这里不能用if，需要用while</span></span><br><span class="line">        <span class="keyword">while</span>(number!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//等待</span></span><br><span class="line">            <span class="built_in">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//业务操作</span></span><br><span class="line">        number++;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;==&gt;&quot;</span> + number);</span><br><span class="line">        <span class="comment">//通知其他线程，我已经操作完了</span></span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-1</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">synchronized</span>  <span class="keyword">void</span> <span class="title function_">decrment</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">//这里不能用if，需要用while</span></span><br><span class="line">        <span class="keyword">while</span>(number==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//等待</span></span><br><span class="line">            <span class="built_in">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//业务操作</span></span><br><span class="line">        number--;</span><br><span class="line">        System.err.println(Thread.currentThread().getName() + <span class="string">&quot;==&gt;&quot;</span> + number);</span><br><span class="line">        <span class="comment">//通知其他线程，我已经操作完了</span></span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意 <strong>synchronized</strong> 里修饰的方法，在判断条件不满的等待时，一定要求while。防止虚假唤醒。这也是官方文档中说明的。还可以参考此博客 <a href="https://www.cnblogs.com/audi-car/p/6063567.html">https://www.cnblogs.com/audi-car/p/6063567.html</a></p></blockquote><p><img src="https://hopestation.top/upload/2020/11/image-20201118215222659-1fa936e98c654586ba3b548470e7720e.png" alt="image20201118215222659.png"></p><h3 id="Lock版"><a href="#Lock版" class="headerlink" title="Lock版"></a>Lock版</h3><p><img src="https://hopestation.top/upload/2020/11/image-20201118224209624-af5b84e7db7e4f33975843da3074fd72.png" alt="image20201118224209624.png"></p><p>官方文档例子 <a href="https://tool.oschina.net/apidocs/apidoc?api=jdk-zh">https://tool.oschina.net/apidocs/apidoc?api=jdk-zh</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BoundedBuffer</span> &#123;</span><br><span class="line">   <span class="keyword">final</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">   <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">notFull</span>  <span class="operator">=</span> lock.newCondition(); </span><br><span class="line">   <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">notEmpty</span> <span class="operator">=</span> lock.newCondition(); </span><br><span class="line"></span><br><span class="line">   <span class="keyword">final</span> Object[] items = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">100</span>];</span><br><span class="line">   <span class="type">int</span> putptr, takeptr, count;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(Object x)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">     lock.lock(); <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="keyword">while</span> (count == items.length)</span><br><span class="line">         notFull.await();</span><br><span class="line">       items[putptr] = x;</span><br><span class="line">       <span class="keyword">if</span> (++putptr == items.length) putptr = <span class="number">0</span>;</span><br><span class="line">       ++count;</span><br><span class="line">       notEmpty.signal();</span><br><span class="line">     &#125; <span class="keyword">finally</span> &#123; lock.unlock(); &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">     lock.lock(); <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="keyword">while</span> (count == <span class="number">0</span>)</span><br><span class="line">         notEmpty.await();</span><br><span class="line">       <span class="type">Object</span> <span class="variable">x</span> <span class="operator">=</span> items[takeptr];</span><br><span class="line">       <span class="keyword">if</span> (++takeptr == items.length) takeptr = <span class="number">0</span>;</span><br><span class="line">       --count;</span><br><span class="line">       notFull.signal();</span><br><span class="line">       <span class="keyword">return</span> x;</span><br><span class="line">     &#125; <span class="keyword">finally</span> &#123; lock.unlock(); &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><p>生产者消费者例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JUC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PC_lock</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Data1</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Data1</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.incrment();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.decrment();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.incrment();</span><br><span class="line">                    Thread.sleep(<span class="number">101</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.decrment();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 资源类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Data1</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="type">Condition</span> <span class="variable">condition</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//+1</span></span><br><span class="line">    <span class="keyword">public</span>   <span class="keyword">void</span> <span class="title function_">incrment</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(number!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//等待</span></span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//业务操作</span></span><br><span class="line">            number++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;==&gt;&quot;</span> + number);</span><br><span class="line">            <span class="comment">//通知其他线程，我已经操作完了</span></span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-1</span></span><br><span class="line">    <span class="keyword">public</span>   <span class="keyword">void</span> <span class="title function_">decrment</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(number==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//等待</span></span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//业务操作</span></span><br><span class="line">            number--;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;==&gt;&quot;</span> + number);</span><br><span class="line">            <span class="comment">//通知其他线程，我已经操作完了</span></span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多线程顺序执行</p><blockquote><p>Condition 的精准通知</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JUC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设计多个线程顺序执行 A-》B-》C</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PC_lock02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Data2</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Data2</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                data.printC();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                data.printA();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                data.printB();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 资源类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Data2</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="type">Condition</span> <span class="variable">condition1</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="type">Condition</span> <span class="variable">condition2</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="type">Condition</span> <span class="variable">condition3</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">//1A,2B,3C</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printA</span><span class="params">()</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//业务代码</span></span><br><span class="line">            <span class="comment">//一般顺序都为：判断=》执行=》通知</span></span><br><span class="line">            <span class="keyword">while</span> (number!=<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//等待</span></span><br><span class="line">                condition1.await();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;==&gt; AAA&quot;</span>);</span><br><span class="line">            number = <span class="number">2</span>;</span><br><span class="line">            <span class="comment">//这是故意只唤醒 2 来达到顺序执行的目的</span></span><br><span class="line">            condition2.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title function_">printB</span><span class="params">()</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number!=<span class="number">2</span>)&#123;</span><br><span class="line">                condition2.await();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;==&gt; BBBBBB&quot;</span>);</span><br><span class="line">            number=<span class="number">3</span>;</span><br><span class="line">            condition3.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title function_">printC</span><span class="params">()</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number!=<span class="number">3</span>)&#123;</span><br><span class="line">                condition3.await();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;==&gt; CCCCCCCCCCC&quot;</span>);</span><br><span class="line">            number=<span class="number">1</span>;</span><br><span class="line">            condition1.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="synchronized的原理"><a href="#synchronized的原理" class="headerlink" title="synchronized的原理"></a>synchronized的原理</h2><p>待补充…</p><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>并发与并行的区别是什么？ - 刘志军的回答 - 知乎 <a href="https://www.zhihu.com/question/33515481/answer/199929767">https://www.zhihu.com/question/33515481/answer/199929767</a></p><p><em>hanchao5272</em> 的 线程状态：<a href="https://blog.csdn.net/hanchao5272/article/details/79533700">https://blog.csdn.net/hanchao5272/article/details/79533700</a><br><em>洞玄之境</em> 的 synchronized 和Lock区别:<a href="https://blog.csdn.net/hefenglian/article/details/82383569">https://blog.csdn.net/hefenglian/article/details/82383569</a></p>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JUC </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL索引详解（转）</title>
      <link href="/2020/11/12/MYSQL%E7%B4%A2%E5%BC%95%E8%AF%A6%E8%A7%A3%EF%BC%88%E8%BD%AC%EF%BC%89-mysql%E7%B4%A2%E5%BC%95%E8%AF%A6%E8%A7%A3%E8%BD%AC/"/>
      <url>/2020/11/12/MYSQL%E7%B4%A2%E5%BC%95%E8%AF%A6%E8%A7%A3%EF%BC%88%E8%BD%AC%EF%BC%89-mysql%E7%B4%A2%E5%BC%95%E8%AF%A6%E8%A7%A3%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<p>原作者：敖丙<br>原文链接：<a href="https://blog.csdn.net/qq_35190492/article/details/109257302">https://blog.csdn.net/qq_35190492/article/details/109257302</a></p><hr><p>目录</p><p>[TOC]</p><h1 id="Mysql索引"><a href="#Mysql索引" class="headerlink" title="Mysql索引"></a>Mysql索引</h1><h2 id="索引介绍"><a href="#索引介绍" class="headerlink" title="索引介绍"></a>索引介绍</h2><h3 id="索引是什么"><a href="#索引是什么" class="headerlink" title="索引是什么"></a>索引是什么</h3><ul><li>官方介绍索引是帮助MySQL<strong>高效获取数据</strong>的<strong>数据结构</strong>。更通俗的说，数据库索引好比是一本书前面的目录，能<strong>加快数据库的查询速度</strong>。</li><li>一般来说索引本身也很大，不可能全部存储在内存中，因此<strong>索引往往是存储在磁盘上的文件中的</strong>（可能存储在单独的索引文件中，也可能和数据一起存储在数据文件中）。</li><li><strong>我们通常所说的索引，包括聚集索引、覆盖索引、组合索引、前缀索引、唯一索引等，没有特别说明，默认都是使用B+树结构组织（多路搜索树，并不一定是二叉的）的索引。</strong></li></ul><h3 id="索引的优势和劣势"><a href="#索引的优势和劣势" class="headerlink" title="索引的优势和劣势"></a>索引的优势和劣势</h3><p><strong>优势：</strong></p><ul><li><strong>可以提高数据检索的效率，降低数据库的IO成本</strong>，类似于书的目录。</li><li>通过<strong>索引列对数据进行排序</strong>，降低数据排序的成本，降低了CPU的消耗。<ul><li>被索引的列会自动进行排序，包括【单列索引】和【组合索引】，只是组合索引的排序要复杂一些。</li><li>如果按照索引列的顺序进行排序，对应order by语句来说，效率就会提高很多。</li></ul></li></ul><p><strong>劣势：</strong></p><ul><li><strong>索引会占据磁盘空间</strong></li><li><strong>索引虽然会提高查询效率，但是会降低更新表的效率</strong>。比如每次对表进行增删改操作，MySQL不仅要保存数据，还有保存或者更新对应的索引文件。</li></ul><h2 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h2><h3 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h3><p>索引列中的值必须是唯一的，不允许有空值。</p><h3 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h3><p>MySQL中基本索引类型，没有什么限制，允许在定义索引的列中插入重复值和空值。</p><h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><p>索引列中的值必须是唯一的，但是允许为空值。</p><h3 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h3><p>只能在文本类型CHAR,VARCHAR,TEXT类型字段上创建全文索引。字段长度比较大时，如果创建普通索引，在进行like模糊查询时效率比较低，这时可以创建全文索引。 MyISAM和InnoDB中都可以使用全文索引。</p><h3 id="空间索引"><a href="#空间索引" class="headerlink" title="空间索引"></a>空间索引</h3><p>MySQL在5.7之后的版本支持了空间索引，而且支持OpenGIS几何数据模型。MySQL在空间索引这方面遵循OpenGIS几何数据模型规则。</p><h3 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h3><p>在文本类型如CHAR,VARCHAR,TEXT类列上创建索引时，可以指定索引列的长度，但是数值类型不能指定。</p><h3 id="其他（按照索引列数量分类）"><a href="#其他（按照索引列数量分类）" class="headerlink" title="其他（按照索引列数量分类）"></a>其他（按照索引列数量分类）</h3><ol><li><p>单列索引</p></li><li><p>组合索引</p><p>组合索引的使用，需要遵循<strong>最左前缀匹配原则（最左匹配原则）</strong>。一般情况下在条件允许的情况下使用组合索引替代多个单列索引使用。</p></li></ol><h2 id="索引的数据结构"><a href="#索引的数据结构" class="headerlink" title="索引的数据结构"></a>索引的数据结构</h2><h3 id="Hash表"><a href="#Hash表" class="headerlink" title="Hash表"></a>Hash表</h3><p>Hash表，在Java中的HashMap，TreeMap就是Hash表结构，以键值对的方式存储数据。我们使用Hash表存储表数据Key可以存储索引列，Value可以存储行记录或者行磁盘地址。Hash表在等值查询时效率很高，时间复杂度为O(1)；但是不支持范围快速查找，范围查找时还是只能通过扫描全表方式。</p><p><strong>显然这种并不适合作为经常需要查找和范围查找的数据库索引使用。</strong></p><h3 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h3><p>二叉树，我想大家都会在心里有个图。</p><p><img src="https://img-blog.csdnimg.cn/20201024113453660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MTkwNDky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>二叉树特点：每个节点最多有2个分叉，左子树和右子树数据顺序左小右大。</p><p>这个特点就是为了保证每次查找都可以这折半而减少IO次数，但是二叉树就很考验第一个根节点的取值，因为很容易在这个特点下出现我们并发想发生的情况“树不分叉了”，这就很难受很不稳定。</p><p><img src="https://img-blog.csdnimg.cn/20201024113533141.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MTkwNDky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><strong>显然这种情况不稳定的我们再选择设计上必然会避免这种情况的</strong></p><h3 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h3><p>平衡二叉树是采用二分法思维，平衡二叉查找树除了具备二叉树的特点，最主要的特征是树的左右两个子树的层级最多相差1。在插入删除数据时通过左旋&#x2F;右旋操作保持二叉树的平衡，不会出现左子树很高、右子树很矮的情况。</p><p>使用平衡二叉查找树查询的性能接近于二分查找法，时间复杂度是 O(log2n)。查询id&#x3D;6，只需要两次IO。</p><p><img src="https://img-blog.csdnimg.cn/2020102411361824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MTkwNDky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>就这个特点来看，可能各位会觉得这就很好，可以达到二叉树的理想的情况了。然而依然存在一些问题：</p><ol><li>时间复杂度和树高相关。树有多高就需要检索多少次，每个节点的读取，都对应一次磁盘 IO 操作。树的高度就等于每次查询数据时磁盘 IO 操作的次数。磁盘每次寻道时间为10ms，在表数据量大时，查询性能就会很差。（1百万的数据量，log2n约等于20次磁盘IO，时间20*10&#x3D;0.2s）</li><li>平衡二叉树不支持范围查询快速查找，范围查询时需要从根节点多次遍历，查询效率不高。</li></ol><h3 id="B树：改造二叉树"><a href="#B树：改造二叉树" class="headerlink" title="B树：改造二叉树"></a>B树：改造二叉树</h3><p>MySQL的数据是存储在磁盘文件中的，查询处理数据时，需要先把磁盘中的数据加载到内存中，磁盘IO 操作非常耗时，所以我们优化的重点就是尽量减少磁盘 IO 操作。访问二叉树的每个节点就会发生一次IO，如果想要减少磁盘IO操作，就需要尽量降低树的高度。那如何降低树的高度呢？</p><p>假如key为bigint&#x3D;8字节，每个节点有两个指针，每个指针为4个字节，一个节点占用的空间16个字节（8+4*2&#x3D;16）。</p><p>因为在MySQL的InnoDB存储引擎一次IO会读取的一页（默认一页16K）的数据量，而二叉树一次IO有效数据量只有16字节，空间利用率极低。为了最大化利用一次IO空间，一个简单的想法是在每个节点存储多个元素，在每个节点尽可能多的存储数据。每个节点可以存储1000个索引（16k&#x2F;16&#x3D;1000），这样就将二叉树改造成了多叉树，通过增加树的叉树，将树从高瘦变为矮胖。构建1百万条数据，树的高度只需要2层就可以（1000*1000&#x3D;1百万），也就是说只需要2次磁盘IO就可以查询到数据。磁盘IO次数变少了，查询数据的效率也就提高了。</p><p>这种数据结构我们称为B树，B树是一种多叉平衡查找树，如下图主要特点：</p><ol><li>B树的节点中存储着多个元素，每个内节点有多个分叉。</li><li>节点中的元素包含键值和数据，节点中的键值从大到小排列。也就是说，在所有的节点都储存数据。</li><li>父节点当中的元素不会出现在子节点中。</li><li>所有的叶子结点都位于同一层，叶节点具有相同的深度，叶节点之间没有指针连接。</li></ol><p><img src="https://img-blog.csdnimg.cn/20201024113818483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MTkwNDky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>举个例子，在b树中查询数据的情况：</p><blockquote><p>假如我们查询值等于10的数据。查询路径磁盘块1-&gt;磁盘块2-&gt;磁盘块5。</p><p>第一次磁盘IO：将磁盘块1加载到内存中，在内存中从头遍历比较，10&lt;15，走左路，到磁盘寻址磁盘块2。</p><p>第二次磁盘IO：将磁盘块2加载到内存中，在内存中从头遍历比较，7&lt;10，到磁盘中寻址定位到磁盘块5。</p><p>第三次磁盘IO：将磁盘块5加载到内存中，在内存中从头遍历比较，10&#x3D;10，找到10，取出data，如果data存储的行记录，取出data，查询结束。如果存储的是磁盘地址，还需要根据磁盘地址到磁盘中取出数据，查询终止。</p><p>相比二叉平衡查找树，在整个查找过程中，虽然数据的比较次数并没有明显减少，但是磁盘IO次数会大大减少。同时，由于我们的比较是在内存中进行的，比较的耗时可以忽略不计。B树的高度一般2至3层就能满足大部分的应用场景，所以使用B树构建索引可以很好的提升查询的效率。</p><p>过程如图：</p><p><img src="https://img-blog.csdnimg.cn/20201024113920770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MTkwNDky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></blockquote><p>看到这里一定觉得B树就很理想了，但是前辈们会告诉你依然存在可以优化的地方：</p><blockquote><ol><li>B树不支持范围查询的快速查找，你想想这么一个情况如果我们想要查找10和35之间的数据，查找到15之后，需要回到根节点重新遍历查找，需要从根节点进行多次遍历，查询效率有待提高。</li><li>如果data存储的是行记录，行的大小随着列数的增多，所占空间会变大。这时，一个页中可存储的数据量就会变少，树相应就会变高，磁盘IO次数就会变大。</li></ol></blockquote><h3 id="B-树：改造B树"><a href="#B-树：改造B树" class="headerlink" title="B+树：改造B树"></a>B+树：改造B树</h3><p>B+树，作为B树的升级版，在B树基础上，MySQL在B树的基础上继续改造，使用B+树构建索引。B+树和B树最主要的区别在于<strong>非叶子节点是否存储数据</strong>的问题</p><blockquote><ul><li>B树：非叶子节点和叶子节点都会存储数据。</li><li>B+树：只有叶子节点才会存储数据，非叶子节点至存储键值。叶子节点之间使用双向指针连接，最底层的叶子节点形成了一个双向有序链表。</li></ul></blockquote><p><img src="https://img-blog.csdnimg.cn/20201024114004740.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MTkwNDky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><blockquote><p>B+树的最底层叶子节点包含了所有的索引项。从图上可以看到，B+树在查找数据的时候，由于数据都存放在最底层的叶子节点上，所以每次查找都需要检索到叶子节点才能查询到数据。所以在需要查询数据的情况下每次的磁盘的IO跟树高有直接的关系，但是从另一方面来说，由于数据都被放到了叶子节点，所以放索引的磁盘块锁存放的索引数量是会跟这增加的，所以相对于B树来说，B+树的树高理论上情况下是比B树要矮的。也存在索引覆盖查询的情况，在索引中数据满足了当前查询语句所需要的全部数据，此时只需要找到索引即可立刻返回，不需要检索到最底层的叶子节点。</p></blockquote><p>举个例子：</p><blockquote><ul><li><strong>等值查询：</strong></li></ul><p>假如我们查询值等于9的数据。查询路径磁盘块1-&gt;磁盘块2-&gt;磁盘块6。</p><ol><li>第一次磁盘IO：将磁盘块1加载到内存中，在内存中从头遍历比较，9&lt;15，走左路，到磁盘寻址磁盘块2。</li><li>第二次磁盘IO：将磁盘块2加载到内存中，在内存中从头遍历比较，7&lt;9&lt;12，到磁盘中寻址定位到磁盘块6。</li><li>第三次磁盘IO：将磁盘块6加载到内存中，在内存中从头遍历比较，在第三个索引中找到9，取出data，如果data存储的行记录，取出data，查询结束。如果存储的是磁盘地址，还需要根据磁盘地址到磁盘中取出数据，查询终止。（这里需要区分的是在InnoDB中Data存储的为行数据，而MyIsam中存储的是磁盘地址。）</li></ol><p>过程如图：</p><p><img src="https://img-blog.csdnimg.cn/20201024114108759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MTkwNDky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></blockquote><blockquote><ul><li><strong>范围查询：</strong></li></ul><p>假如我们想要查找9和26之间的数据。查找路径是磁盘块1-&gt;磁盘块2-&gt;磁盘块6-&gt;磁盘块7。</p><ol><li>首先查找值等于9的数据，将值等于9的数据缓存到结果集。这一步和前面等值查询流程一样，发生了三次磁盘IO。</li><li>查找到15之后，底层的叶子节点是一个有序列表，我们从磁盘块6，键值9开始向后遍历筛选所有符合筛选条件的数据。</li><li>第四次磁盘IO：根据磁盘6后继指针到磁盘中寻址定位到磁盘块7，将磁盘7加载到内存中，在内存中从头遍历比较，9&lt;25&lt;26，9&lt;26&lt;&#x3D;26，将data缓存到结果集。</li><li>主键具备唯一性（后面不会有&lt;&#x3D;26的数据），不需再向后查找，查询终止。将结果集返回给用户。</li></ol><p><img src="https://img-blog.csdnimg.cn/20201024114145717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MTkwNDky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></blockquote><p><strong>可以看到B+树可以保证等值和范围查询的快速查找，MySQL的索引就采用了B+树的数据结构。</strong></p><h2 id="Mysql的索引实现"><a href="#Mysql的索引实现" class="headerlink" title="Mysql的索引实现"></a>Mysql的索引实现</h2><p>介绍完了索引数据结构，那肯定是要带入到Mysql里面看看真实的使用场景的，所以这里分析Mysql的两种存储引擎的索引实现：<strong>MyISAM索引</strong>和<strong>InnoDB索引</strong></p><h3 id="MyIsam索引"><a href="#MyIsam索引" class="headerlink" title="MyIsam索引"></a>MyIsam索引</h3><p>以一个简单的user表为例。user表存在两个索引，id列为主键索引，age列为普通索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>`</span><br><span class="line">(</span><br><span class="line">  `id`       <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age`      <span class="type">int</span>(<span class="number">11</span>)     <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  KEY `idx_age` (`age`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> MyISAM</span><br><span class="line">  AUTO_INCREMENT <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8;</span><br><span class="line"><span class="number">12345678910</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201024114258829.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MTkwNDky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>MyISAM的数据文件和索引文件是分开存储的。MyISAM使用B+树构建索引树时，叶子节点中存储的键值为索引列的值，数据为索引所在行的磁盘地址。</p><h4 id="主键索引-1"><a href="#主键索引-1" class="headerlink" title="主键索引"></a>主键索引</h4><p><img src="https://img-blog.csdnimg.cn/20201024114325883.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MTkwNDky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>表user的索引存储在索引文件<code>user.MYI</code>中，数据文件存储在数据文件 <code>user.MYD</code>中。</p><p>简单分析下查询时的磁盘IO情况：</p><p><strong>根据主键等值查询数据：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from user where id = 28;</span><br><span class="line">1</span><br></pre></td></tr></table></figure><ol><li>先在主键树中从根节点开始检索，将根节点加载到内存，比较28&lt;75，走左路。（1次磁盘IO）</li><li>将左子树节点加载到内存中，比较16&lt;28&lt;47，向下检索。（1次磁盘IO）</li><li>检索到叶节点，将节点加载到内存中遍历，比较16&lt;28，18&lt;28，28&#x3D;28。查找到值等于30的索引项。（1次磁盘IO）</li><li>从索引项中获取磁盘地址，然后到数据文件user.MYD中获取对应整行记录。（1次磁盘IO）</li><li>将记录返给客户端。</li></ol><p><strong>磁盘IO次数：3次索引检索+记录数据检索。</strong></p><p><img src="https://img-blog.csdnimg.cn/20201024114404727.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MTkwNDky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><strong>根据主键范围查询数据：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="keyword">between</span> <span class="number">28</span> <span class="keyword">and</span> <span class="number">47</span>;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><ol><li><p>先在主键树中从根节点开始检索，将根节点加载到内存，比较28&lt;75，走左路。（1次磁盘IO）</p></li><li><p>将左子树节点加载到内存中，比较16&lt;28&lt;47，向下检索。（1次磁盘IO）</p></li><li><p>检索到叶节点，将节点加载到内存中遍历比较16&lt;28，18&lt;28，28&#x3D;28&lt;47。查找到值等于28的索引项。</p><p>根据磁盘地址从数据文件中获取行记录缓存到结果集中。（1次磁盘IO）</p><p>我们的查询语句时范围查找，需要向后遍历底层叶子链表，直至到达最后一个不满足筛选条件。</p></li><li><p>向后遍历底层叶子链表，将下一个节点加载到内存中，遍历比较，28&lt;47&#x3D;47，根据磁盘地址从数据文件中获取行记录缓存到结果集中。（1次磁盘IO）</p></li><li><p>最后得到两条符合筛选条件，将查询结果集返给客户端。</p></li></ol><p><strong>磁盘IO次数：4次索引检索+记录数据检索。</strong></p><p><img src="https://img-blog.csdnimg.cn/20201024114510253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MTkwNDky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><strong>备注：</strong>以上分析仅供参考，MyISAM在查询时，会将索引节点缓存在MySQL缓存中，而数据缓存依赖于操作系统自身的缓存，所以并不是每次都是走的磁盘，这里只是为了分析索引的使用过程。</p><h4 id="辅助索引"><a href="#辅助索引" class="headerlink" title="辅助索引"></a>辅助索引</h4><p>在 MyISAM 中,辅助索引和主键索引的结构是一样的，没有任何区别，叶子节点的数据存储的都是行记录的磁盘地址。只是主键索引的键值是唯一的，而辅助索引的键值可以重复。</p><p>查询数据时，由于辅助索引的键值不唯一，可能存在多个拥有相同的记录，所以即使是等值查询，也需要按照范围查询的方式在辅助索引树中检索数据。</p><h3 id="InnoDB索引"><a href="#InnoDB索引" class="headerlink" title="InnoDB索引"></a>InnoDB索引</h3><h4 id="主键索引（聚簇索引）"><a href="#主键索引（聚簇索引）" class="headerlink" title="主键索引（聚簇索引）"></a>主键索引（聚簇索引）</h4><p>每个InnoDB表都有一个聚簇索引 ，聚簇索引使用B+树构建，叶子节点存储的数据是整行记录。一般情况下，聚簇索引等同于主键索引，当一个表没有创建主键索引时，InnoDB会自动创建一个ROWID字段来构建聚簇索引。InnoDB创建索引的具体规则如下：</p><blockquote><ol><li>在表上定义主键PRIMARY KEY，InnoDB将主键索引用作聚簇索引。</li><li>如果表没有定义主键，InnoDB会选择第一个不为NULL的唯一索引列用作聚簇索引。</li><li>如果以上两个都没有，InnoDB 会使用一个6 字节长整型的隐式字段 ROWID字段构建聚簇索引。该ROWID字段会在插入新行时自动递增。</li></ol></blockquote><p>除聚簇索引之外的所有索引都称为辅助索引。在中InnoDB，辅助索引中的叶子节点存储的数据是该行的主键值都。 在检索时，InnoDB使用此主键值在聚簇索引中搜索行记录。</p><p>这里以user_innodb为例，user_innodb的id列为主键，age列为普通索引。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_innodb`</span><br><span class="line">(</span><br><span class="line">  `id`       <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age`      <span class="type">int</span>(<span class="number">11</span>)     <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  KEY `idx_age` (`age`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB;</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201024114600471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MTkwNDky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>InnoDB的数据和索引存储在一个文件t_user_innodb.ibd中。InnoDB的数据组织方式，是聚簇索引。</p><p>主键索引的叶子节点会存储数据行，辅助索引只会存储主键值。</p><p><img src="https://img-blog.csdnimg.cn/202010241146330.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MTkwNDky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><strong>等值查询数据：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_innodb <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">28</span>;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><ol><li><p>先在主键树中从根节点开始检索，将根节点加载到内存，比较28&lt;75，走左路。（1次磁盘IO）</p></li><li><p>将左子树节点加载到内存中，比较16&lt;28&lt;47，向下检索。（1次磁盘IO）</p></li><li><p>检索到叶节点，将节点加载到内存中遍历，比较16&lt;28，18&lt;28，28&#x3D;28。查找到值等于28的索引项，直接可以获取整行数据。将改记录返回给客户端。（1次磁盘IO）</p><p><strong>磁盘IO数量：3次。</strong></p></li></ol><p><img src="https://img-blog.csdnimg.cn/20201024114716460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MTkwNDky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="辅助索引-1"><a href="#辅助索引-1" class="headerlink" title="辅助索引"></a>辅助索引</h4><p>除聚簇索引之外的所有索引都称为辅助索引，InnoDB的辅助索引只会存储主键值而非磁盘地址。</p><p>以表user_innodb的age列为例，age索引的索引结果如下图。</p><p><img src="https://img-blog.csdnimg.cn/20201024114750255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MTkwNDky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>底层叶子节点的按照（age，id）的顺序排序，先按照age列从小到大排序，age列相同时按照id列从小到大排序。</p><p>使用辅助索引需要检索两遍索引：首先检索辅助索引获得主键，然后使用主键到主索引中检索获得记录。</p><p><strong>画图分析等值查询的情况：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user_innodb <span class="keyword">where</span> age<span class="operator">=</span><span class="number">19</span>;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020102411481097.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MTkwNDky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>根据在辅助索引树中获取的主键id，到主键索引树检索数据的过程称为<strong>回表</strong>查询。</p><p><strong>磁盘IO数：辅助索引3次+获取记录回表3次</strong></p><h4 id="组合索引"><a href="#组合索引" class="headerlink" title="组合索引"></a>组合索引</h4><p>还是以自己创建的一个表为例：表 abc_innodb，id为主键索引，创建了一个联合索引idx_abc(a,b,c)。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `abc_innodb`</span><br><span class="line">(</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `a`  <span class="type">int</span>(<span class="number">11</span>)     <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `b`  <span class="type">int</span>(<span class="number">11</span>)     <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c`  <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `d`  <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  KEY `idx_abc` (`a`, `b`, `c`)</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB;</span><br><span class="line"><span class="number">12345678910</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> abc_innodb <span class="keyword">order</span> <span class="keyword">by</span> a, b, c, id;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201024114931382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MTkwNDky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>组合索引的数据结构：</p><p><img src="https://img-blog.csdnimg.cn/20201024114900213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MTkwNDky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><strong>组合索引的查询过程：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> abc_innodb <span class="keyword">where</span> a <span class="operator">=</span> <span class="number">13</span> <span class="keyword">and</span> b <span class="operator">=</span> <span class="number">16</span> <span class="keyword">and</span> c <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201024115012887.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MTkwNDky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><strong>最左匹配原则：</strong></p><p>最左前缀匹配原则和联合索引的<strong>索引存储结构和检索方式</strong>是有关系的。</p><p>在组合索引树中，最底层的叶子节点按照第一列a列从左到右递增排列，但是b列和c列是无序的，b列只有在a列值相等的情况下小范围内递增有序，而c列只能在a，b两列相等的情况下小范围内递增有序。</p><p>就像上面的查询，B+树会先比较a列来确定下一步应该搜索的方向，往左还是往右。如果a列相同再比较b列。但是如果查询条件没有a列，B+树就不知道第一步应该从哪个节点查起。</p><p>可以说创建的idx_abc(a,b,c)索引，相当于创建了(a)、（a,b）（a,b,c）三个索引。、</p><p><strong>组合索引的最左前缀匹配原则：使用组合索引查询时，mysql会一直向右匹配直至遇到范围查询(&gt;、&lt;、between、like)就停止匹配。</strong></p><h4 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h4><p>覆盖索引并不是说是索引结构，**覆盖索引是一种很常用的优化手段。**因为在使用辅助索引的时候，我们只可以拿到主键值，相当于获取数据还需要再根据主键查询主键索引再获取到数据。但是试想下这么一种情况，在上面abc_innodb表中的组合索引查询时，如果我只需要abc字段的，那是不是意味着我们查询到组合索引的叶子节点就可以直接返回了，而不需要回表。这种情况就是**覆盖索引**。</p><p>可以看一下执行计划：</p><p><strong>覆盖索引的情况：</strong></p><p><img src="https://img-blog.csdnimg.cn/20201024115203337.png#pic_center" alt="在这里插入图片描述"></p><p><strong>未使用到覆盖索引：</strong></p><p><img src="https://img-blog.csdnimg.cn/20201024115218222.png#pic_center" alt="在这里插入图片描述"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>看到这里，你是不是对于自己的sql语句里面的索引的有了更多优化想法呢。比如：</p><h3 id="避免回表"><a href="#避免回表" class="headerlink" title="避免回表"></a>避免回表</h3><p>在InnoDB的存储引擎中，使用辅助索引查询的时候，因为辅助索引叶子节点保存的数据不是当前记录的数据而是当前记录的主键索引，索引如果需要获取当前记录完整数据就必然需要根据主键值从主键索引继续查询。这个过程我们成位回表。想想回表必然是会消耗性能影响性能。那如何避免呢？</p><p>使用索引覆盖，举个例子：现有User表（id(PK),name(key),sex,address,hobby…）</p><p>如果在一个场景下，<code>select id,name,sex from user where name =&#39;zhangsan&#39;;</code>这个语句在业务上频繁使用到，而user表的其他字段使用频率远低于它，在这种情况下，如果我们在建立 name 字段的索引的时候，不是使用单一索引，而是使用联合索引（name，sex）这样的话再执行这个查询语句是不是根据辅助索引查询到的结果就可以获取当前语句的完整数据。这样就可以有效地避免了回表再获取sex的数据。</p><p><strong>这里就是一个典型的使用覆盖索引的优化策略减少回表的情况。</strong></p><h3 id="联合索引的使用"><a href="#联合索引的使用" class="headerlink" title="联合索引的使用"></a>联合索引的使用</h3><p><strong>联合索引</strong>，在建立索引的时候，尽量在多个单列索引上判断下是否可以使用联合索引。联合索引的使用不仅可以节省空间，还可以更容易的使用到索引覆盖。试想一下，索引的字段越多，是不是更容易满足查询需要返回的数据呢。比如联合索引（a_b_c），是不是等于有了索引：a，a_b，a_b_c三个索引，这样是不是节省了空间，当然节省的空间并不是三倍于（a，a_b，a_b_c）三个索引，因为索引树的数据没变，但是索引data字段的数据确实真实的节省了。</p><p><strong>联合索引的创建原则</strong>，在创建联合索引的时候因该把频繁使用的列、区分度高的列放在前面，频繁使用代表索引利用率高，区分度高代表筛选粒度大，这些都是在索引创建的需要考虑到的优化场景，也可以在常需要作为查询返回的字段上增加到联合索引中，如果在联合索引上增加一个字段而使用到了覆盖索引，那我建议这种情况下使用联合索引。</p><p><strong>联合索引的使用</strong></p><ol><li>考虑当前是否已经存在多个可以合并的单列索引，如果有，那么将当前多个单列索引创建为一个联合索引。</li><li>当前索引存在频繁使用作为返回字段的列，这个时候就可以考虑当前列是否可以加入到当前已经存在索引上，使其查询语句可以使用到覆盖索引。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> MYSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PLAN</title>
      <link href="/2020/11/12/PLAN-plan/"/>
      <url>/2020/11/12/PLAN-plan/</url>
      
        <content type="html"><![CDATA[<h1 id="PLAN"><a href="#PLAN" class="headerlink" title="PLAN"></a>PLAN</h1><table><thead><tr><th>技术栈</th><th>是否掌握</th><th>截止日期</th></tr></thead><tbody><tr><td>JavaSE</td><td><div class="process-bar skin-green"><div class="pb-wrapper"><div class="pb-highlight"></div><div class="pb-container"><div class="pb-text">99%</div><div class="pb-value" style="height: 100%;width: 99%;background: orange;border-radius: 8px;"></div></div></div></div></td><td></td></tr><tr><td>VUE</td><td><div class="process-bar skin-green"><div class="pb-wrapper"><div class="pb-highlight"></div><div class="pb-container"><div class="pb-text">99%</div><div class="pb-value" style="height: 100%;width: 99%;background: orange;border-radius: 8px;"></div></div></div></div></td><td></td></tr><tr><td>SpringBoot</td><td><div class="process-bar skin-green"><div class="pb-wrapper"><div class="pb-highlight"></div><div class="pb-container"><div class="pb-text">99%</div><div class="pb-value" style="height: 100%;width: 99%;background: orange;border-radius: 8px;"></div></div></div></div></td><td></td></tr><tr><td>SpringSecurity</td><td><div class="process-bar skin-green"><div class="pb-wrapper"><div class="pb-highlight"></div><div class="pb-container"><div class="pb-text">99%</div><div class="pb-value" style="height: 100%;width: 99%;background: orange;border-radius: 8px;"></div></div></div></div></td><td></td></tr><tr><td>Shiro</td><td><div class="process-bar skin-green"><div class="pb-wrapper"><div class="pb-highlight"></div><div class="pb-container"><div class="pb-text">99%</div><div class="pb-value" style="height: 100%;width: 99%;background: orange;border-radius: 8px;"></div></div></div></div></td><td></td></tr><tr><td>Redis</td><td><div class="process-bar skin-green"><div class="pb-wrapper"><div class="pb-highlight"></div><div class="pb-container"><div class="pb-text">99%</div><div class="pb-value" style="height: 100%;width: 99%;background: orange;border-radius: 8px;"></div></div></div></div></td><td></td></tr><tr><td>SpringCLoud</td><td><div class="process-bar skin-green"><div class="pb-wrapper"><div class="pb-highlight"></div><div class="pb-container"><div class="pb-text">90%</div><div class="pb-value" style="height: 100%;width: 90%;background: orange;border-radius: 8px;"></div></div></div></div></td><td>2020.11.8</td></tr><tr><td>多线程</td><td><div class="process-bar skin-green"><div class="pb-wrapper"><div class="pb-highlight"></div><div class="pb-container"><div class="pb-text">99%</div><div class="pb-value" style="height: 100%;width: 99%;background: orange;border-radius: 8px;"></div></div></div></div></td><td>2020.11.13</td></tr><tr><td>JVM</td><td><div class="process-bar skin-green"><div class="pb-wrapper"><div class="pb-highlight"></div><div class="pb-container"><div class="pb-text">60%</div><div class="pb-value" style="height: 100%;width: 60%;background: orange;border-radius: 8px;"></div></div></div></div></td><td></td></tr><tr><td>JUC</td><td><div class="process-bar skin-green"><div class="pb-wrapper"><div class="pb-highlight"></div><div class="pb-container"><div class="pb-text">95%</div><div class="pb-value" style="height: 100%;width: 95%;background: orange;border-radius: 8px;"></div></div></div></div></td><td></td></tr><tr><td>ES</td><td><div class="process-bar skin-green"><div class="pb-wrapper"><div class="pb-highlight"></div><div class="pb-container"><div class="pb-text">0%</div><div class="pb-value" style="height: 100%;width: 0.5%;background: orange;border-radius: 8px;"></div></div></div></div></td><td></td></tr><tr><td>Dubbo</td><td><div class="process-bar skin-green"><div class="pb-wrapper"><div class="pb-highlight"></div><div class="pb-container"><div class="pb-text">95%</div><div class="pb-value" style="height: 100%;width: 95%;background: orange;border-radius: 8px;"></div></div></div></div></td><td></td></tr><tr><td>ZooKeeper</td><td><div class="process-bar skin-green"><div class="pb-wrapper"><div class="pb-highlight"></div><div class="pb-container"><div class="pb-text">95%</div><div class="pb-value" style="height: 100%;width: 95%;background: orange;border-radius: 8px;"></div></div></div></div></td><td></td></tr><tr><td>Netty</td><td><div class="process-bar skin-green"><div class="pb-wrapper"><div class="pb-highlight"></div><div class="pb-container"><div class="pb-text">0%</div><div class="pb-value" style="height: 100%;width: 0.5%;background: orange;border-radius: 8px;"></div></div></div></div></td><td></td></tr><tr><td>面试题</td><td><div class="process-bar skin-green"><div class="pb-wrapper"><div class="pb-highlight"></div><div class="pb-container"><div class="pb-text">0%</div><div class="pb-value" style="height: 100%;width: 0.5%;background: orange;border-radius: 8px;"></div></div></div></div></td><td></td></tr><tr><td>实战项目</td><td><div class="process-bar skin-green"><div class="pb-wrapper"><div class="pb-highlight"></div><div class="pb-container"><div class="pb-text">0%</div><div class="pb-value" style="height: 100%;width: 0.5%;background: orange;border-radius: 8px;"></div></div></div></div></td><td></td></tr><tr><td>MYSQL优化</td><td><div class="process-bar skin-green"><div class="pb-wrapper"><div class="pb-highlight"></div><div class="pb-container"><div class="pb-text">60%</div><div class="pb-value" style="height: 100%;width: 60%;background: orange;border-radius: 8px;"></div></div></div></div></td><td></td></tr></tbody></table><style>.process-bar{    width:200px;    display:inline-block;    *zoom:1;}.pb-wrapper{    border:1px solid #cfd0d2;    position:relative;    background:#cfd0d2;    border-radius: 8px;}.pb-container{    height:18px;    position:relative;    left:-1px;    margin-right:-2px;    font:1px/0 arial;    padding:1px;}.pb-highlight{    position:absolute;    left:0;    top:0;    _top:1px;    width:100%;    opacity:0.6;    filter:alpha(opacity=60);    height:6px;    background:white;    font-size:1px;    line-height:0;    z-index:1}.pb-text{    width:100%;    position:absolute;    left:0;    top:0;    text-align:center;    font:10px/12px arial;    color:black;    font:12px arial;    font-weight: 800;}</style>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>多线程基础</title>
      <link href="/2020/11/12/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/11/12/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="练习的代码我放在Gitee上了（欢迎访问，记得点个Star哈哈）"><a href="#练习的代码我放在Gitee上了（欢迎访问，记得点个Star哈哈）" class="headerlink" title="练习的代码我放在Gitee上了（欢迎访问，记得点个Star哈哈）"></a>练习的代码我放在Gitee上了（欢迎访问，记得点个Star哈哈）</h3><p><a href="https://gitee.com/hopestation/thread-learn"><img src="https://gitee.com/hopestation/thread-learn/widgets/widget_card.svg?colors=393222,ebdfc1,fffae5,d8ca9f,393222,a28b40" alt="hopeStation/thread-learn"></a></p>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JOL：查看Java 对象布局、大小工具</title>
      <link href="/2020/11/11/JOL%EF%BC%9A%E6%9F%A5%E7%9C%8BJava%20%E5%AF%B9%E8%B1%A1%E5%B8%83%E5%B1%80%E3%80%81%E5%A4%A7%E5%B0%8F%E5%B7%A5%E5%85%B7-jol%E6%9F%A5%E7%9C%8Bjava%E5%AF%B9%E8%B1%A1%E5%B8%83%E5%B1%80%E5%A4%A7%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
      <url>/2020/11/11/JOL%EF%BC%9A%E6%9F%A5%E7%9C%8BJava%20%E5%AF%B9%E8%B1%A1%E5%B8%83%E5%B1%80%E3%80%81%E5%A4%A7%E5%B0%8F%E5%B7%A5%E5%85%B7-jol%E6%9F%A5%E7%9C%8Bjava%E5%AF%B9%E8%B1%A1%E5%B8%83%E5%B1%80%E5%A4%A7%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h4 id="1-POM"><a href="#1-POM" class="headerlink" title="1.POM"></a>1.POM</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jol<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jol-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-测试"><a href="#2-测试" class="headerlink" title="2. 测试"></a>2. 测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.openjdk.jol.info.ClassLayout;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jol.info.GraphLayout;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            map.put(<span class="string">&quot;i&quot;</span>,<span class="string">&quot;测试&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(ClassLayout.parseInstance(map).toPrintable());</span><br><span class="line">        <span class="type">double</span> <span class="variable">size</span> <span class="operator">=</span> GraphLayout.parseInstance(map).totalSize()/<span class="number">1024.00d</span>;</span><br><span class="line">        System.err.println(<span class="string">&quot;size=&gt;&quot;</span> + String.format(<span class="string">&quot;%.2f&quot;</span>,size)+ <span class="string">&quot;KB&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-输出"><a href="#3-输出" class="headerlink" title="3.输出"></a>3.输出</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">java.util.HashMap object internals:</span><br><span class="line"> OFFSET  SIZE                       TYPE DESCRIPTION                               VALUE</span><br><span class="line">      0     4                            (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)</span><br><span class="line">      4     4                            (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)</span><br><span class="line">      8     4                            (object header)                           38 bd ca 16 (00111000 10111101 11001010 00010110) (382385464)</span><br><span class="line">     12     4              java.util.Set AbstractMap.keySet                        null</span><br><span class="line">     16     4       java.util.Collection AbstractMap.values                        null</span><br><span class="line">     20     4                        int HashMap.size                              1</span><br><span class="line">     24     4                        int HashMap.modCount                          1</span><br><span class="line">     28     4                        int HashMap.threshold                         12</span><br><span class="line">     32     4                      <span class="built_in">float</span> HashMap.loadFactor                        0.75</span><br><span class="line">     36     4   java.util.HashMap.Node[] HashMap.table                             [null, null, null, null, null, null, null, null, null, (object), null, null, null, null, null, null]</span><br><span class="line">     40     4              java.util.Set HashMap.entrySet                          null</span><br><span class="line">     44     4                            (loss due to the next object alignment)</span><br><span class="line">Instance size: 48 bytes</span><br><span class="line">Space losses: 0 bytes internal + 4 bytes external = 4 bytes total</span><br><span class="line"></span><br><span class="line">size=&gt;0.25KB</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我还进行了测试，在不向map里put数据时，size是48bytes。<br>虽说map是在put的时候进行第一次初始化的，可能这48bytes是对象头占用的空间吧，没太理解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">       System.out.println(ClassLayout.parseInstance(map).toPrintable());</span><br><span class="line">       <span class="type">double</span> <span class="variable">size</span> <span class="operator">=</span> GraphLayout.parseInstance(map).totalSize() ;</span><br><span class="line">       System.err.println(<span class="string">&quot;size=&gt;&quot;</span> + String.format(<span class="string">&quot;%.2f&quot;</span>, size) + <span class="string">&quot;bytes&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">java.util.HashMap object internals:</span><br><span class="line"> OFFSET  SIZE                       TYPE DESCRIPTION                               VALUE</span><br><span class="line">      0     4                            (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)</span><br><span class="line">      4     4                            (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)</span><br><span class="line">      8     4                            (object header)                           38 bd c0 16 (00111000 10111101 11000000 00010110) (381730104)</span><br><span class="line">     12     4              java.util.Set AbstractMap.keySet                        null</span><br><span class="line">     16     4       java.util.Collection AbstractMap.values                        null</span><br><span class="line">     20     4                        int HashMap.size                              0</span><br><span class="line">     24     4                        int HashMap.modCount                          0</span><br><span class="line">     28     4                        int HashMap.threshold                         0</span><br><span class="line">     32     4                      <span class="built_in">float</span> HashMap.loadFactor                        0.75</span><br><span class="line">     36     4   java.util.HashMap.Node[] HashMap.table                             null</span><br><span class="line">     40     4              java.util.Set HashMap.entrySet                          null</span><br><span class="line">     44     4                            (loss due to the next object alignment)</span><br><span class="line">Instance size: 48 bytes</span><br><span class="line">Space losses: 0 bytes internal + 4 bytes external = 4 bytes total</span><br><span class="line"></span><br><span class="line">size=&gt;48.00bytes</span><br><span class="line">Disconnected from the target VM, address: <span class="string">&#x27;127.0.0.1:63469&#x27;</span>, transport: <span class="string">&#x27;socket&#x27;</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中Array的内置函数</title>
      <link href="/2020/11/11/JS%E4%B8%ADArray%E7%9A%84%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0-js%E4%B8%ADarray%E7%9A%84%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/"/>
      <url>/2020/11/11/JS%E4%B8%ADArray%E7%9A%84%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0-js%E4%B8%ADarray%E7%9A%84%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>目录</strong><br>[TOC]</p><h2 id="JS箭头函数"><a href="#JS箭头函数" class="headerlink" title="JS箭头函数"></a>JS箭头函数</h2><p>也可称作<strong>Lambda</strong>表达式</p><p>原始写法 与 箭头函数的写法区别如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;wei&quot;</span>,<span class="string">&quot;ze&quot;</span>,<span class="string">&quot;yang&quot;</span>];</span><br><span class="line"><span class="comment">//原始写法</span></span><br><span class="line">arr.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Mr.&quot;</span>+item;</span><br><span class="line">&#125;); </span><br><span class="line"><span class="comment">//Lambda表达式写法</span></span><br><span class="line">arr.<span class="title function_">map</span>(<span class="function"><span class="params">item</span>=&gt;</span><span class="string">&quot;Mr.&quot;</span>+item); </span><br><span class="line"><span class="comment">//都是输出 [&quot;Mr.wei&quot;, &quot;Mr.ze&quot;, &quot;Mr.yang&quot;]</span></span><br></pre></td></tr></table></figure><p>箭头函数写法需要注意的地方有：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> <span class="title function_">student</span> = (<span class="params">name,age</span>) =&gt; &#123; <span class="comment">//当参数有多个或者没有时，需要加括号</span></span><br><span class="line">     age +=<span class="number">1</span>;    <span class="comment">//如果函数体不止一行，应该用花括号括起来，这时就要显示地return</span></span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;name:&quot;</span> + name + <span class="string">&quot;,age:&quot;</span> + age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的常用方法都可以改写为箭头函数的形式</p><h2 id="原始for循环"><a href="#原始for循环" class="headerlink" title="原始for循环"></a>原始for循环</h2><p>写起来比较麻烦，执行效率较高</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> len = a.<span class="property">length</span> <span class="comment">//最好先把长度存起来，提升效率</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a[i]);  <span class="comment">//结果依次为1，2，3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h2><p>比较简洁，但性能稍劣于原始for循环，且也不能强制return结束循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">a.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">value,key,arr</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value)    <span class="comment">// 结果依次为1，2，3</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key)      <span class="comment">// 结尾依次为0，1，2</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)      <span class="comment">// 三次结果都为[1,2,3]</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="ES5：for-in"><a href="#ES5：for-in" class="headerlink" title="ES5：for-in"></a>ES5：for-in</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="comment">//循环数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> item <span class="keyword">in</span> arr)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item); <span class="comment">//结果为依次为0，1，2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="number">0</span>:<span class="number">1</span>,<span class="number">1</span>:<span class="number">2</span>,<span class="number">2</span>:<span class="number">3</span>&#125;;</span><br><span class="line"><span class="comment">//循环对象的属性</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;key:&#x27;</span> + key + <span class="string">&#x27;,value:&#x27;</span> + objkey]); <span class="comment">//结果为依次为0，1，2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ES6：for-of"><a href="#ES6：for-of" class="headerlink" title="ES6：for-of"></a>ES6：for-of</h2><p>for-of和for-in语句不同的是只能循环数组，不可以循环对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> value <span class="keyword">of</span> a)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value)  <span class="comment">// 结果依次为1，2，3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>通过里面的return语句，返回一个新的数组，不会改变原数组</p><blockquote><p>return语句是在每一次遍历中返回新数组中的一个元素，而不是跳出循环的</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = a.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">value,key,arr</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)    <span class="comment">// 结果依次为1，2，3</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key)      <span class="comment">// 结尾依次为0，1，2</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)      <span class="comment">// 三次结果都为[1,2,3]</span></span><br><span class="line">    <span class="keyword">return</span> value+<span class="number">1</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 结果为[ 1, 2, 3 ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 结果为[ 2, 3, 4 ]</span></span><br></pre></td></tr></table></figure><h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><p>每一次遍历中若return true 则将该元素添加到新数组</p><p>即过滤符合条件的元素进行返回，同时不改变原数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">value,key,arr</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)    <span class="comment">// 结果依次为1，2，3</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key)      <span class="comment">// 结尾依次为0，1，2</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)      <span class="comment">// 三次结果都为[1,2,3]</span></span><br><span class="line">    <span class="keyword">if</span>(value === <span class="number">3</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 结果为[ 1, 2, 3 ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 结果为[ 1,2 ]</span></span><br></pre></td></tr></table></figure><h2 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce"></a>Reduce</h2><p>从左到右将数组元素计算为一个值，从右到做的话是reduceRight函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">count, value,key,arry</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(count);   <span class="comment">// 结果依次为0，1，3</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);   <span class="comment">// 结果依次为1，2，3</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key);     <span class="comment">// 结果依次为0，1，2</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arry)     <span class="comment">// 三次结果都为[1,2,3]</span></span><br><span class="line">  <span class="keyword">return</span> count + value;</span><br><span class="line">&#125;,<span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);         <span class="comment">// 结果为[ 1, 2, 3 ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)          <span class="comment">// 结果为6</span></span><br></pre></td></tr></table></figure><h2 id="Slice"><a href="#Slice" class="headerlink" title="Slice"></a>Slice</h2><p>返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。<br>该方法并不会修改数组，而是返回一个子数组。如果想删除数组中的一段元素，应该使用方法 Array.splice()。</p><table><thead><tr><th>参数</th><th>是否必需</th><th>描述</th></tr></thead><tbody><tr><td>start</td><td>必需</td><td>规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。</td></tr><tr><td>end</td><td>可选</td><td>规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4.5</span>];</span><br><span class="line">a.<span class="title function_">slice</span>(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line">输出 [<span class="number">3</span>, <span class="number">4.5</span>]</span><br></pre></td></tr></table></figure><h2 id="Every-Some"><a href="#Every-Some" class="headerlink" title="Every &amp; Some"></a>Every &amp; Some</h2><p>区别：*every()<em>是所有<strong>都满足</strong>条件才返回true，</em>some()*是若<strong>有一个</strong>满足条件就返回true</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ages = [<span class="number">32</span>, <span class="number">33</span>, <span class="number">16</span>, <span class="number">40</span>];</span><br><span class="line"><span class="comment">//检测数组 ages 的所有元素是否都大于等于 18   结果为 false</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkAdult</span>(<span class="params">age</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> age &gt;= <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line">ages.<span class="title function_">every</span>(checkAdult);</span><br></pre></td></tr></table></figure><ul><li>如果组中检测到有一个元素不满足，则整个表达式返回 <em>false</em> ，且剩余的元素不会再进行检测。</li><li>如果所有元素都满足条件，则返回 true</li><li>every() 不会对空数组进行检测，也不会改变原始数组。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ages = [<span class="number">3</span>, <span class="number">10</span>, <span class="number">18</span>, <span class="number">20</span>];</span><br><span class="line"><span class="comment">//检测数组中是否有元素大于 18   结果为 true</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkAdult</span>(<span class="params">age</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> age &gt;= <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line">ages.<span class="title function_">some</span>(checkAdult);</span><br></pre></td></tr></table></figure><ul><li>如果有一个元素满足条件，则表达式返回<em>true</em>   , 剩余的元素不会再执行检测。</li><li>如果没有满足条件的元素，则返回false。</li><li>some() 不会对空数组进行检测，也不会改变原始数组。</li></ul><blockquote><p>更多Array方法参考 <a href="https://www.runoob.com/jsref/jsref-obj-array.html">菜鸟教程</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合相关操作</title>
      <link href="/2020/11/10/%E9%9B%86%E5%90%88%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C-%E9%9B%86%E5%90%88%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/11/10/%E9%9B%86%E5%90%88%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C-%E9%9B%86%E5%90%88%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h4 id="int-转换List"><a href="#int-转换List" class="headerlink" title="int[]转换List"></a>int[]转换List<Integer></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] nums = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">List&lt;Integer&gt; collect = </span><br><span class="line">Arrays.stream(nums1).boxed().collect(Collectors.toList());</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="交换某两个位置的数据"><a href="#交换某两个位置的数据" class="headerlink" title="交换某两个位置的数据"></a>交换某两个位置的数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Collections.swap(vector, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">Before swap: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">After swap: [<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode—&gt;两数之和</title>
      <link href="/2020/11/09/LeetCode%E2%80%94%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C-leetcode%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2020/11/09/LeetCode%E2%80%94%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C-leetcode%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="之后的LeetCode的练习代码都会写在Gitee上："><a href="#之后的LeetCode的练习代码都会写在Gitee上：" class="headerlink" title="之后的LeetCode的练习代码都会写在Gitee上："></a>之后的LeetCode的练习代码都会写在Gitee上：</h3><p><a href="https://gitee.com/hopestation/leetcode"><img src="https://gitee.com/hopestation/leetcode/widgets/widget_card.svg?colors=393222,ebdfc1,fffae5,d8ca9f,393222,a28b40" alt="hopeStation/leetcode"></a></p><h4 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h4><p>使用普通循环的方式居然通不过LeetCode的测试，提示超时…（官方答案中的普通循环也不能通过..）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> top.hopestation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode</span> &#123;</span><br><span class="line">    <span class="comment">//暴力循环法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] twoSum1(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;len ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;target)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i] + nums[j] == target)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i,j&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用哈希表，可以将寻找 target - x 的时间复杂度降低到从 O(N)O(N) 降低到 O(1)O(1)。</span></span><br><span class="line"><span class="comment">     * 这样我们创建一个哈希表，对于每一个 x，我们首先查询哈希表中是否存在 target - x，</span></span><br><span class="line"><span class="comment">     * 然后将 x 插入到哈希表中，即可保证不会让 x 和自己匹配。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] twoSum2(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; hashtable = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hashtable.containsKey(target - nums[i])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;hashtable.get(target - nums[i]), i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            hashtable.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] param = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,&#125;;</span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> Arrays.toString(twoSum2(param, <span class="number">10</span>));</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL order by limit分页数据重复问题</title>
      <link href="/2020/11/05/SQL%20order%20by%20limit%E5%88%86%E9%A1%B5%E6%95%B0%E6%8D%AE%E9%87%8D%E5%A4%8D%E9%97%AE%E9%A2%98-sqlorderbylimit%E5%88%86%E9%A1%B5%E6%95%B0%E6%8D%AE%E9%87%8D%E5%A4%8D%E9%97%AE%E9%A2%98/"/>
      <url>/2020/11/05/SQL%20order%20by%20limit%E5%88%86%E9%A1%B5%E6%95%B0%E6%8D%AE%E9%87%8D%E5%A4%8D%E9%97%AE%E9%A2%98-sqlorderbylimit%E5%88%86%E9%A1%B5%E6%95%B0%E6%8D%AE%E9%87%8D%E5%A4%8D%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>直接描述现象：<br>SQL_A</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">workername,</span><br><span class="line">create_time </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">`table_xx` </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">create_time <span class="keyword">DESC</span> </span><br><span class="line">LIMIT <span class="number">0</span>,</span><br><span class="line"><span class="number">10</span> </span><br></pre></td></tr></table></figure><p>SQL_B</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">workername,</span><br><span class="line">create_time </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">`table_xx` </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">create_time <span class="keyword">DESC</span> </span><br><span class="line">LIMIT <span class="number">10</span>,</span><br><span class="line"><span class="number">20</span> </span><br></pre></td></tr></table></figure><p>执行结果：<br>SQL_A<br><img src="https://hopestation.top/upload/2020/11/image_1604566201165.png" alt="image.png"></p><p>SQL_B<br><img src="https://hopestation.top/upload/2020/11/image_1604566218793.png" alt="image.png"></p><p>也就是说同样的数据，出现经过分页出现在了两个不同的页上。</p><p><strong>解决方法：</strong><br>增加 order by 条件</p><p><strong>原因：</strong><br>按理来说，MySQL的排序默认情况下是以主键ID作为排序条件的，在MySQL 5.6的版本上，优化器在遇到order by limit语句的时候，做了一个优化。导致了这问题。</p><p>参考连接：<a href="https://www.jianshu.com/p/544c319fd838">https://www.jianshu.com/p/544c319fd838</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> MYSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK与Tomcat的安装配置</title>
      <link href="/2020/11/03/JDK%E4%B8%8ETomcat%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE-jdk%E4%B8%8Etomcat%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/11/03/JDK%E4%B8%8ETomcat%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE-jdk%E4%B8%8Etomcat%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>目录<br>[TOC]</p><h1 id="JDK安装配置"><a href="#JDK安装配置" class="headerlink" title="JDK安装配置"></a>JDK安装配置</h1><ul><li><p>若之前安装过JDK，则需要 <strong>先完全卸载</strong> 再安装新的JDK，卸载部分可参考此文章先<a href="https://blog.csdn.net/u011754180/article/details/84951270">卸载JDK</a></p></li><li><p>本文以JDK8版本、Windows系统为例。JDK10以上版本可能有所区别。</p></li></ul><h2 id="下载JDK"><a href="#下载JDK" class="headerlink" title="下载JDK"></a>下载JDK</h2><p> <a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html">JDK下载地址</a><br>      步骤：选择jdk版本、接受协议、选择64&#x2F;32位。下载<br>    step1：<br>    <img src="https://img-blog.csdnimg.cn/20190928232401896.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNzQ3MDgx,size_16,color_FFFFFF,t_70" alt="点击Download按钮"></p><p>step2：<br>    下载时，官网会提示登录<br>    没有账号的话注册一个也很快（需要一个邮箱，其他内容随便打打就行了）</p><p><img src="https://img-blog.csdnimg.cn/20190928232453782.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNzQ3MDgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h2><p>step3：下载成后打开exe文件，点击下一步</p><p><img src="https://img-blog.csdnimg.cn/20190928233343619.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNzQ3MDgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>step4：选择一个目录，点击下一步</p><p><img src="https://img-blog.csdnimg.cn/20190928233528733.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNzQ3MDgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>step5：<br>中间略过一直点击下一步<br> 到这里提示安装JRE，<strong>需要点击更改</strong>，<strong>一定要</strong>换一个安装目录<br>    （新建一个文件夹，和JDK目录同级即可），可参考下面我的目录结构</p><p><img src="https://img-blog.csdnimg.cn/20190928234155607.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNzQ3MDgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20190928234613231.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNzQ3MDgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>step6：最后点击关闭。安装完成</p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>我的电脑右击属性 -&gt; 高级系统设置 -&gt;环境变量  -&gt; 系统变量</p><table><thead><tr><th>变量名</th><th>值</th></tr></thead><tbody><tr><td>JAVA_HOME</td><td>C:\Program Files\Java\jdk1.8.0_221</td></tr><tr><td>ClassPath</td><td>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</td></tr><tr><td>Path</td><td>%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</td></tr></tbody></table><h2 id="测试JDK"><a href="#测试JDK" class="headerlink" title="测试JDK"></a>测试JDK</h2><p>在命令行分别输入：</p><ul><li>java</li><li>java -version</li><li>javac</li><li>java -verbose 查看jdk路径</li></ul><p>若没有错误提示，则<strong>JDK安装完成</strong></p><hr><h1 id="Tomcat安装配置"><a href="#Tomcat安装配置" class="headerlink" title="Tomcat安装配置"></a>Tomcat安装配置</h1><p> 以Tomcat9，window系统为例</p><ul><li>Tomcat的<strong>运行需要JDK</strong>，若没有则先安装JDK</li><li>下载Tomcat时注意与JDK位数（32 or 64）一致</li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p> <a href="https://tomcat.apache.org/">Tomcat下载地址</a></p><p>step1：选择tomcat版本,点击Download</p><p><img src="https://img-blog.csdnimg.cn/20190929205737606.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNzQ3MDgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>step2：选择系统和位数，点击下载<br><img src="https://img-blog.csdnimg.cn/20190929000623545.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNzQ3MDgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="配置环境变量-1"><a href="#配置环境变量-1" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>我的电脑右击属性 -&gt; 高级系统设置 -&gt;环境变量  -&gt; 系统变量</p><table><thead><tr><th>变量名</th><th>值</th></tr></thead><tbody><tr><td>CATALINA_HOME</td><td>F:\Server\tomcat9</td></tr><tr><td>CATALINA_BASE</td><td>F:\Server\tomcat9</td></tr><tr><td>Path</td><td>%CATALINA_HOME%\lib;%CATALINA_HOME%\bin;</td></tr></tbody></table><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>step3：<br>window键 + X 选择 【命令提示符（管理员）】，输入 <code>service install tomcat9</code></p><p><img src="https://img-blog.csdnimg.cn/2019092920532019.JPG" alt="在这里插入图片描述"></p><p>step5：运行bin目录的 tomcat9w.exe  -&gt; 点击 start<br><img src="https://img-blog.csdnimg.cn/20190929205424671.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNzQ3MDgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>step4：在浏览器中访问 <a href="http://localost:8080/">http://localost:8080/</a> 会出现Tomcat主页</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><p>端口</p><ul><li><p>在目录conf -&gt; server.xml 中可以修改端口号，下面举例修改为 8181</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=&quot;8181&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">              connectionTimeout=&quot;20000&quot;</span><br><span class="line">              redirectPort=&quot;8443&quot; /&gt;</span><br></pre></td></tr></table></figure></li><li><p>若Tomcat主页访问失败你怀疑是端口占用，则可以修改端口访问试试</p></li></ul></li><li><p>工作目录可在server.xml中的 <code>appBase</code>属性来配置。 默认是工作目录是 <code>webapps</code></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;</span><br><span class="line">      unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</span><br></pre></td></tr></table></figure></li><li><p>常见问题参考（以下为其他博主文章）</p><ul><li><pre><code>[eclipse启动tomcat后项目无法访问而通过startup.bat启动后却能访问](https://blog.csdn.net/comeonmao/article/details/80010800)</code></pre></li><li>   <a href="https://blog.csdn.net/qq_38232598/article/details/82823324">tomcat输入localhost:8080报404错误</a></li></ul></li></ul><hr><p><em>欢迎留言评论</em></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDK </tag>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端同步问题</title>
      <link href="/2020/11/03/%E5%89%8D%E7%AB%AF%E5%90%8C%E6%AD%A5%E9%97%AE%E9%A2%98-%E5%89%8D%E7%AB%AF%E5%90%8C%E6%AD%A5%E9%97%AE%E9%A2%98/"/>
      <url>/2020/11/03/%E5%89%8D%E7%AB%AF%E5%90%8C%E6%AD%A5%E9%97%AE%E9%A2%98-%E5%89%8D%E7%AB%AF%E5%90%8C%E6%AD%A5%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>使用执行ajax或者axios调用，有时候需要代码同步执行。也就是说必须先执行A的请求接口完成，然后才能执行B（可能是因为B需要A返回的数据）</p><p>解决方法：</p><ol><li>在A方法的回调函数中执行<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title function_">A</span>(<span class="params"></span>)&#123;</span><br><span class="line">  axios.<span class="title function_">post</span>(<span class="params">xx</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>工具方法小总结</title>
      <link href="/2020/11/03/%E5%B7%A5%E5%85%B7%E6%96%B9%E6%B3%95%E5%B0%8F%E6%80%BB%E7%BB%93-%E5%B7%A5%E5%85%B7%E6%96%B9%E6%B3%95%E5%B0%8F%E6%80%BB%E7%BB%93/"/>
      <url>/2020/11/03/%E5%B7%A5%E5%85%B7%E6%96%B9%E6%B3%95%E5%B0%8F%E6%80%BB%E7%BB%93-%E5%B7%A5%E5%85%B7%E6%96%B9%E6%B3%95%E5%B0%8F%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录一些常用的Java通用的方法，避免下次需要时记不住查百度浪飞丝杆。</p></blockquote><h4 id="JSON转Map-（深层迭代遍历）"><a href="#JSON转Map-（深层迭代遍历）" class="headerlink" title="JSON转Map （深层迭代遍历）"></a>JSON转Map （深层迭代遍历）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JSONObject 转 Map</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">Json2Map</span><span class="params">(JSONObject json, Map&lt;String, String&gt; resultMap)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="keyword">if</span>(json == <span class="literal">null</span> )&#123;</span><br><span class="line">           <span class="keyword">return</span> ;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> json.keys();</span><br><span class="line">       <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">           <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> (String) it.next();</span><br><span class="line">           <span class="comment">//得到value的值</span></span><br><span class="line">           <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> json.get(key);</span><br><span class="line">           <span class="comment">//System.out.println(value);</span></span><br><span class="line">           <span class="keyword">if</span>(value <span class="keyword">instanceof</span> JSONObject)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="comment">//递归遍历</span></span><br><span class="line">               Json2Map((JSONObject) value,resultMap);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span> &#123;</span><br><span class="line">               resultMap.put(key,(String) value);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="替换’-‘成’-‘"><a href="#替换’-‘成’-‘" class="headerlink" title="替换’\‘成’&#x2F;‘"></a>替换’\‘成’&#x2F;‘</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;usr\local\xxx\xx&quot;</span>;</span><br><span class="line">str = str.replaceAll(<span class="string">&quot;\\\\&quot;</span> , <span class="string">&quot;/&quot;</span> );</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud之Eureka</title>
      <link href="/2020/11/03/SpringCloud%E4%B9%8BEureka-springcloud%E4%B9%8Beureka/"/>
      <url>/2020/11/03/SpringCloud%E4%B9%8BEureka-springcloud%E4%B9%8Beureka/</url>
      
        <content type="html"><![CDATA[<h1 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h1><p>what? why? how? </p><h2 id="一句话概括"><a href="#一句话概括" class="headerlink" title="一句话概括"></a>一句话概括</h2><p>Eureka是Netflix开发的服务发现框架（注册中心）</p><h2 id="为什么需要注册中心？"><a href="#为什么需要注册中心？" class="headerlink" title="为什么需要注册中心？"></a>为什么需要注册中心？</h2><blockquote><p>由原因来解释注册中心的作用、含义</p></blockquote><p><strong>从根源说起</strong>，原来为什么把一个单体项目做成微服务项目。其中一个原因就是<strong>解耦</strong>，把原来单体项目的强耦合，拆分成一个一个不同的模块化服务，来降低耦合，最后底层通过Http的方式来进行服务间的调用。我们以这个基础来一步一步的推理：为什么一个微服务项目设计了注册中心的存在。</p><p>在一个微服务项目中，相当于由原来的单体项目按需按功能解耦拆分，肯定有许多服务：比如（A）用户服务，（B）订单服务，（C）物流服务等等..。并且这个服务一般会部署在不同的服务器上，比如A服务部署在了162.x.x.x，B服务部署在了168.x.x.x 。解耦不是一刀切断了，原来在单体项目中模块之间通过调用互相的Service来进行数据交流。那么在拆分成微服务之后必然也需要互相调用，这是业务决定的。</p><p><strong>我们先假设不用注册中心，思考如何互相调用？</strong></p><p>可以使用SpringCloud提供的RestTemplate或者HttpCLient来进行服务间的通信，比如A服务调B服务，就需要写上固定一个B服务的IP地址。这时就会产生<strong>一系列问题</strong></p><ul><li><p>那假如有多个B服务如何实现负载均衡调用呢，难道需要再HTTP请求处来遍历每个IP地址吗？</p></li><li><p>每加一个B服务就需要改动一次A服务的代码，重新部署？</p></li><li><p>A服务调用B时如何负载均衡呢？</p></li><li><p>B服务关闭（下线）了，服务开启（上线）了，A服务又如何只知道和解决的呢？</p></li></ul><p>注册中心的出现就是为了解决这些问题的。</p><p><strong>主流的注册中心</strong>有：Eureka、ZooKeeper、Consul 、Nacos。区别以后再说..</p><p><a href="https://www.springcloud.cc/">SpringCloud中文官网</a></p><p><a href="https://www.springcloud.cc/spring-cloud-dalston.html">中文入门手册</a></p><hr><p>关于Eureka的详细介绍，下面这篇博客总结的非常好，我就直接引用过来了。</p><p>原文地址：<a href="https://www.cnblogs.com/jing99/p/11576133.html">SpringCloud之Eureka注册中心原理及其搭建</a></p><h2 id="一、Eureka简介"><a href="#一、Eureka简介" class="headerlink" title="一、Eureka简介"></a>一、Eureka简介</h2><p>　　Eureka是Netflix开发的服务发现框架，本身是一个基于REST的服务，主要用于定位运行在AWS域中的中间层服务，以达到负载均衡和中间层服务故障转移的目的。SpringCloud将它集成在其子项目spring-cloud-netflix中，以实现SpringCloud的服务发现功能。</p><h3 id="1、Eureka组件"><a href="#1、Eureka组件" class="headerlink" title="1、Eureka组件"></a>1、Eureka组件</h3><p>　　Eureka包含两个组件：Eureka Server和Eureka Client。</p><h4 id="1-1-Eureka-Server"><a href="#1-1-Eureka-Server" class="headerlink" title="1.1 Eureka Server"></a>1.1 Eureka Server</h4><p>　　Eureka Server提供服务注册服务，各个节点启动后，会在Eureka Server中进行注册，这样Eureka Server中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观的看到。<br>　　Eureka Server本身也是一个服务，默认情况下会自动注册到Eureka注册中心。<br>　　<strong>如果搭建单机版的Eureka Server注册中心，则需要配置取消Eureka Server的自动注册逻辑。</strong>毕竟当前服务注册到当前服务代表的注册中心中是一个说不通的逻辑。<br>　　Eureka Server通过<strong>Register、Get、Renew</strong>等接口提供服务的<strong>注册、发现和心跳检测</strong>等服务。</p><h4 id="2-1-Eureka-Client"><a href="#2-1-Eureka-Client" class="headerlink" title="2.1 Eureka Client"></a>2.1 Eureka Client</h4><p>　　Eureka Client是一个java客户端，用于简化与Eureka Server的交互，<strong>客户端同时也具备一个内置的、使用轮询(round-robin)负载算法的负载均衡器。在应用启动后</strong>，将会向Eureka Server发送心跳,<strong>默认周期为30秒</strong>，如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，Eureka Server将会从服务注册表中把这个**服务节点移除(默认90秒)**。<br>　　Eureka Client分为两个角色，分别是：Application Service(Service Provider)和Application Client(Service Consumer)</p><h4 id="2-1-1-Application-Service"><a href="#2-1-1-Application-Service" class="headerlink" title="2.1.1 Application Service"></a>2.1.1 Application Service</h4><p>　　服务提供方，是注册到Eureka Server中的服务。</p><h4 id="2-1-2-Application-Client"><a href="#2-1-2-Application-Client" class="headerlink" title="2.1.2 Application Client"></a>2.1.2 Application Client</h4><p>　　服务消费方，通过Eureka Server发现服务，并消费。</p><p>　　在这里，Application Service和Application Client不是绝对上的定义，因为Provider在提供服务的同时，也可以消费其他Provider提供的服务；Consumer在消费服务的同时，也可以提供对外服务。</p><h3 id="2、Eureka-Server架构原理简介"><a href="#2、Eureka-Server架构原理简介" class="headerlink" title="2、Eureka Server架构原理简介"></a>2、Eureka Server架构原理简介</h3><p><img src="https://img2018.cnblogs.com/blog/1010726/201909/1010726-20190924030604638-1576995909.png" alt="img"></p><blockquote><p>Register(服务注册)：把自己的IP和端口注册给Eureka。<br>Renew(服务续约)：发送心跳包，每30秒发送一次。告诉Eureka自己还活着。<br>Cancel(服务下线)：当provider关闭时会向Eureka发送消息，把自己从服务列表中删除。防止consumer调用到不存在的服务。<br>Get Registry(获取服务注册列表)：获取其他服务列表。<br>Replicate(集群中数据同步)：eureka集群中的数据复制与同步。<br>Make Remote Call(远程调用)：完成服务的远程调用。</p></blockquote><p>　　Eureka Server<br>　　Eureka Server既是一个注册中心，同时也是一个服务。那么搭建Eureka Server的方式和以往搭建Dubbo注册中心ZooKeeper的方式必然不同，那么首先搭建一个单机版的Eureka Server注册中心。</p><h2 id="二、搭建单机版Eureka-Server"><a href="#二、搭建单机版Eureka-Server" class="headerlink" title="二、搭建单机版Eureka Server"></a>二、搭建单机版Eureka Server</h2><p>　　Eureka已经被Spring Cloud继承在其子项目spring-cloud-netflix中，搭建Eureka Server的方式还是非常简单的。只需要通过一个独立的maven工程即可搭建Eureka Server。pom依赖如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.16.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjsxt<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-eureka-server-single<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Edgware.SR4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring cloud 默认配置启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring cloud Eureka Server 启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>　　全局配置文件：</p><p>　　而Eureka Server本身也是一个服务，同时又是一个注册中心。在Spring Cloud中，启动的微服务会自动的搜索注册中心并注册服务，那么在单机版Eureka Server环境中，当前服务注册到当前服务中，明显是不合适的。所以搭建Eureka Server单机版时，需要提供特殊的全局配置，避免回路注册逻辑。<br>　　同理，Eureka Server服务在注册中心中发现服务列表逻辑也是不必要的。毕竟注册中心是一个中立的服务管理平台，如果是单机版Eureka Server环境中，Eureka Server服务再去发现服务列表，明显也是不必要的。也需要通过全局配置，避免回路发现逻辑。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置spring应用命名，可以自定义，非必要</span></span><br><span class="line"><span class="string">spring.application.name=eureka-server</span></span><br><span class="line"><span class="comment"># 设置Eureka Server WEB控制台端口，自定义</span></span><br><span class="line"><span class="string">server.port=8761</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#是否将自己注册到Eureka-Server中，默认的为true</span></span><br><span class="line"><span class="string">eureka.client.registerWithEureka=false</span></span><br><span class="line"><span class="comment">#是否从Eureka-Server中获取服务注册信息，默认为true</span></span><br><span class="line"><span class="string">eureka.client.fetchRegistry=false</span></span><br></pre></td></tr></table></figure><p>　　启动类配置：<br>　　启动Eureka Server注册中心，和普通的SpringBoot应用的启动没有太大的区别。只需要在启动类上增加@EnableEurekaServer注解，来开启Eureka Server服务即可。<br>　　注意：此处@SpringCloudApplication注解定义启动类。@SpringCloudApplication注解定义启动类涉及到hystrix相关内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaServerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　访问Eureka Server WEB控制台：通过IP和端口，使用浏览器访问即可查看Eureka Server中的信息。本例中访问地址为：<a href="http://localhost:8761/">http://localhost:8761/</a></p><h2 id="三、搭建集群版Eureka-Server"><a href="#三、搭建集群版Eureka-Server" class="headerlink" title="三、搭建集群版Eureka Server"></a>三、搭建集群版Eureka Server</h2><p>　　注册中心作为微服务架构中的核心功能，其重要性不言而喻。所以单机版的Eureka Server在可靠性上并不符合现在的互联网开发环境。集群版的Eureka Server才是商业开发中的选择。</p><p>　　Eureka Server注册中心的集群和Dubbo的ZooKeeper注册中心集群在结构上有很大的不同。</p><p>　　ZooKeeper注册中心集群搭建后，集群中各节点呈现主从关系，集群中只有主节点对外提供服务的注册和发现功能，从节点相当于备份节点，只有主节点宕机时，从节点会选举出一个新的主节点，继续提供服务的注册和发现功能。</p><p>　　而Eureka Server注册中心集群中每个节点都是平等的，集群中的所有节点同时对外提供服务的发现和注册等功能。同时集群中每个Eureka Server节点又是一个微服务，也就是说，每个节点都可以在集群中的其他节点上注册当前服务。又因为每个节点都是注册中心，所以<strong>节点之间又可以相互注册当前节点中已注册的服务，并发现其他节点中已注册的服务</strong>。所以Eureka Server注册中心集群版在搭建过程中有很多的方式，找到一个最合适最可靠的搭建方式才能称为一个称职的程序员。</p><p>　　集群版Eureka Server可以通过Spring Boot多环境配置方式快速搭建。只要创建一个合适的Eureka Server工程，通过多个全局配置即可完成快速搭建。</p><p>　　本案例中搭建一个双节点的Eureka Server集群。</p><p>　　　　Linux版本为： CentOS 6.5<br>JDK版本为： 1.8</p><p>　　POM依赖</p><p>　　　　和单机版Eureka Server相同。</p><p>　　全局配置文件</p><p>　　本例中的两个节点分别会搭建在两个Linux系统中，为这两个Linux系统分别定义域名为eurekaserver1和eurekaserver2。</p><p>　　在集群搭建过程中，全局配置文件的定义非常重要。其中euraka.client.serviceUrl.defaultZone属性是用于配置集群中其他节点的。如果有多个节点，使用逗号’,’分隔。</p><p>　　有部分程序员只配置某一个集群节点信息，通过集群节点间的注册通讯实现节点的全面发现。这种配置形式是不推荐的。因为<strong>Eureka Server在服务管理上，会根据连带责任来维护服务列表，如果某集群节点宕机，那么通过这个节点注册过来的服务都会连带删除</strong>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#eurekaserver1配置</span></span><br><span class="line"><span class="string">spring.application.name=eureka-server</span></span><br><span class="line"><span class="string">server.port=8761</span></span><br><span class="line"><span class="comment"># 设置eureka实例名称，建议与配置文件的变量相同，必须和Linux系统域名相同</span></span><br><span class="line"><span class="string">eureka.instance.hostname=eurekaserver1</span></span><br><span class="line"><span class="comment"># 设置服务注册中心地址，指向另一个注册中心，使用域名作为访问路径</span></span><br><span class="line"><span class="string">eureka.client.serviceUrl.defaultZone=http://eurekaserver2:8761/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#eurekaserver2配置</span></span><br><span class="line"><span class="string">spring.application.name=eureka-server</span></span><br><span class="line"><span class="string">server.port=8761</span></span><br><span class="line"><span class="string">eureka.instance.hostname=eurekaserver2</span></span><br><span class="line"><span class="string">eureka.client.serviceUrl.defaultZone=http://eurekaserver1:8761/eureka/</span></span><br></pre></td></tr></table></figure><p>　　打包工程形成jar文件<br>　　使用run -&gt; maven install即可实现打包过程。打包后的jar文件保存在工程中的target目录中，并上传打包后的jar文件到Linux系统。</p><p>　　设置Linux主机域名</p><p>　　修改&#x2F;etc&#x2F;hosts文件，设置主机域名。将主机域名和IP进行绑定。新增内容如下：两个Linux系统修改内容相同。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">192.168.2.115 eurekaserver1</span><br><span class="line">192.168.2.116 eurekaserver2</span><br></pre></td></tr></table></figure><p>　　使用命令启动Eureka Server</p><p>　　可以在Linux终端中，通过java命令来启动Eureka Server。在启动的时候，可以通过启动参数来设置有效的配置环境。具体命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar -Dspring.profiles.active=eurekaserver1 spring-cloud-eureka-server-cluster-1.0.jar</span><br></pre></td></tr></table></figure><p>　　其中-Dspring.profiles.active启动参数，用于定义本次启动的Eureka Server应用的有效全局配置命名，也就是全局配置文件的后缀。SpringBOOT在启动的时候，会根据启动参数来决定读取的有效全局配置文件是哪一个。</p><p>　　也可以定义一个shell文件来简化操作。具体shell内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"> </span><br><span class="line">cd `dirname $0`</span><br><span class="line"> </span><br><span class="line">CUR_SHELL_DIR=`pwd`</span><br><span class="line">CUR_SHELL_NAME=`basename $&#123;BASH_SOURCE&#125;`</span><br><span class="line"> </span><br><span class="line">JAR_NAME=&quot;项目jar包名称&quot;</span><br><span class="line">JAR_PATH=$CUR_SHELL_DIR/$JAR_NAME</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">JAVA_MEM_OPTS=<span class="string">&quot; -server -Xms1024m -Xmx1024m -XX:PermSize=128m&quot;</span></span></span><br><span class="line">JAVA_MEM_OPTS=&quot;&quot;</span><br><span class="line"> </span><br><span class="line">SPRING_PROFILES_ACTIV=&quot;-Dspring.profiles.active=配置文件变量名称&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">SPRING_PROFILES_ACTIV=<span class="string">&quot;&quot;</span></span></span><br><span class="line">LOG_DIR=$CUR_SHELL_DIR/logs</span><br><span class="line">LOG_PATH=$LOG_DIR/$&#123;JAR_NAME%..log</span><br><span class="line"> </span><br><span class="line">echo_help()</span><br><span class="line">&#123;</span><br><span class="line">    echo -e &quot;syntax: sh $CUR_SHELL_NAME start|stop&quot;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">if [ -z $1 ];then</span><br><span class="line">    echo_help</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"> </span><br><span class="line">if [ ! -d &quot;$LOG_DIR&quot; ];then</span><br><span class="line">    mkdir &quot;$LOG_DIR&quot;</span><br><span class="line">fi</span><br><span class="line"> </span><br><span class="line">if [ ! -f &quot;$LOG_PATH&quot; ];then</span><br><span class="line">    touch &quot;$LOG_DIR&quot;</span><br><span class="line">fi</span><br><span class="line"> </span><br><span class="line">if [ &quot;$1&quot; == &quot;start&quot; ];then</span><br><span class="line"> </span><br><span class="line">    # check server</span><br><span class="line">    PIDS=`ps --no-heading -C java -f --width 1000 | grep $JAR_NAME | awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">    if [ -n &quot;$PIDS&quot; ]; then</span><br><span class="line">        echo -e &quot;ERROR: The $JAR_NAME already started and the PID is $&#123;PIDS&#125;.&quot;</span><br><span class="line">        exit 1</span><br><span class="line">    fi</span><br><span class="line"> </span><br><span class="line">    echo &quot;Starting the $JAR_NAME...&quot;</span><br><span class="line"> </span><br><span class="line">    # start</span><br><span class="line">    nohup java $JAVA_MEM_OPTS -jar $SPRING_PROFILES_ACTIV $JAR_PATH &gt;&gt; $LOG_PATH 2&gt;&amp;1 &amp;</span><br><span class="line"> </span><br><span class="line">    COUNT=0</span><br><span class="line">    while [ $COUNT -lt 1 ]; do</span><br><span class="line">        sleep 1</span><br><span class="line">        COUNT=`ps  --no-heading -C java -f --width 1000 | grep &quot;$JAR_NAME&quot; | awk &#x27;&#123;print $2&#125;&#x27; | wc -l`</span><br><span class="line">        if [ $COUNT -gt 0 ]; then</span><br><span class="line">            break</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">    PIDS=`ps  --no-heading -C java -f --width 1000 | grep &quot;$JAR_NAME&quot; | awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">    echo &quot;$&#123;JAR_NAME&#125; Started and the PID is $&#123;PIDS&#125;.&quot;</span><br><span class="line">    echo &quot;You can check the log file in $&#123;LOG_PATH&#125; for details.&quot;</span><br><span class="line"> </span><br><span class="line">elif [ &quot;$1&quot; == &quot;stop&quot; ];then</span><br><span class="line"> </span><br><span class="line">    PIDS=`ps --no-heading -C java -f --width 1000 | grep $JAR_NAME | awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">    if [ -z &quot;$PIDS&quot; ]; then</span><br><span class="line">        echo &quot;ERROR:The $JAR_NAME does not started!&quot;</span><br><span class="line">        exit 1</span><br><span class="line">    fi</span><br><span class="line"> </span><br><span class="line">    echo -e &quot;Stopping the $JAR_NAME...&quot;</span><br><span class="line"> </span><br><span class="line">    for PID in $PIDS; do</span><br><span class="line">        kill $PID &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">    done</span><br><span class="line"> </span><br><span class="line">    COUNT=0</span><br><span class="line">    while [ $COUNT -lt 1 ]; do</span><br><span class="line">        sleep 1</span><br><span class="line">        COUNT=1</span><br><span class="line">        for PID in $PIDS ; do</span><br><span class="line">            PID_EXIST=`ps --no-heading -p $PID`</span><br><span class="line">            if [ -n &quot;$PID_EXIST&quot; ]; then</span><br><span class="line">                COUNT=0</span><br><span class="line">                break</span><br><span class="line">            fi</span><br><span class="line">        done</span><br><span class="line">    done</span><br><span class="line"> </span><br><span class="line">    echo -e &quot;$&#123;JAR_NAME&#125; Stopped and the PID is $&#123;PIDS&#125;.&quot;</span><br><span class="line">else</span><br><span class="line">    echo_help</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>　　设置好shell启动脚本后，需要提供可执行权限：shell脚本文件名自己修改：chmod 755 xxx.sh</p><p>　　脚本使用方式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#启动Eureka Server</span><br><span class="line">./xxx.sh start</span><br><span class="line">#关闭Eureka Server</span><br><span class="line">./xxx.sh stop</span><br></pre></td></tr></table></figure><h2 id="四、Eureka-Server安全认证"><a href="#四、Eureka-Server安全认证" class="headerlink" title="四、Eureka Server安全认证"></a>四、Eureka Server安全认证</h2><p>　　Eureka Server作为Spring Cloud中的服务注册中心，如果可以任意访问的话，那么其安全性太低。所以Spring Cloud中也有为Eureka Server提供安全认证的方式。可以使用spring-boot-starter-security组件来为Eureka Server增加安全认证。</p><p>　　POM依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- spring boot security安全认证启动器 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>　　修改全局配置文件，在全局配置文件中，开启基于http basic的安全认证。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># eurekaserver1配置</span><br><span class="line">spring.application.name=eureka-server</span><br><span class="line">server.port=8761</span><br><span class="line"></span><br><span class="line">eureka.instance.hostname=eurekaserver1</span><br><span class="line"># 使用http basic安全认证语法，在集群通信中增加认证信息。  http://用户名:密码@地址:端口/eureka/</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://test:123456@eurekaserver2:8761/eureka/</span><br><span class="line"></span><br><span class="line"># 开启基于http basic的安全认证</span><br><span class="line">security.basic.enabled=true</span><br><span class="line"># 设置安全认证用户名</span><br><span class="line">security.user.name=test</span><br><span class="line"># 设置安全认证密码</span><br><span class="line">security.user.password=123456</span><br><span class="line"># eurekaserver2配置</span><br><span class="line">spring.application.name=eureka-server</span><br><span class="line">server.port=8761</span><br><span class="line"></span><br><span class="line">eureka.instance.hostname=eurekaserver2</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://test:123456@eurekaserver1:8761/eureka/</span><br><span class="line"></span><br><span class="line">security.basic.enabled=true</span><br><span class="line">security.user.name=test</span><br><span class="line">security.user.password=123456</span><br></pre></td></tr></table></figure><h2 id="五、CAP定理"><a href="#五、CAP定理" class="headerlink" title="五、CAP定理"></a>五、CAP定理</h2><p>　　CAP原则又称CAP定理，指的是在一个分布式系统中，Consistency（数据一致性）、 Availability（服务可用性）、Partition tolerance（分区容错性），三者不可兼得。CAP由Eric Brewer在2000年PODC会议上提出。该猜想在提出两年后被证明成立，成为我们熟知的CAP定理。</p><table><thead><tr><th><strong>分布式系统CAP定理</strong></th><th></th></tr></thead><tbody><tr><td>数据一致性(Consistency)</td><td>数据一致性(Consistency)也叫做数据原子性系统在执行某项操作后仍然处于一致的状态。在分布式系统中，更新操作执行成功后所有的用户都应该读到最新的值，这样的系统被认为是具有强一致性的。等同于所有节点访问同一份最新的数据副本。优点： 数据一致，没有数据错误可能。缺点： 相对效率降低。</td></tr><tr><td>服务可用性(Availablity)</td><td>每一个操作总是能够在一定的时间内返回结果，这里需要注意的是”一定时间内”和”返回结果”。一定时间内指的是，在可以容忍的范围内返回结果，结果可以是成功或者是失败。</td></tr><tr><td>分区容错性(Partition-torlerance)</td><td>在网络分区的情况下，被分隔的节点仍能正常对外提供服务(分布式集群，数据被分布存储在不同的服务器上，无论什么情况，服务器都能正常被访问)</td></tr></tbody></table><table><thead><tr><th><strong>定律：任何分布式系统只可同时满足二点，没法三者兼顾。</strong></th><th></th></tr></thead><tbody><tr><td>CA，放弃P</td><td>如果想避免分区容错性问题的发生，一种做法是将所有的数据(与事务相关的)&#x2F;服务都放在一台机器上。虽然无法100%保证系统不会出错，但不会碰到由分区带来的负面效果。当然这个选择会严重的影响系统的扩展性。</td></tr><tr><td>CP，放弃A</td><td>相对于放弃”分区容错性”来说，其反面就是放弃可用性。一旦遇到分区容错故障，那么受到影响的服务需要等待一定时间，因此在等待时间内系统无法对外提供服务。</td></tr><tr><td>AP，放弃C</td><td>这里所说的放弃一致性，并不是完全放弃数据一致性，而是放弃数据的强一致性，而保留数据的最终一致性。以网络购物为例，对只剩下一件库存的商品，如果同时接受了两个订单，那么较晚的订单将被告知商品告罄。</td></tr></tbody></table><p>　　<strong>Eureka和ZooKeeper的特性</strong></p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://img2018.cnblogs.com/blog/1010726/201909/1010726-20190927041018390-1437576544.png" alt="img"></h2><p>六、Eureka Client</p><p>　　在Spring Cloud中，开发Eureka Client组件还是非常方便的。我们在开发过程中，不需要像Dubbo那样关注服务的角色。无论是Provider还是Consumer都是一个微服务客户端，只是在编码层面上，服务消费者代码比较麻烦。</p><h3 id="1、Application-Service服务提供者开发"><a href="#1、Application-Service服务提供者开发" class="headerlink" title="1、Application Service服务提供者开发"></a>1、Application Service服务提供者开发</h3><p>　　POM依赖：<br>　　如果Eureka 开启了security安全校验机制，那么Eureka Client在开发的时候，依赖的jar包需要额外依赖一个actuator插件。那么可以修改Eureka Client工程中的启动器，把spring-cloud-starter-eureka改为spring-cloud-starter-eureka-server。Eureka-server启动器中包含HTTP Basic安全认证相关的jar包，实际上spring-cloud-starter-eureka-server启动器包含启动器spring-cloud-starter-eureka中的所有的包。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring cloud Eureka Client 启动器，因为Eureka Server开启了安全校验，</span></span><br><span class="line"><span class="comment">    所有需要依赖更大范围的jar包资源spring-cloud-starter-eureka-server--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- actuator 组件是Spring Boot的监控组件，actuator一旦应用，在启动的时候，会发布一系列的URL服务。包含一个shutdown服务，代表优雅关闭</span></span><br><span class="line"><span class="comment">    当Spring Boot 应用中的actuator组件接收到shutdown请求的时候，会触发优雅关闭。</span></span><br><span class="line"><span class="comment">    如果当前应用中有Eureka Client的集成，则会触发Eureka Client向Eureka Server发起一个shutdown优雅停服的请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>　　全局配置：</p><p>　　在配置Eureka Server信息时，建议将Eureka Server集群中的所有节点依次配置，Eureka Client在注册服务的时候，会根据节点列表依次访问Eureka Server集群节点，只要注册成功，后续Eureka Server节点不再访问注册。虽然Eureka Server集群各节点可以相互发现服务，但是Eureka Server集群中每个节点对服务的管理都使用连带责任，及从某Eureka Server节点发现服务A，如果这个Eureka Server节点宕机，则A服务同时从服务列表中删除。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义SpringBoot应用的名称，建议必须提供。在SpringCloud中，对服务的最大粒度的管理是使用应用命名的</span></span><br><span class="line"><span class="comment"># 最好是一个应用一个名称，在Consumer角色开发的时候，比较容易查找Provider</span></span><br><span class="line"><span class="string">spring.application.name=eureka-application-service</span></span><br><span class="line"><span class="string">server.port=8081</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置Eureka Server的地址信息，如果是Eureka Server集群，多个节点使用逗号&#x27;,&#x27;分割。</span></span><br><span class="line"><span class="comment"># 如果开启了安全认证，使用HTTP Bacic格式提供用户名和密码。</span></span><br><span class="line"><span class="comment"># 如果Eureka Server是一个集群，那么配置Eureka Server节点信息的时候，建议将所有的Eureka Server节点信息都配置上</span></span><br><span class="line"><span class="comment"># 实际上，只配置一个Eureka Server节点其实就可以了，但是，Eureka Server对服务的管理有连带责任。如果只配置一个Eureka Server节点，那么会导致级联删除的风险，可能导致服务不可靠</span></span><br><span class="line"><span class="comment"># 如果配置了多个Eureka Server节点，Eureka不会将当期的服务同时注册到所有Eureka Server节点上</span></span><br><span class="line"><span class="comment"># 从第一个配置的Eureka Server节点开始注册，如果注册成功，后续的Eureka Server节点不再重复注册</span></span><br><span class="line"><span class="comment"># 每30秒，Eureka Client发送一个心跳到Eureka Server上，如果心跳没有反馈，则从已配置的Eureka Server节点列表的下一个服务节点继续注册。</span></span><br><span class="line"><span class="comment"># 这样做可以保证服务的可靠性，降低服务连带责任导致的服务不可靠。</span></span><br><span class="line"><span class="comment"># 如果多个Eureka Client需要注册，建议Eureka Server的服务列表顺序是随机排列的。</span></span><br><span class="line"><span class="comment"># 如：有Eureka Server s1,s2,s3，有Eureka Client c1,c2,c3。</span></span><br><span class="line"><span class="comment"># 那么在c1上配置的Eureka Server列表建议是s1,s2,s3，在c2上配置的是s2,s3,s1，在c3上配置的是s3,s1,s2，这样可以更好的利用Eureka Server集群的特性。</span></span><br><span class="line"><span class="comment"># 因为Eureka Server和Eureka Client对心跳的监测都是3*间隔时间的，所以会有服务列表数据的不同步可能。</span></span><br><span class="line"><span class="comment"># 所以在CAP原则上，Eureka Server是保证AP原则，放弃C原则的。</span></span><br><span class="line"><span class="string">eureka.client.serviceUrl.defaultZone=http://eurekaserver1:111111@eurekaserver1:8761/eureka/,http://eurekaserver2:222222@eurekaserver2:8761/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="string">security.basic.enabled=true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用shutdown，优雅停服功能，配置actuator的优雅关闭</span></span><br><span class="line"><span class="comment"># actuator 组件监听shutdown请求地址的时候，要求请求的method必须是POST</span></span><br><span class="line"><span class="comment"># shutdown的请求地址是使用：@PostMapping或@RequestMapping(method=RequestMethod.POST)</span></span><br><span class="line"><span class="string">endpoints.shutdown.enabled=true</span></span><br><span class="line"><span class="comment"># 禁用密码验证</span></span><br><span class="line"><span class="string">endpoints.shutdown.sensitive=false</span></span><br></pre></td></tr></table></figure><p>　　建议：如果有多个服务功能需要注册，那么在设置Eureka Server信息的时候，推荐<strong>异序排列</strong>。如：现在有3个工程A、B、C需要注册服务到Eureka Server集群中，集群节点有三个，分别是e1、e2、e3，那么在工程中推荐配置为，A工程配置-e1,e2,e3，B工程配置e2,e3,e1，C工程配置e3,e1,e2。这样可以更好的利用Eureka Server集群的特性。</p><p>　　启动类：<br>　　需要在启动类上新增注解@EnableEurekaClient，代表当前应用开启Eureka客户端，应用启动后，会自动将服务注册到Eureka Server中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Eureka Client启动类</span></span><br><span class="line"><span class="comment"> * 是使用SpringBoot启动类实现启动的</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@EnableEurekaClient</span> 注解，就是用于通知SpringBoot应用，当前应用是一个Irk客户端</span></span><br><span class="line"><span class="comment"> * 需要做一下服务的注册。</span></span><br><span class="line"><span class="comment"> * 使用全局配置文件application.properties配置Eureka Server的相关信息</span></span><br><span class="line"><span class="comment"> * 如：Eureka Server的地址，个数，是否需要安全认证等。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaApplicationServiceApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaApplicationServiceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　对外接口：</p><p>　　Eureka Client的Application Server对外需要暴露接口方法，接口定义如Rest请求定义方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestApplicationServiceController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value=&quot;/test&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">            Map&lt;String, Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            data.put(<span class="string">&quot;id&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">            data.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;test name &quot;</span> + i);</span><br><span class="line">            data.put(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>+i);</span><br><span class="line">            result.add(data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　因此服务也可以作为url请求直接调用（Security Basic安全认证导致返回结果为XML类型，而不是JSON类型）：</p><p>　　　　　　　　　　　　<img src="https://img2018.cnblogs.com/blog/1010726/201909/1010726-20190927145720596-128843053.png" alt="img"></p><h3 id="2、Application-Client服务消费者开发"><a href="#2、Application-Client服务消费者开发" class="headerlink" title="2、Application Client服务消费者开发"></a>2、Application Client服务消费者开发</h3><p>　　在Spring Cloud中，服务消费方代码的开发确实比较麻烦，并不像Dubbo那么直接注入服务接口代理对象，通过代理对象方法直接访问远程服务。在Spring Cloud中，微服务的提供是通过REST风格提供的，也就是服务的调用是基于HTTP协议的，所以在服务调用上比较麻烦，具体详见案例代码。</p><p>　　POM依赖：</p><p>　　同Application Service工程。</p><p>　　全局配置：</p><p>　　因为都是本地启动，需要修改服务端口。推荐修改spring应用命名。在Eureka Server中，对服务的管理是基于spring应用名称的，所以不同的服务推荐使用不同的应用名称。　</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring.application.name=eureka-application-client</span></span><br><span class="line"><span class="string">server.port=8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 点对点直连是不发现服务，不是不注册服务。</span></span><br><span class="line"><span class="comment"># 任何Eureka Client都必须注册。如果没有配置Eureka Server节点列表，则注册失败。Eureka client无法正常启动。</span></span><br><span class="line"><span class="string">eureka.client.serviceUrl.defaultZone=http://eurekaserver1:111111@eurekaserver1:8761/eureka/,http://eurekaserver2:222222@eurekaserver2:8761/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置负载均衡策略 eureka-application-service为调用的服务的名称</span></span><br><span class="line"><span class="comment"># 没有配置全部服务的负载均衡策略的方式。因为不是每个服务都可以使用相同负载均衡策略的。</span></span><br><span class="line"><span class="comment"># 如：搜索服务和注册服务就不能使用相同的负载均衡策略。</span></span><br><span class="line"><span class="string">eureka-application-service.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RandomRule</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭ribbon访问注册中心Eureka Server发现服务</span></span><br><span class="line"><span class="string">ribbon.eureka.enabled=false</span></span><br><span class="line"><span class="comment"># 配置服务列表，其中eureka-application-service代表要访问的服务的应用名，如果有多个服务结点组成集群，多个节点的配置信息使用逗号&#x27;,&#x27;分隔。</span></span><br><span class="line"><span class="comment"># 配置服务列表，需要配置要调用的服务的名字和服务所在的位置。</span></span><br><span class="line"><span class="comment"># 服务的名字，就是Application Service中配置的spring.application.name。</span></span><br><span class="line"><span class="comment"># 服务的位置，就是服务的所在ip和端口。</span></span><br><span class="line"><span class="comment"># 如果服务位置有多个，也就是服务集群，那么使用逗号&#x27;,&#x27;分割多个服务列表信息。</span></span><br><span class="line"><span class="string">eureka-application-service.ribbon.listOfServers=localhost:8083</span></span><br></pre></td></tr></table></figure><p>　　启动类：</p><p>　　同Applicaiton Service一致。</p><p>　　请求调用类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在这里开发Eureka Client中的Application Client角色。就是consumer服务的消费者。</span></span><br><span class="line"><span class="comment"> * 服务消费者需要在注册中心中发现服务列表的。且同时将自己注册到注册中心的服务列表中。（参考如下截图）</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * consumer在消费provider的时候，是通过LoadBalancer来实现的。</span></span><br><span class="line"><span class="comment"> * LoadBalancer简介 ： 是Eureka client内置的一个负载均衡器。复杂在发现的服务列表中选择服务应用，获取服务的IP和端口。</span></span><br><span class="line"><span class="comment"> * 实现服务的远程调用。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * application client代码开发相比较dubbo的consumer开发麻烦很多。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestApplicationClientController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ribbon负载均衡器，其中记录了从Eureka Server中获取的所有服务信息。 </span></span><br><span class="line"><span class="comment">     * 这些服务的信息是IP和端口等。应用名称，域名，主机名等信息。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoadBalancerClient loadBalancerClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过HTTP协议，发起远程服务调用，实现一个远程的服务消费。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过spring应用命名，获取服务实例ServiceInstance对象</span></span><br><span class="line">        <span class="comment">// ServiceInstance 封装了服务的基本信息，如 IP，端口</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 在Eureka中，对所有注册到Eureka Server中的服务都称为一个service instance服务实例。</span></span><br><span class="line"><span class="comment">         * 一个服务实例，就是一个有效的，可用的，provider单体实例或集群实例。</span></span><br><span class="line"><span class="comment">         * 每个service instance都和spring application name对应。</span></span><br><span class="line"><span class="comment">         * 可以通过spring application name查询service instance</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">ServiceInstance</span> <span class="variable">si</span> <span class="operator">=</span> </span><br><span class="line">                <span class="built_in">this</span>.loadBalancerClient.choose(<span class="string">&quot;eureka-application-service&quot;</span>);</span><br><span class="line">        <span class="comment">// 拼接访问服务的URL</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="comment">// http://localhost:8081/test</span></span><br><span class="line">        sb.append(<span class="string">&quot;http://&quot;</span>).append(si.getHost())</span><br><span class="line">            .append(<span class="string">&quot;:&quot;</span>).append(si.getPort()).append(<span class="string">&quot;/test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;本次访问的service是： &quot;</span> + sb.toString());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// SpringMVC RestTemplate，用于快速发起REST请求的模板对象。</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * RestTemplate是SpringMVC提供的一个用于发起REST请求的模板对象。</span></span><br><span class="line"><span class="comment">         * 基于HTTP协议发起请求的。</span></span><br><span class="line"><span class="comment">         * 发起请求的方式是exchange。需要的参数是： URL, 请求方式， 请求头， 响应类型，【URL rest参数】。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">RestTemplate</span> <span class="variable">rt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 创建一个响应类型模板。</span></span><br><span class="line"><span class="comment">         * 就是REST请求的响应体中的数据类型。</span></span><br><span class="line"><span class="comment">         * ParameterizedTypeReference - 代表REST请求的响应体中的数据类型。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ParameterizedTypeReference&lt;List&lt;Map&lt;String, Object&gt;&gt;&gt; type = </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ParameterizedTypeReference</span>&lt;List&lt;Map&lt;String, Object&gt;&gt;&gt;() &#123;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * ResponseEntity:封装了返回值信息，相当于是HTTP Response中的响应体。</span></span><br><span class="line"><span class="comment">         * 发起REST请求。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ResponseEntity&lt;List&lt;Map&lt;String, Object&gt;&gt;&gt; response = </span><br><span class="line">                rt.exchange(sb.toString(), HttpMethod.GET, <span class="literal">null</span>, type);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * ResponseEntity.getBody() - 就是获取响应体中的java对象或返回数据结果。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; result = response.getBody();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　LoadBanlancerClient中包含了所有的服务注册信息，如下图示例：</p><p>　　　　　　<img src="https://img2018.cnblogs.com/blog/1010726/201909/1010726-20190928032524731-1665681441.png" alt="img"></p><h2 id="七、服务保护"><a href="#七、服务保护" class="headerlink" title="七、服务保护"></a>七、服务保护</h2><h4 id="1-服务保护模式"><a href="#1-服务保护模式" class="headerlink" title="1 服务保护模式"></a>1 服务保护模式</h4><p>　　服务保护模式（自我保护模式）：一般情况下，微服务在Eureka上注册后，会每30秒发送心跳包，Eureka通过心跳来判断服务时候健康，同时会定期删除超过90秒没有发送心跳服务。</p><p>　　导致Eureka Server接收不到心跳包的可能：一是微服务自身的原因，二是微服务与Eureka之间的网络故障。通常微服务的自身的故障只会导致个别服务出现故障，一般不会出现大面积故障，而网络故障通常会导致Eureka Server在短时间内无法收到大批心跳。虑到这个区别，Eureka设置了一个阀值，当判断挂掉的服务的数量超过阀值时，Eureka Server认为很大程度上出现了网络故障，将不再删除心跳过期的服务。</p><p>　　那么这个阀值是多少呢？Eureka Server在运行期间，会统计心跳失败的比例在15分钟内是否低于85%，如果低于85%，Eureka Server则任务是网络故障，不会删除心跳过期服务。</p><p>　　这种服务保护算法叫做Eureka Server的服务保护模式。</p><p>　　这种不删除的，90秒没有心跳的服务，称为无效服务，但是还是保存在服务列表中。如果Consumer到注册中心发现服务，则Eureka Server会将所有好的数据（有效服务数据）和坏的数据（无效服务数据）都返回给Consumer。</p><h3 id="2-服务保护模式的存在必要性"><a href="#2-服务保护模式的存在必要性" class="headerlink" title="2 服务保护模式的存在必要性"></a>2 服务保护模式的存在必要性</h3><p>　　因为同时保留”好数据”与”坏数据”总比丢掉任何数据要更好，当网络故障恢复后，Eureka Server会退出”自我保护模式”。</p><p>　　Eureka还有客户端缓存功能(也就是微服务的缓存功能)。即便Eureka Server集群中所有节点都宕机失效，微服务的Provider和Consumer都能正常通信。</p><p>　　微服务的负载均衡策略会自动剔除死亡的微服务节点（<strong>Robbin</strong>）。</p><p>　　只要Consumer不关闭，缓存始终有效，直到一个应用下的所有Provider访问都无效的时候，才会访问Eureka Server重新获取服务列表。</p><h3 id="3-关闭服务保护模式"><a href="#3-关闭服务保护模式" class="headerlink" title="3 关闭服务保护模式"></a>3 关闭服务保护模式</h3><p>　　可以通过全局配置文件来关闭服务保护模式，商业项目中不推荐关闭服务保护，因为网络不可靠很容易造成网络波动、延迟、断线的可能。如果关闭了服务保护，可能导致大量的服务反复注册、删除、再注册。导致效率降低。在商业项目中，服务的数量一般都是几十个，大型的商业项目中服务的数量可能上百、数百，甚至上千：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭自我保护:true为开启自我保护，false为关闭自我保护</span></span><br><span class="line"><span class="string">eureka.server.enableSelfPreservation=false</span></span><br><span class="line"><span class="comment"># 清理间隔(单位:毫秒，默认是60*1000)，当服务心跳失效后多久，删除服务。</span></span><br><span class="line"><span class="string">eureka.server.eviction.interval-timer-in-ms=60000</span></span><br></pre></td></tr></table></figure><h3 id="4-优雅关闭服务（优雅停服）"><a href="#4-优雅关闭服务（优雅停服）" class="headerlink" title="4 优雅关闭服务（优雅停服）"></a>4 优雅关闭服务（优雅停服）</h3><p>　　在Spring Cloud中，可以通过HTTP请求的方式，通知Eureka Client优雅停服，这个请求一旦发送到Eureka Client，那么Eureka Client会发送一个shutdown请求到Eureka Server，Eureka Server接收到这个shutdown请求后，会在服务列表中标记这个服务的状态为down，同时Eureka Client应用自动关闭。这个过程就是优雅停服。</p><p>　　如果使用了优雅停服，则不需要再关闭Eureka Server的服务保护模式。</p><p>　　POM依赖：<br>　　优雅停服是通过Eureka Client发起的，所以需要在Eureka Client中增加新的依赖，这个依赖是autuator组件，添加下述依赖即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>　　修改全局配置文件：</p><p>　　Eureka Client默认不开启优雅停服功能，需要在全局配置文件中新增如下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启用shutdown，优雅停服功能</span></span><br><span class="line"><span class="string">endpoints.shutdown.enabled=true</span></span><br><span class="line"><span class="comment"># 禁用密码验证</span></span><br><span class="line"><span class="string">endpoints.shutdown.sensitive=false</span></span><br></pre></td></tr></table></figure><p>　　发起shutdown请求：</p><p>　　必须通过POST请求向Eureka Client发起一个shutdown请求。请求路径为：<a href="http://ip:port/shutdown。可以通过任意技术实现，如：HTTPClient、form表单，AJAX等。">http://ip:port/shutdown。可以通过任意技术实现，如：HTTPClient、form表单，AJAX等。</a></p><p>　　建议使用优雅停服方式来关闭Application Service&#x2F;Application Client服务。</p><p>Stay hungry，stay foolish ！</p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用SQL（持续更新）</title>
      <link href="/2020/11/02/%E5%B8%B8%E7%94%A8SQL%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89-%E5%B8%B8%E7%94%A8sql%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
      <url>/2020/11/02/%E5%B8%B8%E7%94%A8SQL%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89-%E5%B8%B8%E7%94%A8sql%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="常用SQL总结"><a href="#常用SQL总结" class="headerlink" title="常用SQL总结"></a>常用SQL总结</h2><h4 id="根据年月日来范围查询记录，而数据记录又是年月日时分秒类型的"><a href="#根据年月日来范围查询记录，而数据记录又是年月日时分秒类型的" class="headerlink" title="根据年月日来范围查询记录，而数据记录又是年月日时分秒类型的"></a>根据年月日来范围查询记录，而数据记录又是年月日时分秒类型的</h4><p>常规处理</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">create_time</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">yours_table</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">create_time  <span class="string">&#x27;2020-10-28&#x27;</span>  <span class="keyword">AND</span>  <span class="string">&#x27;2020-10-28&#x27;</span></span><br></pre></td></tr></table></figure><p>这样会有一个问题就是，假如传来的时间范围是同一天的话。就会查询不准确<br>解决方法：</p><ol><li>对时间范围参数进行校验，如果是同一天就提示前台再次输入</li><li>使用 DATE_FORMAT 函数 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">create_time,</span><br><span class="line">DATE_FORMAT( create_time, <span class="string">&#x27;%Y-%m-%d&#x27;</span> ) <span class="keyword">as</span> create_time</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">yours_table</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">DATE_FORMAT( create_time, <span class="string">&#x27;%Y-%m-%d&#x27;</span> ) <span class="keyword">BETWEEN</span>    <span class="string">&#x27;2020-10-28&#x27;</span>  <span class="keyword">AND</span>  <span class="string">&#x27;2020-10-28&#x27;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> MYSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis（十一）缓存雪崩等问题</title>
      <link href="/2020/10/31/Redis%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E7%AD%89%E9%97%AE%E9%A2%98-redis%E5%8D%81%E4%B8%80%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E7%AD%89%E9%97%AE%E9%A2%98/"/>
      <url>/2020/10/31/Redis%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E7%AD%89%E9%97%AE%E9%A2%98-redis%E5%8D%81%E4%B8%80%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E7%AD%89%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这里自己虽然有了解，但是不够深入。<br>先贴点别人的博客链接占个帖子，以后会补充起来这一篇文章。</p></blockquote><p><strong>链接</strong>：</p><ul><li><a href="https://blog.csdn.net/fanrenxiang/article/details/80542580">Redis缓存穿透、缓存雪崩问题分析</a></li></ul><hr><p><strong>Redis系列完结</strong></p><p>到这里Redis的大致学习就走完了（完结撒花!）<br>但是我的Redis系列原理讲的比较少，以后有深入学习的机会就会再补发几篇博客来细致分析一些重点问题。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis（十）哨兵模式</title>
      <link href="/2020/10/31/Redis%EF%BC%88%E5%8D%81%EF%BC%89%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F-redis%E5%8D%81%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/10/31/Redis%EF%BC%88%E5%8D%81%EF%BC%89%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F-redis%E5%8D%81%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么需要哨兵？"><a href="#为什么需要哨兵？" class="headerlink" title="为什么需要哨兵？"></a><span style="color:orange;background:green;border-radius:7px;padding-left:10px;padding-right:0px;" >为什么需要哨兵？</span></h2><p>当主服务宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费时费力，还会造成一段时间内服务不可用，这不是一种推荐的方式</p><p>Redis从2.8开始正式提供了<strong>Sentinel</strong>（哨兵）架构来解决这个问题。它能够后台监控主机是否故障，<strong>如果故障了根据投票数自动将从库转换为主库</strong>。</p><h2 id="哨兵具体是什么？"><a href="#哨兵具体是什么？" class="headerlink" title="哨兵具体是什么？"></a><span style="color:orange;background:green;border-radius:7px;padding-left:12px;" >哨兵具体是什么？</span></h2><p>哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，他会独立运行。其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例</p><p><img src="https://hopestation.top/upload/2020/11/image_1604119172769.png" alt="image.png"></p><p>这里的哨兵有两个作用</p><ul><li>通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器</li><li>当哨兵检测到Master宕机，会自动将Slave切换成Master，然后通过发布订阅模式通知其他的从服务器，修改配置文件，让他们切换主机</li></ul><p>然而一个哨兵进程对Redis服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式。</p><p><img src="https://hopestation.top/upload/2020/11/image_1604119214695.png" alt="image.png"></p><p>假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行failover过程，仅仅是对哨兵1主观的认为主服务器不可用，这个现象称为<strong>主观下线</strong>，当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover【故障转移】操作。切换成功后，就会通过发布的订阅模式，让各个哨兵把自己监控的从服务器切换成主机，这个过程称为<strong>客观下线</strong></p><p>**</p><h2 id="如何配置？"><a href="#如何配置？" class="headerlink" title="如何配置？"></a><span style="color:orange;background:green;border-radius:7px;padding-left:12px;" >如何配置？</span></h2><blockquote><p>我是在本机Windows系统下单机配置的，Linux下区别不大，这里只启动了一个哨兵。</p><p>真实环境一般启动三个哨兵，来进行监控，方便投票选举（即可以二vs一选出下一个Master，若是两个个哨兵投票结果就是1：1无法可靠确定结果）</p></blockquote><ol><li><p>首先，需要配置一主二从的服务器（参考我的<a href="http://hopestation.top/archives/redis9">上一篇文章</a>）</p></li><li><p>然后再Redis目录里新建文件<code>sentinel.conf</code>，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span></span><br><span class="line">sentinel monitor myredis 127.0.0.1 6379 1</span><br><span class="line"><span class="comment">##告诉sentinel去监听地址为ip:port的一个master，这里的master-name可以自定义，quorum#是一个数字，指明当有多少个sentinel认为一个master失效时，master才算真正失效</span></span><br></pre></td></tr></table></figure><blockquote><p>当然，这里只配置了这一个核心的参数，其他参数最后有介绍</p></blockquote></li><li><p>执行 <code>redis-sentinel.exe sentinel.conf</code>来启动哨兵<br>(然后我发现Redis3.2版本的Windows安装包里居然没有sentinel.exe…，我在Linux上实践一下在更新这部分,贴个图什么的)</p></li></ol><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a><span style="color:orange;background:green;border-radius:7px;padding-left:12px;padding-right:12px;" >测试</span></h2><blockquote><p>我是在本机</p></blockquote><ol><li><p>首先模拟主机6379挂掉，redis-cli里执行<code>shutdown</code></p></li><li><p>然后等待一会就会发现6380或6381这两个从节点的某一个就会自动变为Master。</p></li><li><p>当6379重连后，它的角色会变为新主机的从机，而自己不再是主机了。</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><span style="color:orange;background:green;border-radius:7px;padding-left:12px;padding-right:12px;" >总结</span></h2><p>优点：</p><ul><li><p>哨兵集群，基于主从复制，所有的主从配置优点，他全有</p></li><li><p>主从可以切换，故障可以转移，系统的可用性会更好</p></li><li><p>哨兵模式及时主从模式的升级，手动到自动，更加健壮</p></li></ul><p>缺点：</p><ul><li>Redis不好在线扩容，集群容量一旦到达上限，在线扩容就会十分麻烦</li><li>配置哨兵模式比较麻烦</li></ul><blockquote><p>全部参数如下：</p><p>port 26379  若是哨兵集群的话，需要配置哨兵的端口</p><p>daemonize yes  是否后台运行</p><p>logfile “26379.log”  日志</p><p>dir “.&#x2F;“ </p><p>sentinel monitor mymaster 192.168.250.132 7000 2 </p><p>sentinel down-after-milliseconds mymaster 30000 </p><p>sentinel parallel-syncs mymaster 1</p><p>sentinel failover-timeout mymaster 15000 </p><p>sentinel auth-pass mymaster 123</p><p>bind 192.168.250.132 127.0.0.1</p><p><strong>sentinel monitor</strong> 告诉sentinel去监听地址为ip:port的一个master，这里的master-name可以自定义，quorum是一个数字，指明当有多少个sentinel认为一个master失效时，master才算真正失效 </p><p><strong>sentinel auth-pass</strong> 设置连接master和slave时的密码，注意的是sentinel不能分别为master和slave设置不同的密码，因此master和slave的密码应该设置相同。</p><p> <strong>sentinel down-after-milliseconds</strong>  这个配置项指定了需要多少失效时间，一个master才会被这个sentinel主观地认为是不可用的。 单位是毫秒，默认为30秒</p><p> <strong>sentinel parallel-syncs</strong> 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，这个数字越小，完成failover所需的时间就越长，但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。 </p><p><strong>sentinel failover-timeout</strong> 可以用在以下这些方面：    1. 同一个sentinel对同一个master两次failover之间的间隔时间。   2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。   3.当想要取消一个正在进行的failover所需要的时间。   4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了。</p></blockquote><p>详细了解Redis的哨兵可以阅读这篇文章：</p><p><a href="https://www.cnblogs.com/kevingrace/p/9004460.html">Redis哨兵模式（sentinel）学习总结及部署记录（主从复制、读写分离、主从切换）</a></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis（九）主从复制</title>
      <link href="/2020/10/30/Redis%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6-redis%E4%B9%9D%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
      <url>/2020/10/30/Redis%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6-redis%E4%B9%9D%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p><strong>目录</strong><br>[TOC]</p><blockquote><p>what? why? how?</p></blockquote><h2 id="什么是主从复制？"><a href="#什么是主从复制？" class="headerlink" title="什么是主从复制？"></a>什么是主从复制？</h2><ul><li><p><strong>主从</strong>？结构分为主服务器、从服务器</p></li><li><p><strong>复制</strong>？主服务器的数据，自动同步到从服务器</p></li><li><p><strong>图解</strong></p></li></ul><p><img src="https://hopestation.top/upload/2020/11/image-20201028232215974_1603898618710.png" alt="image.png"><br>  这是简单的一主二从结构</p><h2 id="为什么需要主从复制？"><a href="#为什么需要主从复制？" class="headerlink" title="为什么需要主从复制？"></a>为什么需要主从复制？</h2><blockquote><p>需要新知识还是要先思考存在的原因，在进行学习</p></blockquote><p>我认为原因主要有两点：</p><ul><li><strong>负载均衡</strong>：<br>在高并发的情况，可以主服务器只进行写操作，而从服务器进行读操作（读写分离）<strong>【分担单个Redis的压力】</strong></li><li><strong>高可用</strong>:<br>假设只存在一个Redis服务器，那么它挂了会怎样，访问压力会直接落到数据库中，数据库表示压力山大（Redis用作缓存时）。<br>若存在多个Redis服务器当一个挂掉了，就可以暂时由从服务器来替代挂的的Redis的工作（哨兵机制）</li></ul><blockquote><p>读写分离不是强制的，可以在Redis配置文件里进行配置。<br>目前的Redis版本默认的配置就是【主写，从读】</p></blockquote><h2 id="如何在本地搭建主从服务器？"><a href="#如何在本地搭建主从服务器？" class="headerlink" title="如何在本地搭建主从服务器？"></a>如何在本地搭建主从服务器？</h2><h3 id="原来"><a href="#原来" class="headerlink" title="原来"></a>原来</h3><p>首先测试原来只有一台Redis服务器的情况，用Redis客户端连接，打印信息</p><blockquote><p>先介绍一个命令 <code>info replication : 查看主/从复制信息</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master  <span class="comment"># 角色是 主机</span></span><br><span class="line">connected_slaves:0 <span class="comment"># 没有从机</span></span><br><span class="line">master_repl_offset:0</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure><h3 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h3><blockquote><p>我是在Windows系统下进行搭建测试的，Linux系统区别不大</p><p>这里是配置成一主二从的结构</p></blockquote><h4 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h4><ul><li>配从(库)不配主(库)</li><li>从库配置：slaveof 主库IP 主库端口</li><li>info replication：查看主&#x2F;从复制信息</li></ul><h4 id="具体"><a href="#具体" class="headerlink" title="具体"></a>具体</h4><p>首先在本地模拟多个Redis服务器，先创建三个Redis的配置文件</p><p><img src="https://hopestation.top/upload/2020/11/image_1603894304557.png" alt="image.png"></p><p>主机的配置文件：<code>redis.windows.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">port 6379  <span class="comment">#端口</span></span><br><span class="line">dbfilename dump-6379.rdb <span class="comment">#rdb 文件</span></span><br><span class="line">logfile <span class="string">&quot;6379.log&quot;</span>  <span class="comment">#日志文件 （这个可以不改，默认空白就将日志输出到命令行界面，若修改后，就保存在6379.log文件中，而命令行窗口没有提示日志）</span></span><br><span class="line">（linux还要修改 <span class="comment"># NOT SUPPORTED ON WINDOWS pidfile /var/run/redis.pid 比如为 6379.pid , 防止pid冲突。Windows不支持 ）</span></span><br></pre></td></tr></table></figure><p>从机的配置文件 <code>redis.windows-1.conf</code>、<code>redis.windows-2.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#从机1</span></span><br><span class="line">port 6380  <span class="comment">#端口</span></span><br><span class="line">dbfilename dump-6380.rdb <span class="comment">#rdb 文件</span></span><br><span class="line">logfile <span class="string">&quot;6380.log&quot;</span>  <span class="comment">#日志文件 （这个可以不改，默认空白就将日志输出到命令行界面，若修改后，就保存在6381.log文件中，而命令行窗口没有提示日志）</span></span><br><span class="line">（linux还要修改 <span class="comment"># NOT SUPPORTED ON WINDOWS pidfile /var/run/redis.pid 比如为 6380.pid , 防止pid冲突。Windows不支持 ）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#从机2</span></span><br><span class="line">port 6381  <span class="comment">#端口</span></span><br><span class="line">dbfilename dump-6381.rdb <span class="comment">#rdb 文件</span></span><br><span class="line">logfile <span class="string">&quot;6381.log&quot;</span>  <span class="comment">#日志文件 （这个可以不改，默认空白就将日志输出到命令行界面，若修改后，就保存在6381.log文件中，而命令行窗口没有提示日志）</span></span><br><span class="line">（linux还要修改 <span class="comment"># NOT SUPPORTED ON WINDOWS pidfile /var/run/redis.pid 比如为 6381.pid , 防止pid冲突。Windows不支持 ）</span></span><br></pre></td></tr></table></figure><p>然后分别利用这三个不同的配置文件来启动Redis服务器</p><p><img src="https://hopestation.top/upload/2020/11/image_1603894690876.png" alt="image.png"></p><p>然后在启动三个客户端来进行连接</p><p><img src="https://hopestation.top/upload/2020/11/image_1603894915597.png" alt="image.png"></p><p>这里可以看到：<strong>默认每个Redis服务器都是主机</strong>（Master），接下来进行主从（Master|Savle）的配置</p><p>我们来配置成一主二从的情况</p><p><img src="https://hopestation.top/upload/2020/11/image-20201028233722905_1603900740142.png" alt="image.png"></p><p>其实关键的步骤非常简单呀，就是一个命令<code>slaveof host port</code></p><p><strong>只是从机执行</strong><code>slaveof</code>就可以；1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将6380、6381端口的服务器，都执行</span></span><br><span class="line"><span class="comment"># 1. slaveof  从机配置</span></span><br><span class="line">slaveof 127.0.0.1 6379</span><br><span class="line"><span class="comment"># 2. 查看状态</span></span><br><span class="line">info replication</span><br></pre></td></tr></table></figure><p><img src="https://hopestation.top/upload/2020/11/image_1603896113768.png" alt="image.png"></p><p>主机再次查看状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master <span class="comment"># 6379是主机</span></span><br><span class="line">connected_slaves:2 <span class="comment"># 有2个从机</span></span><br><span class="line"><span class="comment"># 从机信息</span></span><br><span class="line">slave0:ip=127.0.0.1,port=6380,state=online,offset=1163,lag=0</span><br><span class="line">slave1:ip=127.0.0.1,port=6381,state=online,offset=1163,lag=0</span><br><span class="line">master_repl_offset:1163</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:2</span><br><span class="line">repl_backlog_histlen:1162</span><br></pre></td></tr></table></figure><p>上面用命令输入只是临时的配置，Redis服务器Shutdown后主从关系就消失了</p><p>在项目的真实环境中，一般直接在配置文件里配置主从关系，才能保证主从关系一直存在</p><p>配置文件的话，在如下位置进行配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################################# REPLICATION #################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Master-Slave replication. Use slaveof to make a Redis instance a copy of</span></span><br><span class="line"><span class="comment"># another Redis server. A few things to understand ASAP about Redis replication.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1) Redis replication is asynchronous, but you can configure a master to</span></span><br><span class="line"><span class="comment">#    stop accepting writes if it appears to be not connected with at least</span></span><br><span class="line"><span class="comment">#    a given number of slaves.</span></span><br><span class="line"><span class="comment"># 2) Redis slaves are able to perform a partial resynchronization with the</span></span><br><span class="line"><span class="comment">#    master if the replication link is lost for a relatively small amount of</span></span><br><span class="line"><span class="comment">#    time. You may want to configure the replication backlog size (see the next</span></span><br><span class="line"><span class="comment">#    sections of this file) with a sensible value depending on your needs.</span></span><br><span class="line"><span class="comment"># 3) Replication is automatic and does not need user intervention. After a</span></span><br><span class="line"><span class="comment">#    network partition slaves automatically try to reconnect to masters</span></span><br><span class="line"><span class="comment">#    and resynchronize with them.</span></span><br><span class="line">   主机ip     端口</span><br><span class="line">slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># If the master is password protected (using the &quot;requirepass&quot; configuration</span></span><br><span class="line"><span class="comment"># directive below) it is possible to tell the slave to authenticate before</span></span><br><span class="line"><span class="comment"># starting the replication synchronization process, otherwise the master will</span></span><br><span class="line"><span class="comment"># refuse the slave request.</span></span><br><span class="line">      主机密码</span><br><span class="line">masterauth &lt;master-password&gt;</span><br><span class="line">主机密码应该是，主从机都要进行配置的。</span><br><span class="line">如果只是配置主机密码，而没有配置从机密码。</span><br><span class="line">在执行slaveof的命令时会报错。【这里记不太清了，有待确定】</span><br></pre></td></tr></table></figure><p>进行配置后（命令行或配置文件的方式都可以），会有以下效果（conf文件里的默认配置）：</p><ul><li>主机<strong>可以写</strong>，从机<strong>只能读不能写</strong> </li><li>主机中所有的信息和数据，都会自动同步到从机</li></ul><p>接下来进行测试</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下面的命令是在三个不同客户端输入的注意区分！</span></span><br><span class="line"><span class="comment"># ----------------------    6379 【master】    ----------------------</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> feel happy <span class="comment"># 读</span></span><br><span class="line">OK </span><br><span class="line">127.0.0.1:6379&gt; get feel  <span class="comment"># 写, 也就是说主机，还是可读可写的</span></span><br><span class="line"><span class="string">&quot;happy&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------    6380 【slave】    ----------------------</span></span><br><span class="line">127.0.0.1:6380&gt; keys *   <span class="comment"># 读</span></span><br><span class="line">1) <span class="string">&quot;feel&quot;</span></span><br><span class="line">127.0.0.1:6380&gt; get feel    <span class="comment"># 读</span></span><br><span class="line"><span class="string">&quot;happy&quot;</span></span><br><span class="line">127.0.0.1:6380&gt; <span class="built_in">set</span> message iamslave   <span class="comment"># 写，也就是说从机，是默认拒绝执行写操作的</span></span><br><span class="line">(error) READONLY You can<span class="string">&#x27;t write against a read only slave.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># ----------------------    6381 【slave】    ----------------------</span></span><br><span class="line"><span class="string">127.0.0.1:6381&gt; get feel# 读</span></span><br><span class="line"><span class="string">&quot;happy&quot;</span></span><br></pre></td></tr></table></figure><h2 id="主机挂了会怎样？"><a href="#主机挂了会怎样？" class="headerlink" title="主机挂了会怎样？"></a>主机挂了会怎样？</h2><p>还是上面的配置</p><ul><li>6379 master<ul><li>6380 slave</li><li>6381 slave</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 6379 端口 查看主从信息</span></span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=127.0.0.1,port=6381,state=online,offset=337,lag=1</span><br><span class="line">slave1:ip=127.0.0.1,port=6380,state=online,offset=337,lag=1</span><br><span class="line">master_repl_offset:337</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:2</span><br><span class="line">repl_backlog_histlen:336</span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>这时我们手动让主机挂掉（shutdown）</p><blockquote><p>我们主要测试下面的问题，测试前可以先猜一猜：</p><p>主机挂掉，会对主从结构有影响吗？</p><p>主机挂掉，从机是否变成能写入了？</p><p>主机挂掉，从机是否会自动变为主机？</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ----------------------    6379 【master】    ----------------------</span></span><br><span class="line">127.0.0.1:6379&gt; shutdown</span><br><span class="line">not connected&gt;</span><br></pre></td></tr></table></figure><p>再来看看从机是否有变化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ----------------------    6380 【slave】    ----------------------</span></span><br><span class="line">127.0.0.1:6380&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:down</span><br><span class="line">master_last_io_seconds_ago:-1</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:687</span><br><span class="line">master_link_down_since_seconds:jd</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_repl_offset:0</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line">127.0.0.1:6380&gt; keys *  <span class="comment"># 由于之前主机设置的值，被同步到从机了</span></span><br><span class="line">1) <span class="string">&quot;feel&quot;</span>               <span class="comment"># 所以这里依然能获取到</span></span><br><span class="line">127.0.0.1:6380&gt; <span class="built_in">set</span> k8 v8   <span class="comment">#还是不能写</span></span><br><span class="line">(error) READONLY You can<span class="string">&#x27;t write against a read only slave.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># ----------------------    6381 【slave】    ----------------------</span></span><br><span class="line"><span class="string">127.0.0.1:6381&gt; info replication</span></span><br><span class="line"><span class="string"># Replication</span></span><br><span class="line"><span class="string">role:slave</span></span><br><span class="line"><span class="string">master_host:127.0.0.1</span></span><br><span class="line"><span class="string">master_port:6379</span></span><br><span class="line"><span class="string">master_link_status:down</span></span><br><span class="line"><span class="string">master_last_io_seconds_ago:-1</span></span><br><span class="line"><span class="string">master_sync_in_progress:0</span></span><br><span class="line"><span class="string">slave_repl_offset:687</span></span><br><span class="line"><span class="string">master_link_down_since_seconds:jd</span></span><br><span class="line"><span class="string">slave_priority:100</span></span><br><span class="line"><span class="string">slave_read_only:1</span></span><br><span class="line"><span class="string">connected_slaves:0</span></span><br><span class="line"><span class="string">master_repl_offset:0</span></span><br><span class="line"><span class="string">repl_backlog_active:0</span></span><br><span class="line"><span class="string">repl_backlog_size:1048576</span></span><br><span class="line"><span class="string">repl_backlog_first_byte_offset:0</span></span><br><span class="line"><span class="string">repl_backlog_histlen:0</span></span><br></pre></td></tr></table></figure><p>我们发现<strong>从机还是slave</strong>并没有变化。</p><p>然后我们再次启动原来的主机6379</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">PS F:\...\Redis-x64-3.2.100&gt; .\redis-server.exe .\redis.windows.conf</span><br><span class="line">                _._</span><br><span class="line">           _.-``__ <span class="string">&#x27;&#x27;</span>-._</span><br><span class="line">      _.-``    `.  `_.  <span class="string">&#x27;&#x27;</span>-._           Redis 3.2.100 (00000000/0) 64 bit</span><br><span class="line">  .-`` .-```.  ```\/    _.,_ <span class="string">&#x27;&#x27;</span>-._</span><br><span class="line"> (    <span class="string">&#x27;      ,       .-`  | `,    )     Running in standalone mode</span></span><br><span class="line"><span class="string"> |`-._`-...-` __...-.``-._|&#x27;</span>` _.-<span class="string">&#x27;|     Port: 6379</span></span><br><span class="line"><span class="string"> |    `-._   `._    /     _.-&#x27;</span>    |     PID: 7408</span><br><span class="line">  `-._    `-._  `-./  _.-<span class="string">&#x27;    _.-&#x27;</span></span><br><span class="line"> |`-._`-._    `-.__.-<span class="string">&#x27;    _.-&#x27;</span>_.-<span class="string">&#x27;|</span></span><br><span class="line"><span class="string"> |    `-._`-._        _.-&#x27;</span>_.-<span class="string">&#x27;    |           http://redis.io</span></span><br><span class="line"><span class="string">  `-._    `-._`-.__.-&#x27;</span>_.-<span class="string">&#x27;    _.-&#x27;</span></span><br><span class="line"> |`-._`-._    `-.__.-<span class="string">&#x27;    _.-&#x27;</span>_.-<span class="string">&#x27;|</span></span><br><span class="line"><span class="string"> |    `-._`-._        _.-&#x27;</span>_.-<span class="string">&#x27;    |</span></span><br><span class="line"><span class="string">  `-._    `-._`-.__.-&#x27;</span>_.-<span class="string">&#x27;    _.-&#x27;</span></span><br><span class="line">      `-._    `-.__.-<span class="string">&#x27;    _.-&#x27;</span></span><br><span class="line">          `-._        _.-<span class="string">&#x27;</span></span><br><span class="line"><span class="string">              `-.__.-&#x27;</span></span><br><span class="line"></span><br><span class="line">[7408] 30 Oct 06:20:16.246 <span class="comment"># Server started, Redis version 3.2.100</span></span><br><span class="line">[7408] 30 Oct 06:20:16.262 * DB loaded from disk: 0.000 seconds</span><br><span class="line">[7408] 30 Oct 06:20:16.262 * The server is now ready to accept connections on port 6379</span><br><span class="line">[7408] 30 Oct 06:20:16.697 * Slave 127.0.0.1:6380 asks <span class="keyword">for</span> synchronization</span><br><span class="line">[7408] 30 Oct 06:20:16.697 * Partial resynchronization not accepted: Runid mismatch (Client asked <span class="keyword">for</span> runid <span class="string">&#x27;816bd2f39dd9de61fea057b9ae893a99bd36c8de&#x27;</span>, my runid is <span class="string">&#x27;ce0d9f7a7dc2a429491c13beefb946c12ae949e4&#x27;</span>)</span><br><span class="line">[7408] 30 Oct 06:20:16.697 * Starting BGSAVE <span class="keyword">for</span> SYNC with target: disk</span><br><span class="line">[7408] 30 Oct 06:20:16.697 * Background saving started by pid 1692</span><br><span class="line">[7408] 30 Oct 06:20:16.734 * Slave 127.0.0.1:6381 asks <span class="keyword">for</span> synchronization</span><br><span class="line">[7408] 30 Oct 06:20:16.734 * Partial resynchronization not accepted: Runid mismatch (Client asked <span class="keyword">for</span> runid <span class="string">&#x27;816bd2f39dd9de61fea057b9ae893a99bd36c8de&#x27;</span>, my runid is <span class="string">&#x27;ce0d9f7a7dc2a429491c13beefb946c12ae949e4&#x27;</span>)</span><br><span class="line">[7408] 30 Oct 06:20:16.734 * Waiting <span class="keyword">for</span> end of BGSAVE <span class="keyword">for</span> SYNC</span><br><span class="line">[7408] 30 Oct 06:20:17.097 <span class="comment"># fork operation complete</span></span><br><span class="line">[7408] 30 Oct 06:20:17.097 * Background saving terminated with success</span><br><span class="line"><span class="comment"># 两个从机直接连接上了</span></span><br><span class="line">[7408] 30 Oct 06:20:17.097 * Synchronization with slave 127.0.0.1:6380 succeeded</span><br><span class="line">[7408] 30 Oct 06:20:17.097 * Synchronization with slave 127.0.0.1:6381 succeeded</span><br></pre></td></tr></table></figure><p>然后再次往主机上设置值，测试从机是否能get到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ----------------------    6379 【master】    ----------------------</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> message iamBack</span><br><span class="line">OK</span><br><span class="line"><span class="comment"># ----------------------    6380 【slave】    -----------------------</span></span><br><span class="line">127.0.0.1:6380&gt; get message</span><br><span class="line"><span class="string">&quot;iamBack&quot;</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p>主机断开，<strong>从机依旧连接到到主机</strong>，但是没有写操作</p></li><li><p>主机如果回来了，<strong>从机依旧可以获取到主机写的信息</strong></p></li></ul><blockquote><p>这里主机断了，虽然重连后可以正常使用，但在断连的一段时间里都无法进行写操作（程序这一段时间无法正常写入缓存，这不是期望的结果）。</p><p>我们在实际中期望的状态是：主机断了，还是能接着进行写操作（可以在两个从机里选出一个来担任主机，来继续运行下去）&#x3D;&#x3D;&gt; 这可以通过<strong>哨兵</strong>实现，在后面文章会介绍</p></blockquote><h2 id="从机挂了会怎样？"><a href="#从机挂了会怎样？" class="headerlink" title="从机挂了会怎样？"></a>从机挂了会怎样？</h2><h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><blockquote><p>我们主要测试下面的问题，测试前可以先猜一猜</p><p>从机挂了，会对主从结构有影响吗？</p><p>从机断连的时间段，主机写入的数据，从机重连后还能获取到吗？</p></blockquote><p>测试开始：手动让6380的从机挂掉</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ----------------------    6380 【slave】    ----------------------</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6380&gt; shutdown   <span class="comment"># 6380 GG</span></span><br><span class="line">not connected&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------    6379 【master】    ----------------------</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> mes 6380canyouGet?  <span class="comment"># 主机set了一个值</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------    6381 【slave】    ----------------------</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6381&gt; get mes <span class="comment"># 6381 还是从机肯能获取到</span></span><br><span class="line"><span class="string">&quot;6380canyouGet?&quot;</span></span><br></pre></td></tr></table></figure><p>6380重连</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">PS F:\...\Redis-x64-3.2.100&gt; .\redis-server.exe .\redis.windows-1.conf</span><br><span class="line">                _._</span><br><span class="line">           _.-``__ <span class="string">&#x27;&#x27;</span>-._</span><br><span class="line">      _.-``    `.  `_.  <span class="string">&#x27;&#x27;</span>-._           Redis 3.2.100 (00000000/0) 64 bit</span><br><span class="line">  .-`` .-```.  ```\/    _.,_ <span class="string">&#x27;&#x27;</span>-._</span><br><span class="line"> (    <span class="string">&#x27;      ,       .-`  | `,    )     Running in standalone mode</span></span><br><span class="line"><span class="string"> |`-._`-...-` __...-.``-._|&#x27;</span>` _.-<span class="string">&#x27;|     Port: 6380</span></span><br><span class="line"><span class="string"> |    `-._   `._    /     _.-&#x27;</span>    |     PID: 12036</span><br><span class="line">  `-._    `-._  `-./  _.-<span class="string">&#x27;    _.-&#x27;</span></span><br><span class="line"> |`-._`-._    `-.__.-<span class="string">&#x27;    _.-&#x27;</span>_.-<span class="string">&#x27;|</span></span><br><span class="line"><span class="string"> |    `-._`-._        _.-&#x27;</span>_.-<span class="string">&#x27;    |           http://redis.io</span></span><br><span class="line"><span class="string">  `-._    `-._`-.__.-&#x27;</span>_.-<span class="string">&#x27;    _.-&#x27;</span></span><br><span class="line"> |`-._`-._    `-.__.-<span class="string">&#x27;    _.-&#x27;</span>_.-<span class="string">&#x27;|</span></span><br><span class="line"><span class="string"> |    `-._`-._        _.-&#x27;</span>_.-<span class="string">&#x27;    |</span></span><br><span class="line"><span class="string">  `-._    `-._`-.__.-&#x27;</span>_.-<span class="string">&#x27;    _.-&#x27;</span></span><br><span class="line">      `-._    `-.__.-<span class="string">&#x27;    _.-&#x27;</span></span><br><span class="line">          `-._        _.-<span class="string">&#x27;</span></span><br><span class="line"><span class="string">              `-.__.-&#x27;</span></span><br><span class="line"></span><br><span class="line">[12036] 30 Oct 06:46:59.117 <span class="comment"># Server started, Redis version 3.2.100</span></span><br><span class="line">[12036] 30 Oct 06:46:59.117 * DB loaded from disk: 0.000 seconds</span><br><span class="line">[12036] 30 Oct 06:46:59.117 * The server is now ready to accept connections on port 6380</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------    6380 【slave】    ----------------------</span></span><br><span class="line"></span><br><span class="line">PS F:\CodeSoft\Redis-x64-3.2.100&gt; .\redis-cli.exe -p 6380</span><br><span class="line">127.0.0.1:6380&gt; get mes  <span class="comment"># 获取不到，断连时，主机set的数据</span></span><br><span class="line">(nil)</span><br><span class="line"></span><br><span class="line">127.0.0.1:6380&gt; keys *  <span class="comment"># 重连后的数据状态 还是 断连时的数据状态</span></span><br><span class="line">1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;feel&quot;</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6380&gt; info replication <span class="comment"># 在看看主从信息</span></span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master  <span class="comment">#之前命令行配置的主从失效了，6380默认根据配置文件变成了主机     </span></span><br><span class="line">connected_slaves:0</span><br><span class="line">master_repl_offset:0</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line"></span><br><span class="line">127.0.0.1:6380&gt; slaveof 127.0.0.1 6379  <span class="comment"># 再把它变为6379的从机</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6380&gt; get mes  <span class="comment"># 自动进行了主从数据复制 所以又可以获取主机数据了</span></span><br><span class="line"><span class="string">&quot;6380canyouGet?&quot;</span></span><br><span class="line">127.0.0.1:6380&gt; keys *</span><br><span class="line">1) <span class="string">&quot;feel&quot;</span></span><br><span class="line">2) <span class="string">&quot;mes&quot;</span></span><br><span class="line">3) <span class="string">&quot;message&quot;</span></span><br></pre></td></tr></table></figure><p><strong>这里要注意一下</strong>：之前都是通过命令行输入slaveof 进行主从配置测试的。（而不是配置文件）</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>命令行配置</strong>的主从信息，再<strong>重连后会失效</strong></li><li><strong>配置文件</strong>配置的<strong>则不会失效</strong>，也就是说上面6380如果是里配置文件进行配置的，那么<strong>重连后依旧是6379的从机</strong>，<strong>可以获取</strong>断连时主机的set的<strong>数据</strong></li></ul><h2 id="一带一路（链路结构）"><a href="#一带一路（链路结构）" class="headerlink" title="一带一路（链路结构）"></a>一带一路（链路结构）</h2><p>上面介绍了的一主二从的分支结构，而实际项目中Redis主从结构可能是各种样式的</p><p>比如一主2从，然后每一个从服务器后面还可能跟着一个服务器等等..</p><p>下面这张图是三台Redis的一条链路的主从结构（可以戏称为一带一路…）：</p><p><img src="https://hopestation.top/upload/2020/11/image-20201030191725490_1604058454844.png" alt="image.png"></p><blockquote><p>Master节点不做变化，slave-1执行:slaveof 这个master，slave-2执行:slaveof 这个slave-1就配置成这种结构了。具体命令如上面介绍的</p></blockquote><p>中间的节点还是Slave，但是后面还可以接多个Slave。</p><ul><li>主从复制还是存在的。比如最后的一个Slave可以获取到Master中set的数据，这里不做演示了</li><li>加入Matser断开连接，后面的Slave主从节点结构不变</li></ul><h2 id="谋朝篡位（变为Master节点）"><a href="#谋朝篡位（变为Master节点）" class="headerlink" title="谋朝篡位（变为Master节点）"></a>谋朝篡位（变为Master节点）</h2><p>接着上面的一带一路来说，假如Matser断开连接了，那么下面的Slave-1或Slave-2就在想如何当Master呢？</p><p>其实命令很简单：<code>slaveof no one</code> (翻译一下就是：不做任何人的奴隶，所以就成为主人了【Master】)</p><blockquote><p>这里是相当于手动地升级为Master，再实际中一般由哨兵来完成。哨兵的讲解在下一篇文章</p></blockquote><p>我们来分析<strong>Master宕机</strong>时，Slave节点谋朝篡位（升级Master）后的主从结构变化：</p><p>情况一：当Slave还没谋朝篡位时：Master重连的话，主从结构不变</p><p>情况二：当<strong>Slave-1升级Master</strong>后：由于Slave-2本来就是slave of Slave-1的。所以Slave2还是slave-1的从机。而这是加入Master重连成功，解决还是Master。只不过是一个孤零零的Matser，没有从机了</p><p><img src="https://hopestation.top/upload/2020/11/image-20201030193418031_1604058462435.png" alt="image.png"></p><p>情况二：当<strong>Slave-2升级Master</strong>后，Slave-2不再是任何主机的从机，也没有自己的Slave节点</p><p><img src="https://hopestation.top/upload/2020/11/image-20201030194256097_1604058462517.png" alt="image-20201030194256097"></p><h2 id="如何复制？"><a href="#如何复制？" class="headerlink" title="如何复制？"></a>如何复制？</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>从上图可以看出来大致分为6个过程：</p><ul><li>执行slaveof后从节点保存主节点的地址信息便返回，这时候复制流程还没开始。</li><li>从节点内部通过每秒运行的定时任务维护复制相关逻辑，当定时任务发现存在新的主节点后，会尝试与该节点建立网络连接，从节点会建立一个socket套接字。</li><li>发送ping命令，检测主从之间网络套接字是否可用，检测主节点是否可用接受处理命令。如果发送 ping 命令后，从节点没有收到主节点的 pong 回复或者超时，比如网络超时或者主节点正在阻塞无法响应命令，从节点会断开复制连接，下次定时任务会发起重连。</li><li>如果主节点配置了<code>requirepass</code>参数，则需要密码认证，从节点必须配置<code>masterauth</code>参数保证与主节点相同的密码才能通过验证。</li><li>主从复制连接正常通信后，对于首次建立复制的场景，主节点会把持有的数据全部发送给从节点，这部分操作是耗时最长的步骤。</li><li>当主节点把当前的数据同步给从节点后，便完成了复制的建立流程。接下来主节点会持续地把写命令发送给从节点，保证主从数据一致性。</li></ul><blockquote><p>主从同步的过程中，从节点会把原来的数据清空。</p></blockquote><h2 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h2><p>同步方式：</p><ul><li><p>全量复制</p><p>用于初次复制或其它无法进行部分复制的情况，将主节点中的所有数据都发送给从节点。当数据量过大的时候，会造成很大的网络开销。</p></li><li><p>部分复制</p><p>用于处理在主从复制中因网络闪退等原因造成数据丢失场景，当从节点再次连上主节点，如果条件允许，主节点会补发丢失数据给从节点，因为补发的数据远远小于全量数据，可以有效避免全量复制的过高开销。但需要注意，如果网络中断时间过长，造成主节点没有能够完整地保存中断期间执行的写命令，则无法进行部分复制，仍使用全量复制 。</p></li></ul><p>复制偏移量：</p><ul><li>参与复制的主从节点都会维护自身复制偏移量，主节点在处理完写入命令操作后，会把命令的字节长度做累加记录，统计信息在<code>info replication</code>中的<code>master_repl_offset</code>指标中。</li><li>从节点每秒钟上报自身的复制偏移量给主节点，因此主节点也会保存从节点的复制偏移量<code>slave0:ip=192.168.1.3,port=6379,state=online,offset=116424,lag=0</code></li><li>从节点在接收到主节点发送的命令后，也会累加记录自身的偏移量。统计信息在<code>info replication</code>中的<code>slave_repl_offset</code>中。</li></ul><p>复制积压缓冲区：</p><ul><li>复制积压缓冲区是保存在主节点上的一个固定长度的队列，默认大小为1MB，当主节点有连接的从节点时被创建，这时主节点响应写命令时，不但会把命令发给从节点，还会写入复制积压缓冲区。</li><li>在命令传播阶段，主节点除了将写命令发送给从节点，还会发送一份给复制积压缓冲区，作为写命令的备份；除了存储写命令，复制积压缓冲区中还存储了其中 的每个字节对应的复制偏移量(offset) 。由于复制积压缓冲区定长且先进先出，所以它保存的是主节点最近执行的写命令；时间较早的写命令会被挤出缓冲区。</li></ul><p>主节点运行ID：</p><ul><li>每个redis节点启动后都会动态分配一个40位的十六进制字符串为运行ID。运行ID的主要作用是来唯一识别redis节点，比如从节点保存主节点的运行ID识别自已正在复制是哪个主节点。如果只使用ip+port的方式识别主节点，那么主节点重启变更了整体数据集（如替换RDB&#x2F;AOF文件），从节点再基于偏移量复制数据将是不安全的，因此当运行ID变化后从节点将做全量复制。可以在<code>info server</code>命令查看当前节点的运行ID。</li><li>需要注意的是redis关闭再启动，运行的id会随之变化。</li></ul><p>Psync命令：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA2LzAzL2Q4ZjA2Mjc5YzdlYzQucG5n?x-oss-process=image/format,png" alt="img"></p><ul><li><p>从节点使用<code>psync</code>命令完成部分复制和全量复制功能<code>psync runid offset</code></p></li><li><p>流程说明：    </p><ul><li><p>从节点(slave)发送psync命令给主节点，参数runid是当前从节点保存的主节点运行id，如果没有则默认值为 ？, 参数offset是当前从节点保存的复制偏移量，如果是第一次参与复制则默认值为-1。</p></li><li><p>主节点根据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pysnc</span><br></pre></td></tr></table></figure><p>参数和自身数据情况决定响应结果：      </p><ul><li>如果回复+FULLRESYNC {runid} {offset}，那么从节点将触发全量复制流程。</li><li>如果回复+CONTINUE，从节点将触发部分复制流程。</li><li>如果回复-ERR，说明主节点版本低于Redis2.8。</li></ul></li></ul></li></ul><p>全量复制流程：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA2LzAzLzczNTFiMzg5NTRhYjkucG5n?x-oss-process=image/format,png" alt="img"></p><ul><li>发送psync命令进行数据同步，由于是第一次进行复制，从节点没有复制偏移量和主节点的运行id，所以发送psync ? -1</li><li>主节点根据psync ? -1解析出当前为全量复制，回复+FULLRESYNC响应(主机会向从机发送 runid 和 offset，因为 slave 并没有对应的 offset，所以是全量复制)</li><li>从节点接收主节点的响应数据保存运行ID和偏移量offset(从机 slave 会保存 主机master 的基本信息 save masterInfo)</li><li>主节点收到全量复制的命令后，执行bgsave（异步执行），在后台生成RDB文件（快照），并使用一个缓冲区（称为复制缓冲区）记录从现在开始执行的所有写命令</li><li>主节点发送RDB文件给从节点，从节点把接收到的RDB文件保存在本地并直接作为从节点的数据文件，接收完RDB后从节点打印相关日志，可以在日志中查看主节点发送的数据量(主机send RDB 发送 RDB 文件给从机)    <ul><li>注意！对于数据量较大的主节点，比如生成的RDB文件超过6GB以上时要格外小心。传输文件这一步操作非常耗时，速度取决于主从节点之间网络带宽。</li><li>通过细致分析Full resync和MASTER &lt;-&gt; SLAVE这两行日志的时间差，可以算出RDB文件从创建到传输完毕消耗的总时间。如果总时间超过repl-timeout所配置的值 (默认60秒)，从节点将放弃接受RDB文件并清理已经下载的临时文件，导致全量复制失败;针对数据量较大的节点，建议调大repl-timeout参数防止出现全量同步数据超时;</li><li>例如对于千兆网卡的机器，网卡带宽理论峰值大约每秒传输100MB,在不考虑其他进程消耗带宽的情况下，6GB的RDB文件至少需要60秒传输时间，默认配置下，极易出现主从数同步超时。</li></ul></li><li>对于从节点开始接收RDB快照到接收完成期间，主节点仍然响应读写命令，因此主节点会把这期间写命令数据保存在复制客户端缓冲区内，当从节点加载完RDB文件后，主节点再把缓冲区内的数据发送给从节点，保证主从之间数据致性。(发送缓冲区数据)</li><li>从节点接收完主节点传送来的全部数据后会清空自身旧数据(刷新旧的数据，从节点在载入主节点的数据之前要先将老数据清除)</li><li>从节点清空数据后开始加载RDB文件，对于较大的RDB文件，这一步操作依然比较消耗时间，可以通过计算日志之间的实际差来判断加载RDB的总消耗时间(加载 RDB 文件将数据库状态更新至主节点执行bgsave时的数据库状态和缓冲区数据的加载。)</li><li>从节点成功加载完RDB后，如果当前节点开启了AOF持久化的功能，它会立刻做bgrewriteeaof的操作，为了保证全量复制后AOF持久化文件立刻可用。 通过分析全量复制的所有流程，全量复制是一个非常耗时费力的操作。他的实际开销主要包括：    <ul><li>主节点bgsave时间</li><li>RDB文件网络传输时间</li><li>从节点清空数据时间</li><li>从节点加载RDB的时间</li><li>可能的AOF重写时间</li></ul></li></ul><p>部分复制流程：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9xaW5pdS5nYW9iaW56aGFuLmNvbS8yMDIwLzA2LzA0LzY1YjBlNzYzZjRmZDIucG5n?x-oss-process=image/format,png" alt="img"></p><ul><li>部分复制是 Redis 2.8 以后出现的，之所以要加入部分复制，是因为全量复制会产生很多问题，比如像上面的时间开销大、无法隔离等问题， Redis 希望能够在主节点出现抖动（相当于断开连接）的时候，可以有一些机制将复制的损失降低到最低</li><li>当主从节点之间网络出现中断时，如果超过repl-timeout时间，主节点会认为从节点出问题了并断开复制链接（如果网络抖动（连接断开 connection lost））。</li><li>主从连接中断期间主节点依然响应命令，但因复制链接中断命令无法发送给从节点不过主节点内部存在的复制积压缓存去，依然可以保存一段时间的写命令数据，默认最大缓存1MB(主机master 还是会写 replbackbuffer（复制缓冲区）)</li><li>当主从节点网络恢复后，从节点会再次连上主节点。(从机slave会继续尝试连接主机)</li><li>当主从连接恢复后，由于从节点之前保存了自身已复制的偏移量和主节点的运行id。因此会把他们当作psync参数发送给主节点，要求进行部分复制操作。(从机 slave 会把自己当前 runid 和偏移量传输给主机 master，并且执行 pysnc 命令同步)</li><li>主节点接到psync命令后首先核对参数的runid，如果 master 发现你的偏移量是在缓冲区的范围内，根据参数offset在缓冲区查找复制内内，如果在偏移量之后的数据存在缓存区中，则对从节点发送continue表示可以进行部分复制</li><li>主节点根据偏移量把复制积压缓冲区里的数据发送给从节点，保证主从复制进入正常状态。(同步了 offset 的部分数据，所以部分复制的基础就是偏移量 offset)</li></ul><p>心跳：</p><blockquote><p>主节点在建立成功后会维护这长连接彼此发送心跳检测</p></blockquote><ul><li>主从节点彼此都有心跳检测机制，各自模拟成对方的客户端进行通信，通过client list命令查看复制相关客户端信息，主节点的连接状态为flags&#x3D;M,从节点连接状态 flags&#x3D;S。</li><li>主节点默认每隔10秒对从节点发送ping命令，判断从节点的存活性和连接状态。可通过参数repl-ping-slave-period控制发送频率。</li><li>从节点在主线程中每隔1秒发送replconf ack {offset} 命令，给主节点上报自身当前的复制偏移量。</li></ul><p>缓冲区大小调节：</p><ul><li>由于缓冲区长度固定且有限，因此可以备份的写命令也有限，当主从节点offset的差距过大超过缓冲区长度时，将无法执行部分复制，只能执行全量复制。</li><li>反过来说，为了提高网络中断时部分复制执行的概率，可以根据需要增大复制积压缓冲区的大小(通过配置repl-backlog-size)来设置；</li><li>例如 如果网络中断的平均时间是 60s，而主节点平均每秒产生的写命令(特定协议格式)所占的字节数为100KB，则复制积压缓冲区的平均需求为6MB，保险起见， 可以设置为12MB，来保证绝大多数断线情况都可以使用部分复制。</li></ul><hr><p>未完待续…</p><hr>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis主从复制详解 （转）</title>
      <link href="/2020/10/28/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E8%AF%A6%E8%A7%A3%20%EF%BC%88%E8%BD%AC%EF%BC%89-redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E8%AF%A6%E8%A7%A3%E8%BD%AC/"/>
      <url>/2020/10/28/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E8%AF%A6%E8%A7%A3%20%EF%BC%88%E8%BD%AC%EF%BC%89-redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E8%AF%A6%E8%A7%A3%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<ol><li>本文转自：<ul><li>作者：编程迷思</li><li>原文链接：<a href="https://www.cnblogs.com/kismetv/p/9236731.html">https://www.cnblogs.com/kismetv/p/9236731.html</a></li></ul></li><li>实际操作还可以参考这一篇<br><a href="https://blog.csdn.net/qq_39669058/article/details/87720731">https://blog.csdn.net/qq_39669058/article/details/87720731</a></li><li>其他参考文章<br><a href="https://www.cnblogs.com/daofaziran/p/10978628.html">https://www.cnblogs.com/daofaziran/p/10978628.html</a></li></ol><hr><p><strong>目录</strong></p><p>[TOC]</p><h1 id="一、主从复制概述"><a href="#一、主从复制概述" class="headerlink" title="一、主从复制概述"></a>一、主从复制概述</h1><p>主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(master)，后者称为从节点(slave)；数据的复制是单向的，只能由主节点到从节点。</p><p>默认情况下，每台Redis服务器都是主节点；且一个主节点可以有多个从节点(或没有从节点)，但一个从节点只能有一个主节点。</p><p><strong>为什么要主从复制？</strong></p><p>主从复制的作用主要包括：</p><ol><li><strong>数据冗余</strong>：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</li><li><strong>故障恢复</strong>：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。</li><li>负载均衡：在主从复制的基础上，配合<strong>读写分离</strong>，可以由主节点提供写服务，由从节点提供读服务（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），<strong>分担服务器负载</strong>；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大<strong>提高Redis服务器的并发量</strong>。（我认为是主要的作用）</li><li>高可用基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是Redis<strong>高可用</strong>的基础。</li></ol><h1 id="二、如何使用主从复制"><a href="#二、如何使用主从复制" class="headerlink" title="二、如何使用主从复制"></a>二、如何使用主从复制</h1><p>为了更直观的理解主从复制，在介绍其内部原理之前，先说明我们需要如何操作才能开启主从复制。</p><h2 id="1-建立复制"><a href="#1-建立复制" class="headerlink" title="1. 建立复制"></a>1. 建立复制</h2><p>需要注意，<strong>主从复制的开启，完全是在从节点发起的；不需要我们在主节点做任何事情。</strong></p><p>从节点开启主从复制，有3种方式：</p><p>（1）配置文件</p><p>在从服务器的配置文件中加入：slaveof <masterip> <masterport></p><p>（2）启动命令</p><p>redis-server启动命令后加入 –slaveof <masterip> <masterport></p><p>（3）客户端命令</p><p>Redis服务器启动后，直接通过客户端执行命令：slaveof <masterip> <masterport>，则该Redis实例成为从节点。</p><p>上述3种方式是等效的，下面以客户端命令的方式为例，看一下当执行了slaveof后，Redis主节点和从节点的变化。</p><h2 id="2-实例"><a href="#2-实例" class="headerlink" title="2. 实例"></a>2. 实例</h2><h3 id="准备工作：启动两个节点"><a href="#准备工作：启动两个节点" class="headerlink" title="准备工作：启动两个节点"></a>准备工作：启动两个节点</h3><p>方便起见，实验所使用的主从节点是在一台机器上的不同Redis实例，其中主节点监听6379端口，从节点监听6380端口；从节点监听的端口号可以在配置文件中修改：<br><img src="https://hopestation.top/upload/2020/11/image_1603874116768.png" alt="image.png"></p><p>启动后可以看到：</p><p><img src="https://hopestation.top/upload/2020/11/image_1603874154567.png" alt="image.png"></p><p>两个Redis节点启动后（分别称为6379节点和6380节点），默认都是主节点。</p><h3 id="建立复制"><a href="#建立复制" class="headerlink" title="建立复制"></a>建立复制</h3><p>此时在6380节点执行slaveof命令，使之变为从节点：</p><p><img src="https://hopestation.top/upload/2020/11/image_1603874168555.png" alt="image.png"></p><h3 id="观察效果"><a href="#观察效果" class="headerlink" title="观察效果"></a>观察效果</h3><p>下面验证一下，在主从复制建立后，主节点的数据会复制到从节点中。</p><p>（1）首先在从节点查询一个不存在的key：</p><p><img src="https://hopestation.top/upload/2020/11/image_1603874180179.png" alt="image.png"></p><p>（2）然后在主节点中增加这个key：</p><p><img src="https://hopestation.top/upload/2020/11/image_1603874194104.png" alt="image.png"></p><p>（3）此时在从节点中再次查询这个key，会发现主节点的操作已经同步至从节点：</p><p><img src="https://hopestation.top/upload/2020/11/image_1603874209634.png" alt="image.png">!</p><p>（4）然后在主节点删除这个key：</p><p><img src="https://hopestation.top/upload/2020/11/image_1603874235055.png" alt="image.png"></p><p>（5）此时在从节点中再次查询这个key，会发现主节点的操作已经同步至从节点：</p><p><img src="https://hopestation.top/upload/2020/11/image_1603874266643.png" alt="image.png"></p><h2 id="3-断开复制"><a href="#3-断开复制" class="headerlink" title="3. 断开复制"></a>3. 断开复制</h2><p>通过slaveof <masterip> <masterport>命令建立主从复制关系以后，可以通过slaveof no one断开。需要注意的是，从节点断开复制后，不会删除已有的数据，只是不再接受主节点新的数据变化。</p><p>从节点执行slaveof no one后，打印日志如下所示；可以看出断开复制后，从节点又变回为主节点。</p><p><img src="https://hopestation.top/upload/2020/11/image_1603874302691.png" alt="image.png"></p><p>主节点打印日志如下：</p><p><img src="https://hopestation.top/upload/2020/11/image_1603874314702.png" alt="image.png"></p><h1 id="三、主从复制的实现原理"><a href="#三、主从复制的实现原理" class="headerlink" title="三、主从复制的实现原理"></a>三、主从复制的实现原理</h1><p>上面一节中，介绍了如何操作可以建立主从关系；本小节将介绍主从复制的实现原理。</p><p>主从复制过程大体可以分为3个阶段：连接建立阶段（即准备阶段）、数据同步阶段、命令传播阶段；下面分别进行介绍。</p><h2 id="1-连接建立阶段"><a href="#1-连接建立阶段" class="headerlink" title="1. 连接建立阶段"></a>1. 连接建立阶段</h2><p>该阶段的主要作用是在主从节点之间建立连接，为数据同步做好准备。</p><h3 id="步骤1：保存主节点信息"><a href="#步骤1：保存主节点信息" class="headerlink" title="步骤1：保存主节点信息"></a>步骤1：保存主节点信息</h3><p>从节点服务器内部维护了两个字段，即masterhost和masterport字段，用于存储主节点的ip和port信息。</p><p>需要注意的是，<strong>slaveof<strong><strong>是异步命令，从节点完成主节点ip</strong></strong>和port<strong><strong>的保存后，向发送slaveof</strong></strong>命令的客户端直接返回OK****，实际的复制操作在这之后才开始进行。</strong></p><p>这个过程中，可以看到从节点打印日志如下：</p><p><img src="https://hopestation.top/upload/2020/11/image_1603874490828.png" alt="image.png"></p><h3 id="步骤2：建立socket连接"><a href="#步骤2：建立socket连接" class="headerlink" title="步骤2：建立socket连接"></a>步骤2：建立socket连接</h3><p>从节点每秒1次调用复制定时函数replicationCron()，如果发现了有主节点可以连接，便会根据主节点的ip和port，创建socket连接。如果连接成功，则：</p><p>从节点：为该socket建立一个专门处理复制工作的文件事件处理器，负责后续的复制工作，如接收RDB文件、接收命令传播等。</p><p>主节点：接收到从节点的socket连接后（即accept之后），为该socket创建相应的客户端状态，<strong>并将从节点看做是连接到主节点的一个客户端，后面的步骤会以从节点向主节点发送命令请求的形式来进行。</strong></p><p>这个过程中，从节点打印日志如下：</p><p><img src="https://hopestation.top/upload/2020/11/image_1603874507365.png" alt="image.png"></p><h3 id="步骤3：发送ping命令"><a href="#步骤3：发送ping命令" class="headerlink" title="步骤3：发送ping命令"></a>步骤3：发送ping命令</h3><p>从节点成为主节点的客户端之后，发送ping命令进行首次请求，目的是：检查socket连接是否可用，以及主节点当前是否能够处理请求。</p><p>从节点发送ping命令后，可能出现3种情况：</p><p>（1）返回pong：说明socket连接正常，且主节点当前可以处理请求，复制过程继续。</p><p>（2）超时：一定时间后从节点仍未收到主节点的回复，说明socket连接不可用，则从节点断开socket连接，并重连。</p><p>（3）返回pong以外的结果：如果主节点返回其他结果，如正在处理超时运行的脚本，说明主节点当前无法处理命令，则从节点断开socket连接，并重连。</p><p>在主节点返回pong情况下，从节点打印日志如下：</p><p><img src="https://hopestation.top/upload/2020/11/image_1603874526076.png" alt="image.png"></p><h3 id="步骤4：身份验证"><a href="#步骤4：身份验证" class="headerlink" title="步骤4：身份验证"></a>步骤4：身份验证</h3><p>如果从节点中设置了masterauth选项，则从节点需要向主节点进行身份验证；没有设置该选项，则不需要验证。从节点进行身份验证是通过向主节点发送auth命令进行的，auth命令的参数即为配置文件中的masterauth的值。</p><p>如果主节点设置密码的状态，与从节点masterauth的状态一致（一致是指都存在，且密码相同，或者都不存在），则身份验证通过，复制过程继续；如果不一致，则从节点断开socket连接，并重连。</p><h3 id="步骤5：发送从节点端口信息"><a href="#步骤5：发送从节点端口信息" class="headerlink" title="步骤5：发送从节点端口信息"></a>步骤5：发送从节点端口信息</h3><p>身份验证之后，从节点会向主节点发送其监听的端口号（前述例子中为6380），主节点将该信息保存到该从节点对应的客户端的slave_listening_port字段中；该端口信息除了在主节点中执行info Replication时显示以外，没有其他作用。</p><h2 id="2-数据同步阶段"><a href="#2-数据同步阶段" class="headerlink" title="2. 数据同步阶段"></a>2. 数据同步阶段</h2><p>主从节点之间的连接建立以后，便可以开始进行数据同步，该阶段可以理解为从节点数据的初始化。具体执行的方式是：从节点向主节点发送psync命令（Redis2.8以前是sync命令），开始同步。</p><p>数据同步阶段是主从复制最核心的阶段，根据主从节点当前状态的不同，可以分为全量复制和部分复制，下面会有一章专门讲解这两种复制方式以及psync命令的执行过程，这里不再详述。</p><p>需要注意的是，在数据同步阶段之前，从节点是主节点的客户端，主节点不是从节点的客户端；而到了这一阶段及以后，主从节点互为客户端。原因在于：在此之前，主节点只需要响应从节点的请求即可，不需要主动发请求，而在数据同步阶段和后面的命令传播阶段，主节点需要主动向从节点发送请求（如推送缓冲区中的写命令），才能完成复制。</p><h2 id="3-命令传播阶段"><a href="#3-命令传播阶段" class="headerlink" title="3. 命令传播阶段"></a>3. 命令传播阶段</h2><p>数据同步阶段完成后，主从节点进入命令传播阶段；在这个阶段主节点将自己执行的写命令发送给从节点，从节点接收命令并执行，从而保证主从节点数据的一致性。</p><p>在命令传播阶段，除了发送写命令，主从节点还维持着心跳机制：PING和REPLCONF ACK。由于心跳机制的原理涉及部分复制，因此将在介绍了部分复制的相关内容后单独介绍该心跳机制。</p><p><strong>延迟与不一致</strong></p><p>需要注意的是，命令传播是异步的过程，即主节点发送写命令后并不会等待从节点的回复；因此实际上主从节点之间很难保持实时的一致性，延迟在所难免。数据不一致的程度，与主从节点之间的网络状况、主节点写命令的执行频率、以及主节点中的repl-disable-tcp-nodelay配置等有关。</p><p>repl-disable-tcp-nodelay no：该配置作用于命令传播阶段，控制主节点是否禁止与从节点的TCP_NODELAY；默认no，即不禁止TCP_NODELAY。当设置为yes时，TCP会对包进行合并从而减少带宽，但是发送的频率会降低，从节点数据延迟增加，一致性变差；具体发送频率与Linux内核的配置有关，默认配置为40ms。当设置为no时，TCP会立马将主节点的数据发送给从节点，带宽增加但延迟变小。</p><p>一般来说，只有当应用对Redis数据不一致的容忍度较高，且主从节点之间网络状况不好时，才会设置为yes；多数情况使用默认值no。</p><h1 id="四、【数据同步阶段】全量复制和部分复制"><a href="#四、【数据同步阶段】全量复制和部分复制" class="headerlink" title="四、【数据同步阶段】全量复制和部分复制"></a>四、【数据同步阶段】全量复制和部分复制</h1><p>在Redis2.8以前，从节点向主节点发送sync命令请求同步数据，此时的同步方式是全量复制；在Redis2.8及以后，从节点可以发送psync命令请求同步数据，此时根据主从节点当前状态的不同，同步方式可能是全量复制或部分复制。后文介绍以Redis2.8及以后版本为例。</p><ol><li>全量复制：用于初次复制或其他无法进行部分复制的情况，将主节点中的所有数据都发送给从节点，是一个非常重型的操作。</li><li>部分复制：用于网络中断等情况后的复制，只将中断期间主节点执行的写命令发送给从节点，与全量复制相比更加高效。需要注意的是，如果网络中断时间过长，导致主节点没有能够完整地保存中断期间执行的写命令，则无法进行部分复制，仍使用全量复制。</li></ol><h2 id="1-全量复制"><a href="#1-全量复制" class="headerlink" title="1. 全量复制"></a>1. 全量复制</h2><p>Redis通过psync命令进行全量复制的过程如下：</p><p>（1）从节点判断无法进行部分复制，向主节点发送全量复制的请求；或从节点发送部分复制的请求，但主节点判断无法进行部分复制；具体判断过程需要在讲述了部分复制原理后再介绍。</p><p>（2）主节点收到全量复制的命令后，执行bgsave，在后台生成RDB文件，并使用一个缓冲区（称为复制缓冲区）记录从现在开始执行的所有写命令</p><p>（3）主节点的bgsave执行完成后，将RDB文件发送给从节点；<strong>从节点首先清除自己的旧数据，然后载入接收的<strong><strong>RDB</strong></strong>文件</strong>，将数据库状态更新至主节点执行bgsave时的数据库状态</p><p>（4）主节点将前述复制缓冲区中的所有写命令发送给从节点，从节点执行这些写命令，将数据库状态更新至主节点的最新状态</p><p>（5）如果从节点开启了AOF，则会触发bgrewriteaof的执行，从而保证AOF文件更新至主节点的最新状态</p><p>下面是执行全量复制时，主从节点打印的日志；可以看出日志内容与上述步骤是完全对应的。</p><p>主节点的打印日志如下：</p><p><img src="https://hopestation.top/upload/2020/11/image_1603874544315.png" alt="image.png"></p><p>从节点打印日志如下图所示：</p><p><img src="https://hopestation.top/upload/2020/11/image_1603874564221.png" alt="image.png"></p><p>其中，有几点需要注意：从节点接收了来自主节点的89260个字节的数据；从节点在载入主节点的数据之前要先将老数据清除；从节点在同步完数据后，调用了bgrewriteaof。</p><p>通过全量复制的过程可以看出，全量复制是非常重型的操作：</p><p>（1）主节点通过bgsave命令fork子进程进行RDB持久化，该过程是非常消耗CPU、内存(页表复制)、硬盘IO的；关于bgsave的性能问题，可以参考 <a href="https://www.cnblogs.com/kismetv/p/9137897.html">深入学习Redis（2）：持久化</a></p><p>（2）主节点通过网络将RDB文件发送给从节点，对主从节点的带宽都会带来很大的消耗</p><p>（3）从节点清空老数据、载入新RDB文件的过程是阻塞的，无法响应客户端的命令；如果从节点执行bgrewriteaof，也会带来额外的消耗</p><h2 id="2-部分复制"><a href="#2-部分复制" class="headerlink" title="2. 部分复制"></a>2. 部分复制</h2><p>由于全量复制在主节点数据量较大时效率太低，因此Redis2.8开始提供部分复制，用于处理网络中断时的数据同步。</p><p>部分复制的实现，依赖于三个重要的概念：</p><h3 id="（1）复制偏移量"><a href="#（1）复制偏移量" class="headerlink" title="（1）复制偏移量"></a>（1）复制偏移量</h3><p>主节点和从节点分别维护一个复制偏移量（offset），代表的是<strong>主节点向从节点传递的字节数</strong>；主节点每次向从节点传播N个字节数据时，主节点的offset增加N；从节点每次收到主节点传来的N个字节数据时，从节点的offset增加N。</p><p>offset用于判断主从节点的数据库状态是否一致：如果二者offset相同，则一致；如果offset不同，则不一致，此时可以根据两个offset找出从节点缺少的那部分数据。例如，如果主节点的offset是1000，而从节点的offset是500，那么部分复制就需要将offset为501-1000的数据传递给从节点。而offset为501-1000的数据存储的位置，就是下面要介绍的复制积压缓冲区。</p><h3 id="（2）复制积压缓冲区"><a href="#（2）复制积压缓冲区" class="headerlink" title="（2）复制积压缓冲区"></a>（2）复制积压缓冲区</h3><p>复制积压缓冲区是由主节点维护的、固定长度的、先进先出(FIFO)队列，默认大小1MB；当主节点开始有从节点时创建，其作用是备份主节点最近发送给从节点的数据。注意，无论主节点有一个还是多个从节点，都只需要一个复制积压缓冲区。</p><p>在命令传播阶段，主节点除了将写命令发送给从节点，还会发送一份给复制积压缓冲区，作为写命令的备份；除了存储写命令，复制积压缓冲区中还存储了其中的每个字节对应的复制偏移量（offset）。由于复制积压缓冲区定长且是先进先出，所以它保存的是主节点最近执行的写命令；时间较早的写命令会被挤出缓冲区。</p><p>由于该缓冲区长度固定且有限，因此可以备份的写命令也有限，当主从节点offset的差距过大超过缓冲区长度时，将无法执行部分复制，只能执行全量复制。反过来说，为了提高网络中断时部分复制执行的概率，可以根据需要增大复制积压缓冲区的大小(通过配置repl-backlog-size)；例如如果网络中断的平均时间是60s，而主节点平均每秒产生的写命令(特定协议格式)所占的字节数为100KB，则复制积压缓冲区的平均需求为6MB，保险起见，可以设置为12MB，来保证绝大多数断线情况都可以使用部分复制。</p><p>从节点将offset发送给主节点后，主节点根据offset和缓冲区大小决定能否执行部分复制：</p><ul><li>如果offset偏移量之后的数据，仍然都在复制积压缓冲区里，则执行部分复制；</li><li>如果offset偏移量之后的数据已不在复制积压缓冲区中（数据已被挤出），则执行全量复制。</li></ul><h3 id="（3）服务器运行ID-runid"><a href="#（3）服务器运行ID-runid" class="headerlink" title="（3）服务器运行ID(runid)"></a>（3）服务器运行ID(runid)</h3><p>每个Redis节点(无论主从)，在启动时都会自动生成一个随机ID(每次启动都不一样)，由40个随机的十六进制字符组成；runid用来唯一识别一个Redis节点。通过info Server命令，可以查看节点的runid：</p><p><img src="https://hopestation.top/upload/2020/11/image_1603874604573.png" alt="image.png"></p><p>主从节点初次复制时，主节点将自己的runid发送给从节点，从节点将这个runid保存起来；当断线重连时，从节点会将这个runid发送给主节点；主节点根据runid判断能否进行部分复制：</p><ul><li>如果从节点保存的runid与主节点现在的runid相同，说明主从节点之前同步过，主节点会继续尝试使用部分复制(到底能不能部分复制还要看offset和复制积压缓冲区的情况)；</li><li>如果从节点保存的runid与主节点现在的runid不同，说明从节点在断线前同步的Redis节点并不是当前的主节点，只能进行全量复制。</li></ul><h2 id="3-psync命令的执行"><a href="#3-psync命令的执行" class="headerlink" title="3. psync命令的执行"></a>3. psync命令的执行</h2><p>在了解了复制偏移量、复制积压缓冲区、节点运行id之后，本节将介绍psync命令的参数和返回值，从而说明psync命令执行过程中，主从节点是如何确定使用全量复制还是部分复制的。</p><p>psync命令的执行过程可以参见下图（图片来源：《Redis设计与实现》）：</p><p><img src="https://hopestation.top/upload/2020/11/image_1603874627805.png" alt="image.png"></p><p>（1）首先，从节点根据当前状态，决定如何调用psync命令：</p><ul><li>如果从节点之前未执行过slaveof或最近执行了slaveof no one，则从节点发送命令为psync ? -1，向主节点请求全量复制；</li><li>如果从节点之前执行了slaveof，则发送命令为psync <runid> <offset>，其中runid为上次复制的主节点的runid，offset为上次复制截止时从节点保存的复制偏移量。</li></ul><p>（2）主节点根据收到的psync命令，及当前服务器状态，决定执行全量复制还是部分复制：</p><ul><li>如果主节点版本低于Redis2.8，则返回-ERR回复，此时从节点重新发送sync命令执行全量复制；</li><li>如果主节点版本够新，且runid与从节点发送的runid相同，且从节点发送的offset之后的数据在复制积压缓冲区中都存在，则回复+CONTINUE，表示将进行部分复制，从节点等待主节点发送其缺少的数据即可；</li><li>如果主节点版本够新，但是runid与从节点发送的runid不同，或从节点发送的offset之后的数据已不在复制积压缓冲区中(在队列中被挤出了)，则回复+FULLRESYNC <runid> <offset>，表示要进行全量复制，其中runid表示主节点当前的runid，offset表示主节点当前的offset，从节点保存这两个值，以备使用。</li></ul><h2 id="4-部分复制演示"><a href="#4-部分复制演示" class="headerlink" title="4. 部分复制演示"></a>4. 部分复制演示</h2><p>在下面的演示中，网络中断几分钟后恢复，断开连接的主从节点进行了部分复制；为了便于模拟网络中断，本例中的主从节点在局域网中的两台机器上。</p><p><strong>网络中断</strong></p><p>网络中断一段时间后，主节点和从节点都会发现失去了与对方的连接（关于主从节点对超时的判断机制，后面会有说明）；此后，从节点便开始执行对主节点的重连，由于此时网络还没有恢复，重连失败，从节点会一直尝试重连。</p><p>主节点日志如下：</p><p><img src="https://hopestation.top/upload/2020/11/image_1603875674567.png" alt="image.png"></p><p>从节点日志如下：</p><p><img src="https://hopestation.top/upload/2020/11/image_1603875688388.png" alt="image.png"></p><p><strong>网络恢复</strong></p><p>网络恢复后，从节点连接主节点成功，并请求进行部分复制，主节点接收请求后，二者进行部分复制以同步数据。</p><p>主节点日志如下：</p><p><img src="https://hopestation.top/upload/2020/11/image_1603875804177.png" alt="image.png"></p><p>从节点日志如下：</p><p><img src="https://hopestation.top/upload/2020/11/image_1603875814373.png" alt="image.png"></p><h1 id="五、【命令传播阶段】心跳机制"><a href="#五、【命令传播阶段】心跳机制" class="headerlink" title="五、【命令传播阶段】心跳机制"></a>五、【命令传播阶段】心跳机制</h1><p>在命令传播阶段，除了发送写命令，主从节点还维持着心跳机制：PING和REPLCONF ACK。心跳机制对于主从复制的超时判断、数据安全等有作用。</p><h2 id="1-主-从：PING"><a href="#1-主-从：PING" class="headerlink" title="1.主-&gt;从：PING"></a>1.主-&gt;从：PING</h2><p>每隔指定的时间，<strong>主节点会向从节点发送<strong><strong>PING</strong></strong>命令</strong>，这个PING命令的作用，主要是为了让从节点进行超时判断。</p><p>PING发送的频率由repl-ping-slave-period参数控制，单位是秒，默认值是10s。</p><p>关于该PING命令究竟是由主节点发给从节点，还是相反，有一些争议；因为在Redis的官方文档中，对该参数的注释中说明是从节点向主节点发送PING命令，如下图所示：</p><p><img src="https://hopestation.top/upload/2020/11/image_1603875846101.png" alt="image.png"></p><p>但是根据该参数的名称(含有ping-slave)，以及代码实现，我认为该PING命令是主节点发给从节点的。相关代码如下：</p><p><img src="https://hopestation.top/upload/2020/11/image_1603875872657.png" alt="image.png"></p><h2 id="2-从-主：REPLCONF-ACK"><a href="#2-从-主：REPLCONF-ACK" class="headerlink" title="2. 从-&gt;主：REPLCONF ACK"></a>2. 从-&gt;主：REPLCONF ACK</h2><p>在命令传播阶段，<strong>从节点会向主节点发送<strong><strong>REPLCONF ACK</strong></strong>命令，</strong>频率是每秒1次；命令格式为：REPLCONF ACK {offset}，其中offset指从节点保存的复制偏移量。REPLCONF ACK命令的作用包括：</p><p>（1）实时监测主从节点网络状态：该命令会被主节点用于复制超时的判断。此外，在主节点中使用info Replication，可以看到其从节点的状态中的lag值，代表的是主节点上次收到该REPLCONF ACK命令的时间间隔，在正常情况下，该值应该是0或1，如下图所示：</p><p><img src="https://hopestation.top/upload/2020/11/image_1603875893976.png" alt="image.png"></p><p>（2）检测命令丢失：从节点发送了自身的offset，主节点会与自己的offset对比，如果从节点数据缺失（如网络丢包），主节点会推送缺失的数据（这里也会利用复制积压缓冲区）。<strong>注意，<strong><strong>offset</strong></strong>和复制积压缓冲区，不仅可以用于部分复制，也可以用于处理命令丢失等情形；区别在于前者是在断线重连后进行的，而后者是在主从节点没有断线的情况下进行的。</strong></p><p>（3）辅助保证从节点的数量和延迟：Redis主节点中使用min-slaves-to-write和min-slaves-max-lag参数，来保证主节点在不安全的情况下不会执行写命令；所谓不安全，是指从节点数量太少，或延迟过高。例如min-slaves-to-write和min-slaves-max-lag分别是3和10，含义是如果从节点数量小于3个，或所有从节点的延迟值都大于10s，则主节点拒绝执行写命令。而这里从节点延迟值的获取，就是通过主节点接收到REPLCONF ACK命令的时间来判断的，即前面所说的info Replication中的lag值。</p><h1 id="六、应用中的问题"><a href="#六、应用中的问题" class="headerlink" title="六、应用中的问题"></a>六、应用中的问题</h1><h2 id="1-读写分离及其中的问题"><a href="#1-读写分离及其中的问题" class="headerlink" title="1. 读写分离及其中的问题"></a>1. 读写分离及其中的问题</h2><p>在主从复制基础上实现的读写分离，可以实现Redis的读负载均衡：由主节点提供写服务，由一个或多个从节点提供读服务（多个从节点既可以提高数据冗余程度，也可以最大化读负载能力）；在读负载较大的应用场景下，可以大大提高Redis服务器的并发量。下面介绍在使用Redis读写分离时，需要注意的问题。</p><h3 id="（1）延迟与不一致问题"><a href="#（1）延迟与不一致问题" class="headerlink" title="（1）延迟与不一致问题"></a>（1）延迟与不一致问题</h3><p>前面已经讲到，由于主从复制的命令传播是异步的，延迟与数据的不一致不可避免。如果应用对数据不一致的接受程度程度较低，可能的优化措施包括：优化主从节点之间的网络环境（如在同机房部署）；监控主从节点延迟（通过offset）判断，如果从节点延迟过大，通知应用不再通过该从节点读取数据；使用集群同时扩展写负载和读负载等。</p><p>在命令传播阶段以外的其他情况下，从节点的数据不一致可能更加严重，例如连接在数据同步阶段，或从节点失去与主节点的连接时等。从节点的slave-serve-stale-data参数便与此有关：它控制这种情况下从节点的表现；如果为yes（默认值），则从节点仍能够响应客户端的命令，如果为no，则从节点只能响应info、slaveof等少数命令。该参数的设置与应用对数据一致性的要求有关；如果对数据一致性要求很高，则应设置为no。</p><h3 id="（2）数据过期问题"><a href="#（2）数据过期问题" class="headerlink" title="（2）数据过期问题"></a>（2）数据过期问题</h3><p>在单机版Redis中，存在两种删除策略：</p><ul><li>惰性删除：服务器不会主动删除数据，只有当客户端查询某个数据时，服务器判断该数据是否过期，如果过期则删除。</li><li>定期删除：服务器执行定时任务删除过期数据，但是考虑到内存和CPU的折中（删除会释放内存，但是频繁的删除操作对CPU不友好），该删除的频率和执行时间都受到了限制。</li></ul><p>在主从复制场景下，为了主从节点的数据一致性，从节点不会主动删除数据，而是由主节点控制从节点中过期数据的删除。由于主节点的惰性删除和定期删除策略，都不能保证主节点及时对过期数据执行删除操作，因此，当客户端通过Redis从节点读取数据时，很容易读取到已经过期的数据。</p><p>Redis 3.2中，从节点在读取数据时，增加了对数据是否过期的判断：如果该数据已过期，则不返回给客户端；将Redis升级到3.2可以解决数据过期问题。</p><h3 id="（3）故障切换问题"><a href="#（3）故障切换问题" class="headerlink" title="（3）故障切换问题"></a>（3）故障切换问题</h3><p>在没有使用哨兵的读写分离场景下，应用针对读和写分别连接不同的Redis节点；当主节点或从节点出现问题而发生更改时，需要及时修改应用程序读写Redis数据的连接；连接的切换可以手动进行，或者自己写监控程序进行切换，但前者响应慢、容易出错，后者实现复杂，成本都不算低。</p><h3 id="（4）总结"><a href="#（4）总结" class="headerlink" title="（4）总结"></a>（4）总结</h3><p>在使用读写分离之前，可以考虑其他方法增加Redis的读负载能力：如尽量优化主节点（减少慢查询、减少持久化等其他情况带来的阻塞等）提高负载能力；使用Redis集群同时提高读负载能力和写负载能力等。如果使用读写分离，可以使用哨兵，使主从节点的故障切换尽可能自动化，并减少对应用程序的侵入。</p><h2 id="2-复制超时问题"><a href="#2-复制超时问题" class="headerlink" title="2. 复制超时问题"></a>2. 复制超时问题</h2><p>主从节点复制超时是导致复制中断的最重要的原因之一，本小节单独说明超时问题，下一小节说明其他会导致复制中断的问题。</p><p><strong>超时判断意义</strong></p><p>在复制连接建立过程中及之后，主从节点都有机制判断连接是否超时，其意义在于：</p><p>（1）如果主节点判断连接超时，其会释放相应从节点的连接，从而释放各种资源，否则无效的从节点仍会占用主节点的各种资源（输出缓冲区、带宽、连接等）；此外连接超时的判断可以让主节点更准确的知道当前有效从节点的个数，有助于保证数据安全（配合前面讲到的min-slaves-to-write等参数）。</p><p>（2）如果从节点判断连接超时，则可以及时重新建立连接，避免与主节点数据长期的不一致。</p><p><strong>判断机制</strong></p><p>主从复制超时判断的核心，在于repl-timeout参数，该参数规定了超时时间的阈值（默认60s），对于主节点和从节点同时有效；主从节点触发超时的条件分别如下：</p><p>（1）主节点：每秒1次调用复制定时函数replicationCron()，在其中判断当前时间距离上次收到各个从节点REPLCONF ACK的时间，是否超过了repl-timeout值，如果超过了则释放相应从节点的连接。</p><p>（2）从节点：从节点对超时的判断同样是在复制定时函数中判断，基本逻辑是：</p><ul><li>如果当前处于连接建立阶段，且距离上次收到主节点的信息的时间已超过repl-timeout，则释放与主节点的连接；</li><li>如果当前处于数据同步阶段，且收到主节点的RDB文件的时间超时，则停止数据同步，释放连接；</li><li>如果当前处于命令传播阶段，且距离上次收到主节点的PING命令或数据的时间已超过repl-timeout值，则释放与主节点的连接。</li></ul><p>主从节点判断连接超时的相关源代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">/* Replication cron <span class="keyword">function</span>, called 1 time per second. */</span><br><span class="line">void replicationCron(void) &#123;</span><br><span class="line">    static long long replication_cron_loops = 0;</span><br><span class="line"> </span><br><span class="line">    /* Non blocking connection <span class="built_in">timeout</span>? */</span><br><span class="line">    <span class="keyword">if</span> (server.masterhost &amp;&amp;</span><br><span class="line">        (server.repl_state == REDIS_REPL_CONNECTING ||</span><br><span class="line">         slaveIsInHandshakeState()) &amp;&amp;</span><br><span class="line">         (time(NULL)-server.repl_transfer_lastio) &gt; server.repl_timeout)</span><br><span class="line">    &#123;</span><br><span class="line">        redisLog(REDIS_WARNING,<span class="string">&quot;Timeout connecting to the MASTER...&quot;</span>);</span><br><span class="line">        undoConnectWithMaster();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /* Bulk transfer I/O <span class="built_in">timeout</span>? */</span><br><span class="line">    <span class="keyword">if</span> (server.masterhost &amp;&amp; server.repl_state == REDIS_REPL_TRANSFER &amp;&amp;</span><br><span class="line">        (time(NULL)-server.repl_transfer_lastio) &gt; server.repl_timeout)</span><br><span class="line">    &#123;</span><br><span class="line">        redisLog(REDIS_WARNING,<span class="string">&quot;Timeout receiving bulk data from MASTER... If the problem persists try to set the &#x27;repl-timeout&#x27; parameter in redis.conf to a larger value.&quot;</span>);</span><br><span class="line">        replicationAbortSyncTransfer();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /* Timed out master when we are an already connected slave? */</span><br><span class="line">    <span class="keyword">if</span> (server.masterhost &amp;&amp; server.repl_state == REDIS_REPL_CONNECTED &amp;&amp;</span><br><span class="line">        (time(NULL)-server.master-&gt;lastinteraction) &gt; server.repl_timeout)</span><br><span class="line">    &#123;</span><br><span class="line">        redisLog(REDIS_WARNING,<span class="string">&quot;MASTER timeout: no data nor PING received...&quot;</span>);</span><br><span class="line">        freeClient(server.master);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    //此处省略无关代码……</span><br><span class="line"> </span><br><span class="line">    /* Disconnect timedout slaves. */</span><br><span class="line">    <span class="keyword">if</span> (listLength(server.slaves)) &#123;</span><br><span class="line">        listIter li;</span><br><span class="line">        listNode *<span class="built_in">ln</span>;</span><br><span class="line">        listRewind(server.slaves,&amp;li);</span><br><span class="line">        <span class="keyword">while</span>((ln = listNext(&amp;li))) &#123;</span><br><span class="line">            redisClient *slave = <span class="built_in">ln</span>-&gt;value;</span><br><span class="line">            <span class="keyword">if</span> (slave-&gt;replstate != REDIS_REPL_ONLINE) <span class="built_in">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (slave-&gt;flags &amp; REDIS_PRE_PSYNC) <span class="built_in">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> ((server.unixtime - slave-&gt;repl_ack_time) &gt; server.repl_timeout)</span><br><span class="line">            &#123;</span><br><span class="line">                redisLog(REDIS_WARNING, &quot;Disconnecting timedout slave: %s&quot;,</span><br><span class="line">                    replicationGetSlaveName(slave));</span><br><span class="line">                freeClient(slave);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    //此处省略无关代码……</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　</p><p><strong>需要注意的坑</strong></p><p>下面介绍与复制阶段连接超时有关的一些实际问题：</p><p>（1）数据同步阶段：在主从节点进行全量复制bgsave时，主节点需要首先fork子进程将当前数据保存到RDB文件中，然后再将RDB文件通过网络传输到从节点。如果RDB文件过大，主节点在fork子进程+保存RDB文件时耗时过多，可能会导致从节点长时间收不到数据而触发超时；此时从节点会重连主节点，然后再次全量复制，再次超时，再次重连……这是个悲伤的循环。为了避免这种情况的发生，除了注意Redis单机数据量不要过大，另一方面就是适当增大repl-timeout值，具体的大小可以根据bgsave耗时来调整。</p><p>（2）命令传播阶段：如前所述，在该阶段主节点会向从节点发送PING命令，频率由repl-ping-slave-period控制；该参数应明显小于repl-timeout值(后者至少是前者的几倍)。否则，如果两个参数相等或接近，网络抖动导致个别PING命令丢失，此时恰巧主节点也没有向从节点发送数据，则从节点很容易判断超时。</p><p>（3）慢查询导致的阻塞：如果主节点或从节点执行了一些慢查询（如keys *或者对大数据的hgetall等），导致服务器阻塞；阻塞期间无法响应复制连接中对方节点的请求，可能导致复制超时。</p><h2 id="3-复制中断问题"><a href="#3-复制中断问题" class="headerlink" title="3. 复制中断问题"></a>3. 复制中断问题</h2><p>主从节点超时是复制中断的原因之一，除此之外，还有其他情况可能导致复制中断，其中最主要的是复制缓冲区溢出问题。</p><h3 id="复制缓冲区溢出"><a href="#复制缓冲区溢出" class="headerlink" title="复制缓冲区溢出"></a>复制缓冲区溢出</h3><p>前面曾提到过，在全量复制阶段，主节点会将执行的写命令放到复制缓冲区中，该缓冲区存放的数据包括了以下几个时间段内主节点执行的写命令：bgsave生成RDB文件、RDB文件由主节点发往从节点、从节点清空老数据并载入RDB文件中的数据。当主节点数据量较大，或者主从节点之间网络延迟较大时，可能导致该缓冲区的大小超过了限制，此时主节点会断开与从节点之间的连接；这种情况可能引起全量复制-&gt;复制缓冲区溢出导致连接中断-&gt;重连-&gt;全量复制-&gt;复制缓冲区溢出导致连接中断……的循环。</p><p>复制缓冲区的大小由client-output-buffer-limit slave {hard limit} {soft limit} {soft seconds}配置，默认值为client-output-buffer-limit slave 256MB 64MB 60，其含义是：如果buffer大于256MB，或者连续60s大于64MB，则主节点会断开与该从节点的连接。该参数是可以通过config set命令动态配置的（即不重启Redis也可以生效）。</p><p>当复制缓冲区溢出时，主节点打印日志如下所示：</p><p><img src="https://hopestation.top/upload/2020/11/image_1603875916013.png" alt="image.png"></p><p><strong>需要注意的是，复制缓冲区是客户端输出缓冲区的一种，主节点会为每一个从节点分别分配复制缓冲区；而复制积压缓冲区则是一个主节点只有一个，无论它有多少个从节点。</strong></p><h2 id="4-各场景下复制的选择及优化技巧"><a href="#4-各场景下复制的选择及优化技巧" class="headerlink" title="4. 各场景下复制的选择及优化技巧"></a>4. 各场景下复制的选择及优化技巧</h2><p>在介绍了Redis复制的种种细节之后，现在我们可以来总结一下，在下面常见的场景中，何时使用部分复制，以及需要注意哪些问题。</p><h3 id="（1）第一次建立复制"><a href="#（1）第一次建立复制" class="headerlink" title="（1）第一次建立复制"></a>（1）第一次建立复制</h3><p>此时全量复制不可避免，但仍有几点需要注意：如果主节点的数据量较大，应该尽量避开流量的高峰期，避免造成阻塞；如果有多个从节点需要建立对主节点的复制，可以考虑将几个从节点错开，避免主节点带宽占用过大。此外，如果从节点过多，也可以调整主从复制的拓扑结构，由一主多从结构变为树状结构（中间的节点既是其主节点的从节点，也是其从节点的主节点）；但使用树状结构应该谨慎：虽然主节点的直接从节点减少，降低了主节点的负担，但是多层从节点的延迟增大，数据一致性变差；且结构复杂，维护相当困难。</p><h3 id="（2）主节点重启"><a href="#（2）主节点重启" class="headerlink" title="（2）主节点重启"></a>（2）主节点重启</h3><p>主节点重启可以分为两种情况来讨论，一种是故障导致宕机，另一种则是有计划的重启。</p><p><strong>主节点宕机</strong></p><p>主节点宕机重启后，runid会发生变化，因此不能进行部分复制，只能全量复制。</p><p>实际上在主节点宕机的情况下，应进行故障转移处理，将其中的一个从节点升级为主节点，其他从节点从新的主节点进行复制；且故障转移应尽量的自动化，后面文章将要介绍的哨兵便可以进行自动的故障转移。</p><p><strong>安全重启：debug reload</strong></p><p>在一些场景下，可能希望对主节点进行重启，例如主节点内存碎片率过高，或者希望调整一些只能在启动时调整的参数。如果使用普通的手段重启主节点，会使得runid发生变化，可能导致不必要的全量复制。</p><p>为了解决这个问题，Redis提供了debug reload的重启方式：<strong>重启后，主节点的<strong><strong>runid</strong></strong>和offset****都不受影响，</strong>避免了全量复制。</p><p>如下图所示，debug reload重启后runid和offset都未受影响：</p><p><img src="https://hopestation.top/upload/2020/11/image_1603875933358.png" alt="image.png"></p><p>但debug reload是一柄双刃剑：它会清空当前内存中的数据，重新从RDB文件中加载，这个过程会导致主节点的阻塞，因此也需要谨慎。</p><h3 id="（3）从节点重启"><a href="#（3）从节点重启" class="headerlink" title="（3）从节点重启"></a>（3）从节点重启</h3><p>从节点宕机重启后，其保存的主节点的runid会丢失，因此即使再次执行slaveof，也无法进行部分复制。</p><h3 id="（4）网络中断"><a href="#（4）网络中断" class="headerlink" title="（4）网络中断"></a>（4）网络中断</h3><p>如果主从节点之间出现网络问题，造成短时间内网络中断，可以分为多种情况讨论。</p><p>第一种情况：网络问题时间极为短暂，只造成了短暂的丢包，主从节点都没有判定超时（未触发repl-timeout）；此时只需要通过REPLCONF ACK来补充丢失的数据即可。</p><p>第二种情况：网络问题时间很长，主从节点判断超时（触发了repl-timeout），且丢失的数据过多，超过了复制积压缓冲区所能存储的范围；此时主从节点无法进行部分复制，只能进行全量复制。为了尽可能避免这种情况的发生，应该根据实际情况适当调整复制积压缓冲区的大小；此外及时发现并修复网络中断，也可以减少全量复制。</p><p>第三种情况：介于前述两种情况之间，主从节点判断超时，且丢失的数据仍然都在复制积压缓冲区中；此时主从节点可以进行部分复制。</p><h2 id="5-复制相关的配置"><a href="#5-复制相关的配置" class="headerlink" title="5. 复制相关的配置"></a>5. 复制相关的配置</h2><p>这一节总结一下与复制有关的配置，说明这些配置的作用、起作用的阶段，以及配置方法等；通过了解这些配置，一方面加深对Redis复制的了解，另一方面掌握这些配置的方法，可以优化Redis的使用，少走坑。</p><p>配置大致可以分为主节点相关配置、从节点相关配置以及与主从节点都有关的配置，下面分别说明。</p><h3 id="（1）与主从节点都有关的配置"><a href="#（1）与主从节点都有关的配置" class="headerlink" title="（1）与主从节点都有关的配置"></a>（1）与主从节点都有关的配置</h3><p>首先介绍最特殊的配置，它决定了该节点是主节点还是从节点：</p><ol><li><p>slaveof <masterip> <masterport>：Redis启动时起作用；作用是建立复制关系，开启了该配置的Redis服务器在启动后成为从节点。该注释默认注释掉，即Redis服务器默认都是主节点。</p></li><li><p>repl-timeout 60：与各个阶段主从节点连接超时判断有关，见前面的介绍。</p></li></ol><h3 id="（2）主节点相关配置"><a href="#（2）主节点相关配置" class="headerlink" title="（2）主节点相关配置"></a>（2）主节点相关配置</h3><ol><li><p>repl-diskless-sync no：作用于全量复制阶段，控制主节点是否使用diskless复制（无盘复制）。所谓diskless复制，是指在全量复制时，主节点不再先把数据写入RDB文件，而是直接写入slave的socket中，整个过程中不涉及硬盘；diskless复制在磁盘IO很慢而网速很快时更有优势。需要注意的是，截至Redis3.0，diskless复制处于实验阶段，默认是关闭的。</p></li><li><p>repl-diskless-sync-delay 5：该配置作用于全量复制阶段，当主节点使用diskless复制时，该配置决定主节点向从节点发送之前停顿的时间，单位是秒；只有当diskless复制打开时有效，默认5s。之所以设置停顿时间，是基于以下两个考虑：(1)向slave的socket的传输一旦开始，新连接的slave只能等待当前数据传输结束，才能开始新的数据传输 (2)多个从节点有较大的概率在短时间内建立主从复制。</p></li><li><p>client-output-buffer-limit slave 256MB 64MB 60：与全量复制阶段主节点的缓冲区大小有关，见前面的介绍。</p></li><li><p>repl-disable-tcp-nodelay no：与命令传播阶段的延迟有关，见前面的介绍。</p></li><li><p>masterauth <master-password>：与连接建立阶段的身份验证有关，见前面的介绍。</p></li><li><p>repl-ping-slave-period 10：与命令传播阶段主从节点的超时判断有关，见前面的介绍。</p></li><li><p>repl-backlog-size 1mb：复制积压缓冲区的大小，见前面的介绍。</p></li><li><p>repl-backlog-ttl 3600：当主节点没有从节点时，复制积压缓冲区保留的时间，这样当断开的从节点重新连进来时，可以进行部分复制；默认3600s。如果设置为0，则永远不会释放复制积压缓冲区。</p></li><li><p>min-slaves-to-write 3与min-slaves-max-lag 10：规定了主节点的最小从节点数目，及对应的最大延迟，见前面的介绍。</p></li></ol><h3 id="（3）从节点相关配置"><a href="#（3）从节点相关配置" class="headerlink" title="（3）从节点相关配置"></a>（3）从节点相关配置</h3><ol><li><p>slave-serve-stale-data yes：与从节点数据陈旧时是否响应客户端命令有关，见前面的介绍。</p></li><li><p>slave-read-only yes：从节点是否只读；默认是只读的。由于从节点开启写操作容易导致主从节点的数据不一致，因此该配置尽量不要修改。</p></li></ol><h2 id="6-单机内存大小限制"><a href="#6-单机内存大小限制" class="headerlink" title="6. 单机内存大小限制"></a>6. 单机内存大小限制</h2><p>在 <a href="https://www.cnblogs.com/kismetv/p/9137897.html">深入学习Redis（2）：持久化</a> 一文中，讲到了fork操作对Redis单机内存大小的限制。实际上在Redis的使用中，限制单机内存大小的因素非常之多，下面总结一下在主从复制中，单机内存过大可能造成的影响：</p><p>（1）切主：当主节点宕机时，一种常见的容灾策略是将其中一个从节点提升为主节点，并将其他从节点挂载到新的主节点上，此时这些从节点只能进行全量复制；如果Redis单机内存达到10GB，一个从节点的同步时间在几分钟的级别；如果从节点较多，恢复的速度会更慢。如果系统的读负载很高，而这段时间从节点无法提供服务，会对系统造成很大的压力。</p><p>（2）从库扩容：如果访问量突然增大，此时希望增加从节点分担读负载，如果数据量过大，从节点同步太慢，难以及时应对访问量的暴增。</p><p>（3）缓冲区溢出：（1）和（2）都是从节点可以正常同步的情形（虽然慢），但是如果数据量过大，导致全量复制阶段主节点的复制缓冲区溢出，从而导致复制中断，则主从节点的数据同步会全量复制-&gt;复制缓冲区溢出导致复制中断-&gt;重连-&gt;全量复制-&gt;复制缓冲区溢出导致复制中断……的循环。</p><p>（4）超时：如果数据量过大，全量复制阶段主节点fork+保存RDB文件耗时过大，从节点长时间接收不到数据触发超时，主从节点的数据同步同样可能陷入全量复制-&gt;超时导致复制中断-&gt;重连-&gt;全量复制-&gt;超时导致复制中断……的循环。</p><p>此外，主节点单机内存除了绝对量不能太大，其占用主机内存的比例也不应过大：最好只使用50%-65%的内存，留下30%-45%的内存用于执行bgsave命令和创建复制缓冲区等。</p><h2 id="7-info-Replication"><a href="#7-info-Replication" class="headerlink" title="7. info Replication"></a>7. info Replication</h2><p>在Redis客户端通过info Replication可以查看与复制相关的状态，对于了解主从节点的当前状态，以及解决出现的问题都会有帮助。</p><p>主节点：</p><p><img src="https://hopestation.top/upload/2020/11/image_1603875951838.png" alt="image.png"></p><p>从节点：</p><p><img src="https://hopestation.top/upload/2020/11/image_1603875965366.png" alt="image.png"></p><p>对于从节点，上半部分展示的是其作为从节点的状态，从connectd_slaves开始，展示的是其作为潜在的主节点的状态。</p><p>info Replication中展示的大部分内容在文章中都已经讲述，这里不再详述。</p><h1 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h1><p>下面回顾一下本文的主要内容：</p><p>1、主从复制的作用：宏观的了解主从复制是为了解决什么样的问题，即数据冗余、故障恢复、读负载均衡等。</p><p>2、主从复制的操作：即slaveof命令。</p><p>3、主从复制的原理：主从复制包括了连接建立阶段、数据同步阶段、命令传播阶段；其中数据同步阶段，有全量复制和部分复制两种数据同步方式；命令传播阶段，主从节点之间有PING和REPLCONF ACK命令互相进行心跳检测。</p><p>4、应用中的问题：包括读写分离的问题（数据不一致问题、数据过期问题、故障切换问题等）、复制超时问题、复制中断问题等，然后总结了主从复制相关的配置，其中repl-timeout、client-output-buffer-limit slave等对解决Redis主从复制中出现的问题可能会有帮助。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>根据URL保存图片到本地</title>
      <link href="/2020/10/28/%E6%A0%B9%E6%8D%AEURL%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87%E5%88%B0%E6%9C%AC%E5%9C%B0-%E6%A0%B9%E6%8D%AEurl%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87%E5%88%B0%E6%9C%AC%E5%9C%B0/"/>
      <url>/2020/10/28/%E6%A0%B9%E6%8D%AEURL%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87%E5%88%B0%E6%9C%AC%E5%9C%B0-%E6%A0%B9%E6%8D%AEurl%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87%E5%88%B0%E6%9C%AC%E5%9C%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>创建URLConnection，根据URL，获取文件流</li><li>写入本地</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从url中下载图片保存到本地</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> urlPath url路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> savePath 保存路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> filename 文件名（传null时可以自动生成文件名）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 文件路径 （保存路径 + 文件名）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">downloadImgByURL</span><span class="params">(String urlPath,String savePath,String filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">// 构造URL</span></span><br><span class="line"><span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(urlPath);</span><br><span class="line"><span class="comment">// 打开连接</span></span><br><span class="line"><span class="type">URLConnection</span> <span class="variable">con</span> <span class="operator">=</span> url.openConnection();</span><br><span class="line"><span class="comment">//设置请求超时为3s</span></span><br><span class="line">con.setConnectTimeout(<span class="number">3</span>*<span class="number">1000</span>);</span><br><span class="line"><span class="comment">// 输入流</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> con.getInputStream();</span><br><span class="line"><span class="comment">// 1K的数据缓冲</span></span><br><span class="line"><span class="type">byte</span>[] bs = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="comment">// 读取到的数据长度</span></span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="comment">// 输出的文件流</span></span><br><span class="line">File sf=<span class="keyword">new</span> <span class="title class_">File</span>(savePath);</span><br><span class="line"><span class="keyword">if</span>(!sf.exists())&#123;</span><br><span class="line">sf.mkdirs();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> randomNo=(<span class="type">int</span>)(Math.random()*<span class="number">1000000</span>);</span><br><span class="line"><span class="comment">//若没有传进来文件名字，则按照 时间+随机数 生成文件名字</span></span><br><span class="line"><span class="keyword">if</span>(filename == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(filename))&#123;</span><br><span class="line"><span class="comment">//filename = urlPath.substring(urlPath.lastIndexOf(&quot;/&quot;)+1,urlPath.length());//获取服务器上图片的名称</span></span><br><span class="line">filename = <span class="keyword">new</span> <span class="title class_">java</span>.text.SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd-HH-mm-ss&quot;</span>).format(<span class="keyword">new</span> <span class="title class_">Date</span>())+randomNo+<span class="string">&quot;.jpg&quot;</span>;<span class="comment">//时间+随机数防止重复</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">fullname</span> <span class="operator">=</span> sf.getPath()+<span class="string">&quot;\\&quot;</span>+ filename ;</span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(fullname);</span><br><span class="line">String virtualPath= sf.getPath() + <span class="string">&quot;\\&quot;</span> +filename;<span class="comment">//存入数据库的虚拟路径</span></span><br><span class="line"><span class="comment">// 开始读取</span></span><br><span class="line"><span class="keyword">while</span> ((len = is.read(bs)) != -<span class="number">1</span>) &#123;</span><br><span class="line">os.write(bs, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 完毕，关闭所有链接</span></span><br><span class="line">os.close();</span><br><span class="line">is.close();</span><br><span class="line"><span class="comment">//System.out.println(virtualPath);</span></span><br><span class="line"><span class="keyword">return</span> fullname;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件 </tag>
            
            <tag> 下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis（八）持久化 （转）</title>
      <link href="/2020/10/28/Redis%EF%BC%88%E5%85%AB%EF%BC%89%E6%8C%81%E4%B9%85%E5%8C%96%20%EF%BC%88%E8%BD%AC%EF%BC%89-redis%E5%85%AB%E6%8C%81%E4%B9%85%E5%8C%96%E8%BD%AC/"/>
      <url>/2020/10/28/Redis%EF%BC%88%E5%85%AB%EF%BC%89%E6%8C%81%E4%B9%85%E5%8C%96%20%EF%BC%88%E8%BD%AC%EF%BC%89-redis%E5%85%AB%E6%8C%81%E4%B9%85%E5%8C%96%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<p>本文转载自：<br>作者：ITDragon龙<br>出处：<a href="http://www.cnblogs.com/itdragon/">http://www.cnblogs.com/itdragon/</a></p><hr><p><strong>目录</strong><br>[TOC]</p><blockquote><p>Redis 有两种持久化方案，RDB （Redis DataBase）和 AOF （Append Only File）。如果你想快速了解和使用RDB和AOF，可以直接跳到文章底部看总结。本章节通过配置文件，触发快照的方式，恢复数据的操作，命令操作演示，优缺点来学习 Redis 的重点知识<strong>持久化</strong>。</p></blockquote><h2 id="RDB-详解"><a href="#RDB-详解" class="headerlink" title="RDB 详解"></a>RDB 详解</h2><p>RDB 是 Redis 默认的持久化方案。在指定的时间间隔内，执行指定次数的写操作，则会将内存中的数据写入到磁盘中。即在指定目录下生成一个dump.rdb文件。Redis 重启会通过加载dump.rdb文件恢复数据。</p><h3 id="从配置文件了解RDB"><a href="#从配置文件了解RDB" class="headerlink" title="从配置文件了解RDB"></a>从配置文件了解RDB</h3><p>打开 redis.conf 文件，找到 SNAPSHOTTING 对应内容<br>1 RDB核心规则配置（重点）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">save &lt;seconds&gt; &lt;changes&gt;</span><br><span class="line"># save &quot;&quot;</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure><p>解说：save &lt;指定时间间隔&gt; &lt;执行指定次数更新操作&gt;，满足条件就将内存中的数据同步到硬盘中。官方出厂配置默认是 900秒内有1个更改，300秒内有10个更改以及60秒内有10000个更改，则将内存中的数据快照写入磁盘。<br>若不想用RDB方案，可以把 save “” 的注释打开，下面三个注释。</p><p>2 指定本地数据库文件名，一般采用默认的 dump.rdb</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dbfilename dump.rdb</span><br></pre></td></tr></table></figure><p>3 指定本地数据库存放目录，一般也用默认配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir ./</span><br></pre></td></tr></table></figure><p>4 默认开启数据压缩</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdbcompression yes</span><br></pre></td></tr></table></figure><p>解说：配置存储至本地数据库时是否压缩数据，默认为yes。Redis采用LZF压缩方式，但占用了一点CPU的时间。若关闭该选项，但会导致数据库文件变的巨大。建议开启。</p><h3 id="触发RDB快照"><a href="#触发RDB快照" class="headerlink" title="触发RDB快照"></a>触发RDB快照</h3><p>1 在指定的时间间隔内，执行指定次数的写操作<br>2 执行save（阻塞， 只管保存快照，其他的等待） 或者是bgsave （异步）命令<br>3 执行flushall 命令，清空数据库所有数据，意义不大。<br>4 执行shutdown 命令，保证服务器正常关闭且不丢失任何数据，意义…也不大。</p><h3 id="通过RDB文件恢复数据"><a href="#通过RDB文件恢复数据" class="headerlink" title="通过RDB文件恢复数据"></a>通过RDB文件恢复数据</h3><p>将dump.rdb 文件拷贝到redis的安装目录的bin目录下，重启redis服务即可。在实际开发中，一般会考虑到物理机硬盘损坏情况，选择备份dump.rdb 。可以从下面的操作演示中可以体会到。</p><h3 id="RDB-的优缺点"><a href="#RDB-的优缺点" class="headerlink" title="RDB 的优缺点"></a>RDB 的优缺点</h3><p>优点：<br>1 适合大规模的数据恢复。<br>2 如果业务对数据完整性和一致性要求不高，RDB是很好的选择。</p><p>缺点：<br>1 数据的完整性和一致性不高，因为RDB可能在最后一次备份时宕机了。<br>2 备份时占用内存，因为Redis 在备份时会独立创建一个子进程，将数据写入到一个临时文件（此时内存中的数据是原来的两倍哦），最后再将临时文件替换之前的备份文件。<br>所以Redis 的持久化和数据的恢复要选择在夜深人静的时候执行是比较合理的。</p><h3 id="操作演示"><a href="#操作演示" class="headerlink" title="操作演示"></a>操作演示</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[root@itdragon bin]# vim redis.conf</span><br><span class="line">save 900 1</span><br><span class="line">save 120 5</span><br><span class="line">save 60 10000</span><br><span class="line">[root@itdragon bin]# ./redis-server redis.conf</span><br><span class="line">[root@itdragon bin]# ./redis-cli -h 127.0.0.1 -p 6379</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty list or set)</span><br><span class="line">127.0.0.1:6379&gt; set key1 value1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set key2 value2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set key3 value3</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set key4 value4</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set key5 value5</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set key6 value6</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; SHUTDOWN</span><br><span class="line">not connected&gt; QUIT</span><br><span class="line">[root@itdragon bin]# cp dump.rdb dump_bk.rdb</span><br><span class="line">[root@itdragon bin]# ./redis-server redis.conf</span><br><span class="line">[root@itdragon bin]# ./redis-cli -h 127.0.0.1 -p 6379</span><br><span class="line">127.0.0.1:6379&gt; FLUSHALL </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty list or set)</span><br><span class="line">127.0.0.1:6379&gt; SHUTDOWN</span><br><span class="line">not connected&gt; QUIT</span><br><span class="line">[root@itdragon bin]# cp dump_bk.rdb  dump.rdb</span><br><span class="line">cp: overwrite `dump.rdb&#x27;? y</span><br><span class="line">[root@itdragon bin]# ./redis-server redis.conf</span><br><span class="line">[root@itdragon bin]# ./redis-cli -h 127.0.0.1 -p 6379</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;key5&quot;</span><br><span class="line">2) &quot;key1&quot;</span><br><span class="line">3) &quot;key3&quot;</span><br><span class="line">4) &quot;key4&quot;</span><br><span class="line">5) &quot;key6&quot;</span><br><span class="line">6) &quot;key2&quot;</span><br></pre></td></tr></table></figure><p>第一步：vim 修改持久化配置时间，120秒内修改5次则持久化一次。<br>第二步：重启服务使配置生效。<br>第三步：分别set 5个key，过两分钟后，在bin的当前目录下会自动生产一个dump.rdb文件。（set key6 是为了验证shutdown有触发RDB快照的作用）<br>第四步：将当前的dump.rdb 备份一份（模拟线上工作）。<br>第五步：执行FLUSHALL命令清空数据库数据（模拟数据丢失）。<br>第六步：重启Redis服务，恢复数据…..咦？？？？( ′◔ ‸◔&#96;)。数据是空的？？？？这是因为FLUSHALL也有触发RDB快照的功能。<br>第七步：将备份的 dump_bk.rdb 替换 dump.rdb 然后重新Redis。</p><p>注意点：SHUTDOWN 和 FLUSHALL 命令都会触发RDB快照，这是一个坑，请大家注意。</p><p>其他命令：</p><ul><li>keys * 匹配数据库中所有 key</li><li>save 阻塞触发RDB快照，使其备份数据</li><li>FLUSHALL 清空整个 Redis 服务器的数据(几乎不用)</li><li>SHUTDOWN 关机走人（很少用）</li></ul><hr><h2 id="AOF-详解"><a href="#AOF-详解" class="headerlink" title="AOF 详解"></a>AOF 详解</h2><p>AOF ：Redis 默认不开启。它的出现是为了弥补RDB的不足（数据的不一致性），所以它采用日志的形式来记录每个<strong>写操作</strong>，并<strong>追加</strong>到文件中。Redis 重启的会根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</p><h3 id="从配置文件了解AOF"><a href="#从配置文件了解AOF" class="headerlink" title="从配置文件了解AOF"></a>从配置文件了解AOF</h3><p>打开 redis.conf 文件，找到 APPEND ONLY MODE 对应内容<br>1 redis 默认关闭，开启需要手动把no改为yes</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appendonly yes</span><br></pre></td></tr></table></figure><p>2 指定本地数据库文件名，默认值为 appendonly.aof</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br></pre></td></tr></table></figure><p>3 指定更新日志条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># appendfsync always</span><br><span class="line">appendfsync everysec</span><br><span class="line"># appendfsync no</span><br></pre></td></tr></table></figure><p>解说：<br>always：同步持久化，每次发生数据变化会立刻写入到磁盘中。性能较差当数据完整性比较好（慢，安全）<br>everysec：出厂默认推荐，每秒异步记录一次（默认值）<br>no：不同步</p><p>4 配置重写触发机制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure><p>解说：当AOF文件大小是上次rewrite后大小的一倍且文件大于64M时触发。一般都设置为3G，64M太小了。</p><h3 id="触发AOF快照"><a href="#触发AOF快照" class="headerlink" title="触发AOF快照"></a>触发AOF快照</h3><p>根据配置文件触发，可以是每次执行触发，可以是每秒触发，可以不同步。</p><h3 id="根据AOF文件恢复数据"><a href="#根据AOF文件恢复数据" class="headerlink" title="根据AOF文件恢复数据"></a>根据AOF文件恢复数据</h3><p>正常情况下，将appendonly.aof 文件拷贝到redis的安装目录的bin目录下，重启redis服务即可。但在实际开发中，可能因为某些原因导致appendonly.aof 文件格式异常，从而导致数据还原失败，可以通过命令redis-check-aof –fix appendonly.aof 进行修复 。从下面的操作演示中体会。</p><h3 id="AOF的重写机制"><a href="#AOF的重写机制" class="headerlink" title="AOF的重写机制"></a>AOF的重写机制</h3><p>前面也说到了，AOF的工作原理是将写操作追加到文件中，文件的冗余内容会越来越多。所以聪明的 Redis 新增了重写机制。当AOF文件的大小超过所设定的阈值时，Redis就会对AOF文件的内容压缩。</p><p>重写的原理：Redis 会fork出一条新进程，读取内存中的数据，并重新写到一个临时文件中。并没有读取旧文件（你都那么大了，我还去读你？？？ o(ﾟДﾟ)っ傻啊！）。最后替换旧的aof文件。</p><p>触发机制：当AOF文件大小是上次rewrite后大小的一倍且文件大于64M时触发。这里的“一倍”和“64M” 可以通过配置文件修改。</p><h3 id="AOF-的优缺点"><a href="#AOF-的优缺点" class="headerlink" title="AOF 的优缺点"></a>AOF 的优缺点</h3><p>优点：数据的完整性和一致性更高<br>缺点：因为AOF记录的内容多，文件会越来越大，数据恢复也会越来越慢。</p><h3 id="操作演示-1"><a href="#操作演示-1" class="headerlink" title="操作演示"></a>操作演示</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[root@itdragon bin]# vim appendonly.aof</span><br><span class="line">appendonly yes</span><br><span class="line">[root@itdragon bin]# ./redis-server redis.conf</span><br><span class="line">[root@itdragon bin]# ./redis-cli -h 127.0.0.1 -p 6379</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty list or set)</span><br><span class="line">127.0.0.1:6379&gt; set keyAOf valueAof</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; FLUSHALL </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; SHUTDOWN</span><br><span class="line">not connected&gt; QUIT</span><br><span class="line">[root@itdragon bin]# ./redis-server redis.conf</span><br><span class="line">[root@itdragon bin]# ./redis-cli -h 127.0.0.1 -p 6379</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;keyAOf&quot;</span><br><span class="line">127.0.0.1:6379&gt; SHUTDOWN</span><br><span class="line">not connected&gt; QUIT</span><br><span class="line">[root@itdragon bin]# vim appendonly.aof</span><br><span class="line">fjewofjwojfoewifjowejfwf</span><br><span class="line">[root@itdragon bin]# ./redis-server redis.conf</span><br><span class="line">[root@itdragon bin]# ./redis-cli -h 127.0.0.1 -p 6379</span><br><span class="line">Could not connect to Redis at 127.0.0.1:6379: Connection refused</span><br><span class="line">not connected&gt; QUIT</span><br><span class="line">[root@itdragon bin]# redis-check-aof --fix appendonly.aof </span><br><span class="line">&#x27;x              3e: Expected prefix &#x27;*&#x27;, got: &#x27;</span><br><span class="line">AOF analyzed: size=92, ok_up_to=62, diff=30</span><br><span class="line">This will shrink the AOF from 92 bytes, with 30 bytes, to 62 bytes</span><br><span class="line">Continue? [y/N]: y</span><br><span class="line">Successfully truncated AOF</span><br><span class="line">[root@itdragon bin]# ./redis-server redis.conf</span><br><span class="line">[root@itdragon bin]# ./redis-cli -h 127.0.0.1 -p 6379</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;keyAOf&quot;</span><br></pre></td></tr></table></figure><p>第一步：修改配置文件，开启AOF持久化配置。<br>第二步：重启Redis服务，并进入Redis 自带的客户端中。<br>第三步：保存值，然后模拟数据丢失，关闭Redis服务。<br>第四步：重启服务，发现数据恢复了。（额外提一点：有教程显示FLUSHALL 命令会被写入AOF文件中，导致数据恢复失败。我安装的是redis-4.0.2没有遇到这个问题）。<br>第五步：修改appendonly.aof，模拟文件异常情况。<br>第六步：重启 Redis 服务失败。这同时也说明了，RDB和AOF可以同时存在，且优先加载AOF文件。<br>第七步：校验appendonly.aof 文件。重启Redis 服务后正常。</p><p>补充点：aof 的校验是通过 redis-check-aof 文件，那么rdb 的校验是不是可以通过 redis-check-rdb 文件呢？？？</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>Redis 默认开启RDB持久化方式，在指定的时间间隔内，执行指定次数的写操作，则将内存中的数据写入到磁盘中。</li><li>RDB 持久化适合大规模的数据恢复但它的数据一致性和完整性较差。</li><li>Redis 需要手动开启AOF持久化方式，默认是每秒将写操作日志追加到AOF文件中。</li><li>AOF 的数据完整性比RDB高，但记录内容多了，会影响数据恢复的效率。</li><li>Redis 针对 AOF文件大的问题，提供重写的瘦身机制。</li><li>若只打算用Redis 做缓存，可以关闭持久化。</li><li>若打算使用Redis 的持久化。建议RDB和AOF都开启。其实RDB更适合做数据的备份，留一后手。AOF出问题了，还有RDB。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis（七）配置文件详解</title>
      <link href="/2020/10/26/Redis%EF%BC%88%E4%B8%83%EF%BC%89%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3-redis%E4%B8%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/10/26/Redis%EF%BC%88%E4%B8%83%EF%BC%89%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3-redis%E4%B8%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p><strong>目录</strong></p><p>[TOC]</p><h2 id="命令行编辑配置"><a href="#命令行编辑配置" class="headerlink" title="命令行编辑配置"></a>命令行编辑配置</h2><p>你可以通过修改 redis.conf 文件或使用 <strong>CONFIG set</strong> 命令来修改配置。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><strong>CONFIG SET</strong> 命令基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; CONFIG SET CONFIG_SETTING_NAME NEW_CONFIG_VALUE</span><br></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; CONFIG SET loglevel <span class="string">&quot;notice&quot;</span></span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; CONFIG GET loglevel</span><br><span class="line"></span><br><span class="line">1) <span class="string">&quot;loglevel&quot;</span></span><br><span class="line">2) <span class="string">&quot;notice&quot;</span></span><br></pre></td></tr></table></figure><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><p>redis.conf 配置项说明如下：</p><table><thead><tr><th>序号</th><th>配置项</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td><code>daemonize no</code></td><td>Redis 默认不是以守护进程的方式运行，可以通过该配置项修改，使用 yes 启用守护进程（Windows 不支持守护线程的配置为 no ）</td></tr><tr><td>2</td><td><code>pidfile /var/run/redis.pid</code></td><td>当 Redis 以守护进程方式运行时，Redis 默认会把 pid 写入 &#x2F;var&#x2F;run&#x2F;redis.pid 文件，可以通过 pidfile 指定</td></tr><tr><td>3</td><td><code>port 6379</code></td><td>指定 Redis 监听端口，默认端口为 6379，作者在自己的一篇博文中解释了为什么选用 6379 作为默认端口，因为 6379 在手机按键上 MERZ 对应的号码，而 MERZ 取自意大利歌女 Alessia Merz 的名字</td></tr><tr><td>4</td><td><code>bind 127.0.0.1</code></td><td>绑定的主机地址</td></tr><tr><td>5</td><td><code>timeout 300</code></td><td>当客户端闲置多长秒后关闭连接，如果指定为 0 ，表示关闭该功能</td></tr><tr><td>6</td><td><code>loglevel notice</code></td><td>指定日志记录级别，Redis 总共支持四个级别：debug、verbose、notice、warning，默认为 notice</td></tr><tr><td>7</td><td><code>logfile stdout</code></td><td>日志记录方式，默认为标准输出，如果配置 Redis 为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给 &#x2F;dev&#x2F;null</td></tr><tr><td>8</td><td><code>databases 16</code></td><td>设置数据库的数量，默认数据库为0，可以使用SELECT 命令在连接上指定数据库id</td></tr><tr><td>9</td><td><code>save  </code>Redis 默认配置文件中提供了三个条件：<strong>save 900 1<strong><strong>save 300 10</strong></strong>save 60 10000</strong>分别表示 900 秒（15 分钟）内有 1 个更改，300 秒（5 分钟）内有 10 个更改以及 60 秒内有 10000 个更改。</td><td>指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</td></tr><tr><td>10</td><td><code>rdbcompression yes</code></td><td>指定存储至本地数据库时是否压缩数据，默认为 yes，Redis 采用 LZF 压缩，如果为了节省 CPU 时间，可以关闭该选项，但会导致数据库文件变的巨大</td></tr><tr><td>11</td><td><code>dbfilename dump.rdb</code></td><td>指定本地数据库文件名，默认值为 dump.rdb</td></tr><tr><td>12</td><td><code>dir ./</code></td><td>指定本地数据库存放目录</td></tr><tr><td>13</td><td><code>slaveof  </code></td><td>设置当本机为 slave 服务时，设置 master 服务的 IP 地址及端口，在 Redis 启动时，它会自动从 master 进行数据同步</td></tr><tr><td>14</td><td><code>masterauth </code></td><td>当 master 服务设置了密码保护时，slav 服务连接 master 的密码</td></tr><tr><td>15</td><td><code>requirepass foobared</code></td><td>设置 Redis 连接密码，如果配置了连接密码，客户端在连接 Redis 时需要通过 AUTH <password> 命令提供密码，默认关闭</td></tr><tr><td>16</td><td><code> maxclients 128</code></td><td>设置同一时间最大客户端连接数，默认无限制，Redis 可以同时打开的客户端连接数为 Redis 进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis 会关闭新的连接并向客户端返回 max number of clients reached 错误信息</td></tr><tr><td>17</td><td><code>maxmemory </code></td><td>指定 Redis 最大内存限制，Redis 在启动时会把数据加载到内存中，达到最大内存后，Redis 会先尝试清除已到期或即将到期的 Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis 新的 vm 机制，会把 Key 存放内存，Value 会存放在 swap 区</td></tr><tr><td>18</td><td><code>appendonly no</code></td><td>指定是否在每次更新操作后进行日志记录，Redis 在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为  redis 本身同步数据文件是按上面 save 条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为 no</td></tr><tr><td>19</td><td><code>appendfilename appendonly.aof</code></td><td>指定更新日志文件名，默认为 appendonly.aof</td></tr><tr><td>20</td><td><code>appendfsync everysec</code></td><td>指定更新日志条件，共有 3 个可选值： <strong>no</strong>：表示等操作系统进行数据缓存同步到磁盘（快） <strong>always</strong>：表示每次更新操作后手动调用 fsync() 将数据写到磁盘（慢，安全） <strong>everysec</strong>：表示每秒同步一次（折中，默认值）</td></tr><tr><td>21</td><td><code>vm-enabled no</code></td><td>指定是否启用虚拟内存机制，默认值为 no，简单的介绍一下，VM 机制将数据分页存放，由 Redis 将访问量较少的页即冷数据 swap 到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析 Redis 的 VM 机制）</td></tr><tr><td>22</td><td><code>vm-swap-file /tmp/redis.swap</code></td><td>虚拟内存文件路径，默认值为 &#x2F;tmp&#x2F;redis.swap，不可多个 Redis 实例共享</td></tr><tr><td>23</td><td><code>vm-max-memory 0</code></td><td>将所有大于 vm-max-memory 的数据存入虚拟内存，无论 vm-max-memory 设置多小，所有索引数据都是内存存储的(Redis 的索引数据 就是 keys)，也就是说，当 vm-max-memory 设置为 0 的时候，其实是所有 value 都存在于磁盘。默认值为 0</td></tr><tr><td>24</td><td><code>vm-page-size 32</code></td><td>Redis swap 文件分成了很多的 page，一个对象可以保存在多个 page 上面，但一个 page 上不能被多个对象共享，vm-page-size 是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page 大小最好设置为 32 或者 64bytes；如果存储很大大对象，则可以使用更大的 page，如果不确定，就使用默认值</td></tr><tr><td>25</td><td><code>vm-pages 134217728</code></td><td>设置 swap 文件中的 page 数量，由于页表（一种表示页面空闲或使用的 bitmap）是在放在内存中的，，在磁盘上每 8 个 pages 将消耗 1byte 的内存。</td></tr><tr><td>26</td><td><code>vm-max-threads 4</code></td><td>设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4</td></tr><tr><td>27</td><td><code>glueoutputbuf yes</code></td><td>设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启</td></tr><tr><td>28</td><td><code>hash-max-zipmap-entries 64 hash-max-zipmap-value 512</code></td><td>指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</td></tr><tr><td>29</td><td><code>activerehashing yes</code></td><td>指定是否激活重置哈希，默认为开启（后面在介绍 Redis 的哈希算法时具体介绍）</td></tr><tr><td>30</td><td><code>include /path/to/local.conf</code></td><td>指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</td></tr></tbody></table><h2 id="详细说明（对比实际配置文件）"><a href="#详细说明（对比实际配置文件）" class="headerlink" title="详细说明（对比实际配置文件）"></a>详细说明（对比实际配置文件）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##redis配置详解</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis configuration file example.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that in order to read the configuration file, Redis must be</span></span><br><span class="line"><span class="comment"># started with the file path as first argument:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ./redis-server /path/to/redis.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note on units: when memory size is needed, it is possible to specify</span></span><br><span class="line"><span class="comment"># it in the usual form of 1k 5GB 4M and so forth:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1k =&gt; 1000 bytes</span></span><br><span class="line"><span class="comment"># 1kb =&gt; 1024 bytes</span></span><br><span class="line"><span class="comment"># 1m =&gt; 1000000 bytes</span></span><br><span class="line"><span class="comment"># 1mb =&gt; 1024*1024 bytes</span></span><br><span class="line"><span class="comment"># 1g =&gt; 1000000000 bytes</span></span><br><span class="line"><span class="comment"># 1gb =&gt; 1024*1024*1024 bytes</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># units are case insensitive so 1GB 1Gb 1gB are all the same.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################## INCLUDES ###################################</span></span><br><span class="line"><span class="comment">################################## 包含     ###################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Include one or more other config files here.  This is useful if you</span></span><br><span class="line"><span class="comment"># have a standard template that goes to all Redis servers but also need</span></span><br><span class="line"><span class="comment"># to customize a few per-server settings.  Include files can include</span></span><br><span class="line"><span class="comment"># other files, so use this wisely.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Notice option &quot;include&quot; won&#x27;t be rewritten by command &quot;CONFIG REWRITE&quot;</span></span><br><span class="line"><span class="comment"># from admin or Redis Sentinel. Since Redis always uses the last processed</span></span><br><span class="line"><span class="comment"># line as value of a configuration directive, you&#x27;d better put includes</span></span><br><span class="line"><span class="comment"># at the beginning of this file to avoid overwriting config change at runtime.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If instead you are interested in using includes to override configuration</span></span><br><span class="line"><span class="comment"># options, it is better to use include as the last line.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 假如说你有一个可用于所有的 redis server 的标准配置模板，</span></span><br><span class="line"><span class="comment"># 但针对某些 server 又需要一些个性化的设置，</span></span><br><span class="line"><span class="comment"># 你可以使用 include 来包含一些其他的配置文件，这对你来说是非常有用的。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 但是要注意哦，include 是不能被 config rewrite 命令改写的</span></span><br><span class="line"><span class="comment"># 由于 redis 总是以最后的加工线作为一个配置指令值，所以你最好是把 include 放在这个文件的最前面，</span></span><br><span class="line"><span class="comment"># 以避免在运行时覆盖配置的改变，相反，你就把它放在后面</span></span><br><span class="line"><span class="comment"># include /path/to/local.conf</span></span><br><span class="line"><span class="comment"># include /path/to/other.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################ GENERAL  #####################################</span></span><br><span class="line"><span class="comment">################################ 常用     #####################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># By default Redis does not run as a daemon. Use &#x27;yes&#x27; if you need it.</span></span><br><span class="line"><span class="comment"># Note that Redis will write a pid file in /var/run/redis.pid when daemonized.</span></span><br><span class="line"><span class="comment"># 默认情况下 redis 不是作为守护进程运行的，如果你想让它在后台运行，你就把它改成 yes。</span></span><br><span class="line"><span class="comment"># 当redis作为守护进程运行的时候，它会写一个 pid 到 /var/run/redis.pid 文件里面。</span></span><br><span class="line">daemonize <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># When running daemonized, Redis writes a pid file in /var/run/redis.pid by</span></span><br><span class="line"><span class="comment"># default. You can specify a custom pid file location here.</span></span><br><span class="line"><span class="comment"># 当 Redis 以守护进程的方式运行的时候，Redis 默认会把 pid 文件放在/var/run/redis.pid</span></span><br><span class="line"><span class="comment"># 可配置到其他地址，当运行多个 redis 服务时，需要指定不同的 pid 文件和端口</span></span><br><span class="line"><span class="comment"># 指定存储Redis进程号的文件路径</span></span><br><span class="line">pidfile /var/run/redis.pid</span><br><span class="line"></span><br><span class="line"><span class="comment"># Accept connections on the specified port, default is 6379.</span></span><br><span class="line"><span class="comment"># If port 0 is specified Redis will not listen on a TCP socket.</span></span><br><span class="line"><span class="comment"># 端口，默认端口是6379，生产环境中建议更改端口号，安全性更高</span></span><br><span class="line"><span class="comment"># 如果你设为 0 ，redis 将不在 socket 上监听任何客户端连接。</span></span><br><span class="line">port 9966</span><br><span class="line"></span><br><span class="line"><span class="comment"># TCP listen() backlog.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In high requests-per-second environments you need an high backlog in order</span></span><br><span class="line"><span class="comment"># to avoid slow clients connections issues. Note that the Linux kernel</span></span><br><span class="line"><span class="comment"># will silently truncate it to the value of /proc/sys/net/core/somaxconn so</span></span><br><span class="line"><span class="comment"># make sure to raise both the value of somaxconn and tcp_max_syn_backlog</span></span><br><span class="line"><span class="comment"># in order to get the desired effect.</span></span><br><span class="line"><span class="comment"># TCP 监听的最大容纳数量</span></span><br><span class="line"><span class="comment"># 此参数确定了TCP连接中已完成队列(完成三次握手之后)的长度，</span></span><br><span class="line"><span class="comment"># 当系统并发量大并且客户端速度缓慢的时候，你需要把这个值调高以避免客户端连接缓慢的问题。</span></span><br><span class="line"><span class="comment"># Linux 内核会一声不响的把这个值缩小成 /proc/sys/net/core/somaxconn 对应的值，默认是511，而Linux的默认参数值是128。</span></span><br><span class="line"><span class="comment"># 所以可以将这二个参数一起参考设定，你以便达到你的预期。</span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line">tcp-backlog 511</span><br><span class="line"></span><br><span class="line"><span class="comment"># By default Redis listens for connections from all the network interfaces</span></span><br><span class="line"><span class="comment"># available on the server. It is possible to listen to just one or multiple</span></span><br><span class="line"><span class="comment"># interfaces using the &quot;bind&quot; configuration directive, followed by one or</span></span><br><span class="line"><span class="comment"># more IP addresses.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Examples:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># bind 192.168.1.100 10.0.0.1</span></span><br><span class="line"><span class="comment"># 有时候为了安全起见，redis一般都是监听127.0.0.1 但是有时候又有同网段能连接的需求，当然可以绑定0.0.0.0 用iptables来控制访问权限，或者设置redis访问密码来保证数据安全</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不设置将处理所有请求,建议生产环境中设置，有个误区：bind是用来限制外网IP访问的，其实不是，限制外网ip访问可以通过iptables；如：-A INPUT -s 10.10.1.0/24 -p tcp -m state --state NEW -m tcp --dport 9966 -j ACCEPT ；</span></span><br><span class="line"><span class="comment"># 实际上，bind ip 绑定的是redis所在服务器网卡的ip，当然127.0.0.1也是可以的</span></span><br><span class="line"><span class="comment">#如果绑定一个外网ip，就会报错：Creating Server TCP listening socket xxx.xxx.xxx.xxx:9966: bind: Cannot assign requested address</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bind 127.0.0.1</span></span><br><span class="line"><span class="built_in">bind</span> 127.0.0.1 10.10.1.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设绑定是以上ip，使用 netstat -anp|grep 9966 会发现，这两个ip被bind，其中10.10.1.3是服务器网卡的ip</span></span><br><span class="line"><span class="comment"># tcp        0      0 10.10.1.3:9966         0.0.0.0:*                   LISTEN      11188/redis-server  </span></span><br><span class="line"><span class="comment"># tcp        0      0 127.0.0.1:9966         0.0.0.0:*                   LISTEN      11188/redis-server </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify the path for the Unix socket that will be used to listen for</span></span><br><span class="line"><span class="comment"># incoming connections. There is no default, so Redis will not listen</span></span><br><span class="line"><span class="comment"># on a unix socket when not specified.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># unixsocket /tmp/redis.sock</span></span><br><span class="line"><span class="comment"># unixsocketperm 700</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Close the connection after a client is idle for N seconds (0 to disable)</span></span><br><span class="line"><span class="comment"># 客户端和Redis服务端的连接超时时间，默认是0，表示永不超时。</span></span><br><span class="line"><span class="built_in">timeout</span> 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># TCP keepalive.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence</span></span><br><span class="line"><span class="comment"># of communication. This is useful for two reasons:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1) Detect dead peers.</span></span><br><span class="line"><span class="comment"># 2) Take the connection alive from the point of view of network</span></span><br><span class="line"><span class="comment">#    equipment in the middle.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># On Linux, the specified value (in seconds) is the period used to send ACKs.</span></span><br><span class="line"><span class="comment"># Note that to close the connection the double of the time is needed.</span></span><br><span class="line"><span class="comment"># On other kernels the period depends on the kernel configuration.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># A reasonable value for this option is 60 seconds.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># tcp 心跳包。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 如果设置为非零，则在与客户端缺乏通讯的时候使用 SO_KEEPALIVE 发送 tcp acks 给客户端。</span></span><br><span class="line"><span class="comment"># 这个之所有有用，主要由两个原因：</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1) 防止死的 peers</span></span><br><span class="line"><span class="comment"># 2) Take the connection alive from the point of view of network</span></span><br><span class="line"><span class="comment">#    equipment in the middle.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 推荐一个合理的值就是60秒</span></span><br><span class="line">tcp-keepalive 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify the server verbosity level.</span></span><br><span class="line"><span class="comment"># This can be one of:</span></span><br><span class="line"><span class="comment"># debug (a lot of information, useful for development/testing)</span></span><br><span class="line"><span class="comment"># verbose (many rarely useful info, but not a mess like the debug level)</span></span><br><span class="line"><span class="comment"># notice (moderately verbose, what you want in production probably)</span></span><br><span class="line"><span class="comment"># warning (only very important / critical messages are logged)</span></span><br><span class="line"><span class="comment"># 日志记录等级，4个可选值debug,verbose,notice,warning</span></span><br><span class="line"><span class="comment"># 可以是下面的这些值：</span></span><br><span class="line"><span class="comment"># debug (适用于开发或测试阶段)</span></span><br><span class="line"><span class="comment"># verbose (many rarely useful info, but not a mess like the debug level)</span></span><br><span class="line"><span class="comment"># notice (适用于生产环境)</span></span><br><span class="line"><span class="comment"># warning (仅仅一些重要的消息被记录)</span></span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify the log file name. Also the empty string can be used to force</span></span><br><span class="line"><span class="comment"># Redis to log on the standard output. Note that if you use standard</span></span><br><span class="line"><span class="comment"># output for logging but daemonize, logs will be sent to /dev/null</span></span><br><span class="line"><span class="comment">#配置 log 文件地址,默认打印在命令行终端的窗口上，也可设为/dev/null屏蔽日志、</span></span><br><span class="line">logfile <span class="string">&quot;/data/logs/redis/redis.log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># To enable logging to the system logger, just set &#x27;syslog-enabled&#x27; to yes,</span></span><br><span class="line"><span class="comment"># and optionally update the other syslog parameters to suit your needs.</span></span><br><span class="line"><span class="comment"># 要想把日志记录到系统日志，就把它改成 yes，</span></span><br><span class="line"><span class="comment"># 也可以可选择性的更新其他的syslog 参数以达到你的要求</span></span><br><span class="line"><span class="comment"># syslog-enabled no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify the syslog identity.</span></span><br><span class="line"><span class="comment"># 设置 syslog 的 identity。</span></span><br><span class="line"><span class="comment"># syslog-ident redis</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.</span></span><br><span class="line"><span class="comment"># syslog-facility local0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the number of databases. The default database is DB 0, you can select</span></span><br><span class="line"><span class="comment"># a different one on a per-connection basis using SELECT &lt;dbid&gt; where</span></span><br><span class="line"><span class="comment"># dbid is a number between 0 and &#x27;databases&#x27;-1</span></span><br><span class="line"><span class="comment"># 可用的数据库数，默认值为16，默认数据库为0，数据库范围在0-（database-1）之间</span></span><br><span class="line">databases 16</span><br><span class="line"></span><br><span class="line"><span class="comment">################################ SNAPSHOTTING  ################################</span></span><br><span class="line"><span class="comment">################################ 快照          ################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Save the DB on disk:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   save &lt;seconds&gt; &lt;changes&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   Will save the DB if both the given number of seconds and the given</span></span><br><span class="line"><span class="comment">#   number of write operations against the DB occurred.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   In the example below the behaviour will be to save:</span></span><br><span class="line"><span class="comment">#   after 900 sec (15 min) if at least 1 key changed</span></span><br><span class="line"><span class="comment">#   after 300 sec (5 min) if at least 10 keys changed</span></span><br><span class="line"><span class="comment">#   after 60 sec if at least 10000 keys changed</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   Note: you can disable saving completely by commenting out all &quot;save&quot; lines.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   It is also possible to remove all the previously configured save</span></span><br><span class="line"><span class="comment">#   points by adding a save directive with a single empty string argument</span></span><br><span class="line"><span class="comment">#   like in the following example:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   save &quot;&quot;</span></span><br><span class="line"><span class="comment"># 在 900 秒内最少有 1 个 key 被改动，或者 300 秒内最少有 10 个 key 被改动，又或者 60 秒内最少有 1000 个 key 被改动，以上三个条件随便满足一个，就触发一次保存操作。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    if(在60秒之内有10000个keys发生变化时)&#123;</span></span><br><span class="line"><span class="comment">#      进行镜像备份</span></span><br><span class="line"><span class="comment">#    &#125;else if(在300秒之内有10个keys发生了变化)&#123;</span></span><br><span class="line"><span class="comment">#      进行镜像备份</span></span><br><span class="line"><span class="comment">#    &#125;else if(在900秒之内有1个keys发生了变化)&#123;</span></span><br><span class="line"><span class="comment">#      进行镜像备份</span></span><br><span class="line"><span class="comment">#    &#125;</span></span><br><span class="line"></span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line"><span class="comment"># By default Redis will stop accepting writes if RDB snapshots are enabled</span></span><br><span class="line"><span class="comment"># (at least one save point) and the latest background save failed.</span></span><br><span class="line"><span class="comment"># This will make the user aware (in a hard way) that data is not persisting</span></span><br><span class="line"><span class="comment"># on disk properly, otherwise chances are that no one will notice and some</span></span><br><span class="line"><span class="comment">#:/ disaster will happen.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If the background saving process will start working again Redis will</span></span><br><span class="line"><span class="comment"># automatically allow writes again.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># However if you have setup your proper monitoring of the Redis server</span></span><br><span class="line"><span class="comment"># and persistence, you may want to disable this feature so that Redis will</span></span><br><span class="line"><span class="comment"># continue to work as usual even if there are problems with disk,</span></span><br><span class="line"><span class="comment"># permissions, and so forth.</span></span><br><span class="line"><span class="comment"># 默认情况下，如果 redis 最后一次的后台保存失败，redis 将停止接受写操作，</span></span><br><span class="line"><span class="comment"># 这样以一种强硬的方式让用户知道数据不能正确的持久化到磁盘，</span></span><br><span class="line"><span class="comment"># 否则就会没人注意到灾难的发生。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 如果后台保存进程重新启动工作了，redis 也将自动的允许写操作。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 然而你要是安装了靠谱的监控，你可能不希望 redis 这样做，那你就改成 no 好</span></span><br><span class="line">stop-writes-on-bgsave-error <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Compress string objects using LZF when dump .rdb databases?</span></span><br><span class="line"><span class="comment"># For default that&#x27;s set to &#x27;yes&#x27; as it&#x27;s almost always a win.</span></span><br><span class="line"><span class="comment"># If you want to save some CPU in the saving child set it to &#x27;no&#x27; but</span></span><br><span class="line"><span class="comment"># the dataset will likely be bigger if you have compressible values or keys.</span></span><br><span class="line"><span class="comment"># 在进行备份时,是否进行压缩</span></span><br><span class="line"><span class="comment"># 是否在 dump .rdb 数据库的时候使用 LZF 压缩字符串</span></span><br><span class="line"><span class="comment"># 默认都设为 yes</span></span><br><span class="line"><span class="comment"># 如果你希望保存子进程节省点 cpu ，你就设置它为 no ，</span></span><br><span class="line"><span class="comment"># 不过这个数据集可能就会比较大</span></span><br><span class="line">rdbcompression <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Since version 5 of RDB a CRC64 checksum is placed at the end of the file.</span></span><br><span class="line"><span class="comment"># This makes the format more resistant to corruption but there is a performance</span></span><br><span class="line"><span class="comment"># hit to pay (around 10%) when saving and loading RDB files, so you can disable it</span></span><br><span class="line"><span class="comment"># for maximum performances.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># RDB files created with checksum disabled have a checksum of zero that will</span></span><br><span class="line"><span class="comment"># tell the loading code to skip the check.    </span></span><br><span class="line"><span class="comment"># 读取和写入的时候是否支持CRC64校验，默认是开启的</span></span><br><span class="line">rdbchecksum <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The filename where to dump the DB</span></span><br><span class="line"><span class="comment"># 备份文件的文件名</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># The working directory.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The DB will be written inside this directory, with the filename specified</span></span><br><span class="line"><span class="comment"># above using the &#x27;dbfilename&#x27; configuration directive.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The Append Only File will also be created inside this directory.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that you must specify a directory here, not a file name.</span></span><br><span class="line"><span class="comment"># 数据库备份的文件放置的路径</span></span><br><span class="line"><span class="comment"># 路径跟文件名分开配置是因为 Redis 备份时，先会将当前数据库的状态写入到一个临时文件</span></span><br><span class="line"><span class="comment"># 等备份完成时，再把该临时文件替换为上面所指定的文件</span></span><br><span class="line"><span class="comment"># 而临时文件和上面所配置的备份文件都会放在这个指定的路径当中</span></span><br><span class="line"><span class="comment"># 默认值为 ./</span></span><br><span class="line"><span class="built_in">dir</span> /data/data/redis/</span><br><span class="line"></span><br><span class="line"><span class="comment">################################# REPLICATION #################################</span></span><br><span class="line"><span class="comment">################################# 主从复制    #################################</span></span><br><span class="line"><span class="comment"># Master-Slave replication. Use slaveof to make a Redis instance a copy of</span></span><br><span class="line"><span class="comment"># another Redis server. A few things to understand ASAP about Redis replication.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1) Redis replication is asynchronous, but you can configure a master to</span></span><br><span class="line"><span class="comment">#    stop accepting writes if it appears to be not connected with at least</span></span><br><span class="line"><span class="comment">#    a given number of slaves.</span></span><br><span class="line"><span class="comment"># 2) Redis slaves are able to perform a partial resynchronization with the</span></span><br><span class="line"><span class="comment">#    master if the replication link is lost for a relatively small amount of</span></span><br><span class="line"><span class="comment">#    time. You may want to configure the replication backlog size (see the next</span></span><br><span class="line"><span class="comment">#    sections of this file) with a sensible value depending on your needs.</span></span><br><span class="line"><span class="comment"># 3) Replication is automatic and does not need user intervention. After a</span></span><br><span class="line"><span class="comment">#    network partition slaves automatically try to reconnect to masters</span></span><br><span class="line"><span class="comment">#    and resynchronize with them.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 设置该数据库为其他数据库的从数据库</span></span><br><span class="line"><span class="comment"># slaveof &lt;masterip&gt; &lt;masterport&gt; 当本机为从服务时，设置主服务的IP及端口</span></span><br><span class="line"><span class="comment"># slaveof &lt;masterip&gt; &lt;masterport&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If the master is password protected (using the &quot;requirepass&quot; configuration</span></span><br><span class="line"><span class="comment"># directive below) it is possible to tell the slave to authenticate before</span></span><br><span class="line"><span class="comment"># starting the replication synchronization process, otherwise the master will</span></span><br><span class="line"><span class="comment"># refuse the slave request.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 指定与主数据库连接时需要的密码验证</span></span><br><span class="line"><span class="comment"># masterauth &lt;master-password&gt; 当本机为从服务时，设置访问master服务器的密码</span></span><br><span class="line"><span class="comment"># masterauth &lt;master-password&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># When a slave loses its connection with the master, or when the replication</span></span><br><span class="line"><span class="comment"># is still in progress, the slave can act in two different ways:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1) if slave-serve-stale-data is set to &#x27;yes&#x27; (the default) the slave will</span></span><br><span class="line"><span class="comment">#    still reply to client requests, possibly with out of date data, or the</span></span><br><span class="line"><span class="comment">#    data set may just be empty if this is the first synchronization.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 2) if slave-serve-stale-data is set to &#x27;no&#x27; the slave will reply with</span></span><br><span class="line"><span class="comment">#    an error &quot;SYNC with master in progress&quot; to all the kind of commands</span></span><br><span class="line"><span class="comment">#    but to INFO and SLAVEOF.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 当slave服务器和master服务器失去连接后，或者当数据正在复制传输的时候，如果此参数值设置“yes”，slave服务器可以继续接受客户端的请求，否则，会返回给请求的客户端如下信息“SYNC with master in progress”,除了INFO，SLAVEOF这两个命令</span></span><br><span class="line">slave-serve-stale-data <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You can configure a slave instance to accept writes or not. Writing against</span></span><br><span class="line"><span class="comment"># a slave instance may be useful to store some ephemeral data (because data</span></span><br><span class="line"><span class="comment"># written on a slave will be easily deleted after resync with the master) but</span></span><br><span class="line"><span class="comment"># may also cause problems if clients are writing to it because of a</span></span><br><span class="line"><span class="comment"># misconfiguration.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Since Redis 2.6 by default slaves are read-only.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note: read only slaves are not designed to be exposed to untrusted clients</span></span><br><span class="line"><span class="comment"># on the internet. It&#x27;s just a protection layer against misuse of the instance.</span></span><br><span class="line"><span class="comment"># Still a read only slave exports by default all the administrative commands</span></span><br><span class="line"><span class="comment"># such as CONFIG, DEBUG, and so forth. To a limited extent you can improve</span></span><br><span class="line"><span class="comment"># security of read only slaves using &#x27;rename-command&#x27; to shadow all the</span></span><br><span class="line"><span class="comment"># administrative / dangerous commands.</span></span><br><span class="line"><span class="comment"># 是否允许slave服务器节点只提供读服务</span></span><br><span class="line">slave-read-only <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Replication SYNC strategy: disk or socket.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------</span></span><br><span class="line"><span class="comment"># WARNING: DISKLESS REPLICATION IS EXPERIMENTAL CURRENTLY</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># New slaves and reconnecting slaves that are not able to continue the replication</span></span><br><span class="line"><span class="comment"># process just receiving differences, need to do what is called a &quot;full</span></span><br><span class="line"><span class="comment"># synchronization&quot;. An RDB file is transmitted from the master to the slaves.</span></span><br><span class="line"><span class="comment"># The transmission can happen in two different ways:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1) Disk-backed: The Redis master creates a new process that writes the RDB</span></span><br><span class="line"><span class="comment">#                 file on disk. Later the file is transferred by the parent</span></span><br><span class="line"><span class="comment">#                 process to the slaves incrementally.</span></span><br><span class="line"><span class="comment"># 2) Diskless: The Redis master creates a new process that directly writes the</span></span><br><span class="line"><span class="comment">#              RDB file to slave sockets, without touching the disk at all.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># With disk-backed replication, while the RDB file is generated, more slaves</span></span><br><span class="line"><span class="comment"># can be queued and served with the RDB file as soon as the current child producing</span></span><br><span class="line"><span class="comment"># the RDB file finishes its work. With diskless replication instead once</span></span><br><span class="line"><span class="comment"># the transfer starts, new slaves arriving will be queued and a new transfer</span></span><br><span class="line"><span class="comment"># will start when the current one terminates.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># When diskless replication is used, the master waits a configurable amount of</span></span><br><span class="line"><span class="comment"># time (in seconds) before starting the transfer in the hope that multiple slaves</span></span><br><span class="line"><span class="comment"># will arrive and the transfer can be parallelized.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># With slow disks and fast (large bandwidth) networks, diskless replication</span></span><br><span class="line"><span class="comment"># works better.</span></span><br><span class="line">repl-diskless-sync no</span><br><span class="line"></span><br><span class="line"><span class="comment"># When diskless replication is enabled, it is possible to configure the delay</span></span><br><span class="line"><span class="comment"># the server waits in order to spawn the child that transfers the RDB via socket</span></span><br><span class="line"><span class="comment"># to the slaves.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This is important since once the transfer starts, it is not possible to serve</span></span><br><span class="line"><span class="comment"># new slaves arriving, that will be queued for the next RDB transfer, so the server</span></span><br><span class="line"><span class="comment"># waits a delay in order to let more slaves arrive.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The delay is specified in seconds, and by default is 5 seconds. To disable</span></span><br><span class="line"><span class="comment"># it entirely just set it to 0 seconds and the transfer will start ASAP.</span></span><br><span class="line">repl-diskless-sync-delay 5</span><br><span class="line"></span><br><span class="line"><span class="comment"># Slaves send PINGs to server in a predefined interval. It&#x27;s possible to change</span></span><br><span class="line"><span class="comment"># this interval with the repl_ping_slave_period option. The default value is 10</span></span><br><span class="line"><span class="comment"># seconds.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Slaves 在一个预定义的时间间隔内发送 ping 命令到 server 。</span></span><br><span class="line"><span class="comment"># 你可以改变这个时间间隔。默认为 10 秒。</span></span><br><span class="line"><span class="comment"># repl-ping-slave-period 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The following option sets the replication timeout for:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1) Bulk transfer I/O during SYNC, from the point of view of slave.</span></span><br><span class="line"><span class="comment"># 2) Master timeout from the point of view of slaves (data, pings).</span></span><br><span class="line"><span class="comment"># 3) Slave timeout from the point of view of masters (REPLCONF ACK pings).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># It is important to make sure that this value is greater than the value</span></span><br><span class="line"><span class="comment"># specified for repl-ping-slave-period otherwise a timeout will be detected</span></span><br><span class="line"><span class="comment"># every time there is low traffic between the master and the slave.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 设置主从复制过期时间</span></span><br><span class="line"><span class="comment"># 这个值一定要比 repl-ping-slave-period 大</span></span><br><span class="line"><span class="comment"># repl-timeout 60</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable TCP_NODELAY on the slave socket after SYNC?</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If you select &quot;yes&quot; Redis will use a smaller number of TCP packets and</span></span><br><span class="line"><span class="comment"># less bandwidth to send data to slaves. But this can add a delay for</span></span><br><span class="line"><span class="comment"># the data to appear on the slave side, up to 40 milliseconds with</span></span><br><span class="line"><span class="comment"># Linux kernels using a default configuration.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If you select &quot;no&quot; the delay for data to appear on the slave side will</span></span><br><span class="line"><span class="comment"># be reduced but more bandwidth will be used for replication.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default we optimize for low latency, but in very high traffic conditions</span></span><br><span class="line"><span class="comment"># or when the master and slaves are many hops away, turning this to &quot;yes&quot; may</span></span><br><span class="line"><span class="comment"># be a good idea.</span></span><br><span class="line"><span class="comment"># 指定向slave同步数据时，是否禁用socket的NO_DELAY选 项。若配置为“yes”，则禁用NO_DELAY，则TCP协议栈会合并小包统一发送，这样可以减少主从节点间的包数量并节省带宽，但会增加数据同步到 slave的时间。若配置为“no”，表明启用NO_DELAY，则TCP协议栈不会延迟小包的发送时机，这样数据同步的延时会减少，但需要更大的带宽。 通常情况下，应该配置为no以降低同步延时，但在主从节点间网络负载已经很高的情况下，可以配置为yes。</span></span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the replication backlog size. The backlog is a buffer that accumulates</span></span><br><span class="line"><span class="comment"># slave data when slaves are disconnected for some time, so that when a slave</span></span><br><span class="line"><span class="comment"># wants to reconnect again, often a full resync is not needed, but a partial</span></span><br><span class="line"><span class="comment"># resync is enough, just passing the portion of data the slave missed while</span></span><br><span class="line"><span class="comment"># disconnected.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The bigger the replication backlog, the longer the time the slave can be</span></span><br><span class="line"><span class="comment"># disconnected and later be able to perform a partial resynchronization.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The backlog is only allocated once there is at least a slave connected.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 设置主从复制容量大小。这个 backlog 是一个用来在 slaves 被断开连接时</span></span><br><span class="line"><span class="comment"># 存放 slave 数据的 buffer，所以当一个 slave 想要重新连接，通常不希望全部重新同步，</span></span><br><span class="line"><span class="comment"># 只是部分同步就够了，仅仅传递 slave 在断开连接时丢失的这部分数据。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The biggest the replication backlog, the longer the time the slave can be</span></span><br><span class="line"><span class="comment"># disconnected and later be able to perform a partial resynchronization.</span></span><br><span class="line"><span class="comment"># 这个值越大，salve 可以断开连接的时间就越长。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># repl-backlog-size 1mb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># After a master has no longer connected slaves for some time, the backlog</span></span><br><span class="line"><span class="comment"># will be freed. The following option configures the amount of seconds that</span></span><br><span class="line"><span class="comment"># need to elapse, starting from the time the last slave disconnected, for</span></span><br><span class="line"><span class="comment"># the backlog buffer to be freed.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># A value of 0 means to never release the backlog.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 在某些时候，master 不再连接 slaves，backlog 将被释放。</span></span><br><span class="line"><span class="comment"># 如果设置为 0 ，意味着绝不释放 backlog 。</span></span><br><span class="line"><span class="comment"># repl-backlog-ttl 3600</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The slave priority is an integer number published by Redis in the INFO output.</span></span><br><span class="line"><span class="comment"># It is used by Redis Sentinel in order to select a slave to promote into a</span></span><br><span class="line"><span class="comment"># master if the master is no longer working correctly.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># A slave with a low priority number is considered better for promotion, so</span></span><br><span class="line"><span class="comment"># for instance if there are three slaves with priority 10, 100, 25 Sentinel will</span></span><br><span class="line"><span class="comment"># pick the one with priority 10, that is the lowest.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># However a special priority of 0 marks the slave as not able to perform the</span></span><br><span class="line"><span class="comment"># role of master, so a slave with priority of 0 will never be selected by</span></span><br><span class="line"><span class="comment"># Redis Sentinel for promotion.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default the priority is 100.</span></span><br><span class="line"><span class="comment"># 指定slave的优先级。在不只1个slave存在的部署环境下，当master宕机时，Redis</span></span><br><span class="line"><span class="comment"># Sentinel会将priority值最小的slave提升为master。</span></span><br><span class="line"><span class="comment"># 这个值越小，就越会被优先选中，需要注意的是，</span></span><br><span class="line"><span class="comment"># 若该配置项为0，则对应的slave永远不会自动提升为master。</span></span><br><span class="line">slave-priority 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># It is possible for a master to stop accepting writes if there are less than</span></span><br><span class="line"><span class="comment"># N slaves connected, having a lag less or equal than M seconds.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The N slaves need to be in &quot;online&quot; state.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The lag in seconds, that must be &lt;= the specified value, is calculated from</span></span><br><span class="line"><span class="comment"># the last ping received from the slave, that is usually sent every second.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This option does not GUARANTEE that N replicas will accept the write, but</span></span><br><span class="line"><span class="comment"># will limit the window of exposure for lost writes in case not enough slaves</span></span><br><span class="line"><span class="comment"># are available, to the specified number of seconds</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For example to require at least 3 slaves with a lag &lt;= 10 seconds use:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># min-slaves-to-write 3</span></span><br><span class="line"><span class="comment"># min-slaves-max-lag 10</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Setting one or the other to 0 disables the feature.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default min-slaves-to-write is set to 0 (feature disabled) and</span></span><br><span class="line"><span class="comment"># min-slaves-max-lag is set to 10.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################## SECURITY ###################################</span></span><br><span class="line"><span class="comment">################################## 安全     ###################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Require clients to issue AUTH &lt;PASSWORD&gt; before processing any other</span></span><br><span class="line"><span class="comment"># commands.  This might be useful in environments in which you do not trust</span></span><br><span class="line"><span class="comment"># others with access to the host running redis-server.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This should stay commented out for backward compatibility and because most</span></span><br><span class="line"><span class="comment"># people do not need auth (e.g. they run their own servers).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Warning: since Redis is pretty fast an outside user can try up to</span></span><br><span class="line"><span class="comment"># 150k passwords per second against a good box. This means that you should</span></span><br><span class="line"><span class="comment"># use a very strong password otherwise it will be very easy to break.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 设置连接redis的密码</span></span><br><span class="line"><span class="comment"># redis速度相当快，一个外部用户在一秒钟进行150K次密码尝试，需指定强大的密码来防止暴力破解</span></span><br><span class="line">requirepass set_enough_strong_passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># Command renaming.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># It is possible to change the name of dangerous commands in a shared</span></span><br><span class="line"><span class="comment"># environment. For instance the CONFIG command may be renamed into something</span></span><br><span class="line"><span class="comment"># hard to guess so that it will still be available for internal-use tools</span></span><br><span class="line"><span class="comment"># but not available for general clients.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># It is also possible to completely kill a command by renaming it into</span></span><br><span class="line"><span class="comment"># an empty string:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># rename-command CONFIG &quot;&quot;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Please note that changing the name of commands that are logged into the</span></span><br><span class="line"><span class="comment"># AOF file or transmitted to slaves may cause problems.</span></span><br><span class="line"><span class="comment"># 重命名一些高危命令，用来禁止高危命令</span></span><br><span class="line">rename-command FLUSHALL ZYzv6FOBdwflW2nX</span><br><span class="line">rename-command CONFIG aI7zwm1GDzMMrEi</span><br><span class="line">rename-command EVAL S9UHPKEpSvUJMM</span><br><span class="line">rename-command FLUSHDB D60FPVDJuip7gy6l</span><br><span class="line"></span><br><span class="line"><span class="comment">################################### LIMITS ####################################</span></span><br><span class="line"><span class="comment">################################### 限制   ####################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the max number of connected clients at the same time. By default</span></span><br><span class="line"><span class="comment"># this limit is set to 10000 clients, however if the Redis server is not</span></span><br><span class="line"><span class="comment"># able to configure the process file limit to allow for the specified limit</span></span><br><span class="line"><span class="comment"># the max number of allowed clients is set to the current file limit</span></span><br><span class="line"><span class="comment"># minus 32 (as Redis reserves a few file descriptors for internal uses).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Once the limit is reached Redis will close all the new connections sending</span></span><br><span class="line"><span class="comment"># an error &#x27;max number of clients reached&#x27;.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 限制同时连接的客户数量,默认是10000</span></span><br><span class="line"><span class="comment"># 当连接数超过这个值时，redis 将不再接收其他连接请求，客户端尝试连接时将收到 error 信息</span></span><br><span class="line"><span class="comment"># maxclients 10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Don&#x27;t use more memory than the specified amount of bytes.</span></span><br><span class="line"><span class="comment"># When the memory limit is reached Redis will try to remove keys</span></span><br><span class="line"><span class="comment"># according to the eviction policy selected (see maxmemory-policy).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If Redis can&#x27;t remove keys according to the policy, or if the policy is</span></span><br><span class="line"><span class="comment"># set to &#x27;noeviction&#x27;, Redis will start to reply with errors to commands</span></span><br><span class="line"><span class="comment"># that would use more memory, like SET, LPUSH, and so on, and will continue</span></span><br><span class="line"><span class="comment"># to reply to read-only commands like GET.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This option is usually useful when using Redis as an LRU cache, or to set</span></span><br><span class="line"><span class="comment"># a hard memory limit for an instance (using the &#x27;noeviction&#x27; policy).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># WARNING: If you have slaves attached to an instance with maxmemory on,</span></span><br><span class="line"><span class="comment"># the size of the output buffers needed to feed the slaves are subtracted</span></span><br><span class="line"><span class="comment"># from the used memory count, so that network problems / resyncs will</span></span><br><span class="line"><span class="comment"># not trigger a loop where keys are evicted, and in turn the output</span></span><br><span class="line"><span class="comment"># buffer of slaves is full with DELs of keys evicted triggering the deletion</span></span><br><span class="line"><span class="comment"># of more keys, and so forth until the database is completely emptied.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In short... if you have slaves attached it is suggested that you set a lower</span></span><br><span class="line"><span class="comment"># limit for maxmemory so that there is some free RAM on the system for slave</span></span><br><span class="line"><span class="comment"># output buffers (but this is not needed if the policy is &#x27;noeviction&#x27;).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 设置redis能够使用的最大内存。</span></span><br><span class="line"><span class="comment"># 达到最大内存设置后，Redis会先尝试清除已到期或即将到期的Key（设置过expire信息的key）</span></span><br><span class="line"><span class="comment"># 在删除时,按照过期时间进行删除，最早将要被过期的key将最先被删除</span></span><br><span class="line"><span class="comment"># 如果已到期或即将到期的key删光，仍进行set操作，那么将返回错误</span></span><br><span class="line"><span class="comment"># 此时redis将不再接收写请求,只接收get请求。</span></span><br><span class="line"><span class="comment"># maxmemory的设置比较适合于把redis当作于类似memcached 的缓存来使用</span></span><br><span class="line"><span class="comment"># maxmemory &lt;bytes&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MAXMEMORY POLICY: how Redis will select what to remove when maxmemory</span></span><br><span class="line"><span class="comment"># is reached. You can select among five behaviors:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># volatile-lru -&gt; remove the key with an expire set using an LRU algorithm</span></span><br><span class="line"><span class="comment"># allkeys-lru -&gt; remove any key according to the LRU algorithm</span></span><br><span class="line"><span class="comment"># volatile-random -&gt; remove a random key with an expire set</span></span><br><span class="line"><span class="comment"># allkeys-random -&gt; remove a random key, any key</span></span><br><span class="line"><span class="comment"># volatile-ttl -&gt; remove the key with the nearest expire time (minor TTL)</span></span><br><span class="line"><span class="comment"># noeviction -&gt; don&#x27;t expire at all, just return an error on write operations</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note: with any of the above policies, Redis will return an error on write</span></span><br><span class="line"><span class="comment">#       operations, when there are no suitable keys for eviction.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#       At the date of writing these commands are: set setnx setex append</span></span><br><span class="line"><span class="comment">#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd</span></span><br><span class="line"><span class="comment">#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby</span></span><br><span class="line"><span class="comment">#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby</span></span><br><span class="line"><span class="comment">#       getset mset msetnx exec sort</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The default is:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># maxmemory-policy noeviction</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># LRU and minimal TTL algorithms are not precise algorithms but approximated</span></span><br><span class="line"><span class="comment"># algorithms (in order to save memory), so you can tune it for speed or</span></span><br><span class="line"><span class="comment"># accuracy. For default Redis will check five keys and pick the one that was</span></span><br><span class="line"><span class="comment"># used less recently, you can change the sample size using the following</span></span><br><span class="line"><span class="comment"># configuration directive.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The default of 5 produces good enough results. 10 Approximates very closely</span></span><br><span class="line"><span class="comment"># true LRU but costs a bit more CPU. 3 is very fast but not very accurate.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># maxmemory-samples 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################## APPEND ONLY MODE ###############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># By default Redis asynchronously dumps the dataset on disk. This mode is</span></span><br><span class="line"><span class="comment"># good enough in many applications, but an issue with the Redis process or</span></span><br><span class="line"><span class="comment"># a power outage may result into a few minutes of writes lost (depending on</span></span><br><span class="line"><span class="comment"># the configured save points).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The Append Only File is an alternative persistence mode that provides</span></span><br><span class="line"><span class="comment"># much better durability. For instance using the default data fsync policy</span></span><br><span class="line"><span class="comment"># (see later in the config file) Redis can lose just one second of writes in a</span></span><br><span class="line"><span class="comment"># dramatic event like a server power outage, or a single write if something</span></span><br><span class="line"><span class="comment"># wrong with the Redis process itself happens, but the operating system is</span></span><br><span class="line"><span class="comment"># still running correctly.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># AOF and RDB persistence can be enabled at the same time without problems.</span></span><br><span class="line"><span class="comment"># If the AOF is enabled on startup Redis will load the AOF, that is the file</span></span><br><span class="line"><span class="comment"># with the better durability guarantees.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Please check http://redis.io/topics/persistence for more information.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># redis 默认每次更新操作后会在后台异步的把数据库镜像备份到磁盘，但该备份非常耗时，且备份不宜太频繁</span></span><br><span class="line"><span class="comment"># redis 同步数据文件是按上面save条件来同步的</span></span><br><span class="line"><span class="comment"># 如果发生诸如拉闸限电、拔插头等状况,那么将造成比较大范围的数据丢失</span></span><br><span class="line"><span class="comment"># 所以redis提供了另外一种更加高效的数据库备份及灾难恢复方式</span></span><br><span class="line"><span class="comment"># 开启append only 模式后,redis 将每一次写操作请求都追加到appendonly.aof 文件中</span></span><br><span class="line"><span class="comment"># redis重新启动时,会从该文件恢复出之前的状态。</span></span><br><span class="line"><span class="comment"># 但可能会造成 appendonly.aof 文件过大，所以redis支持BGREWRITEAOF 指令，对appendonly.aof重新整理,默认是不开启的。</span></span><br><span class="line"></span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line"><span class="comment"># The name of the append only file (default: &quot;appendonly.aof&quot;)</span></span><br><span class="line"><span class="comment"># 默认为appendonly.aof。</span></span><br><span class="line">appendfilename <span class="string">&quot;appendonly.aof&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The fsync() call tells the Operating System to actually write data on disk</span></span><br><span class="line"><span class="comment"># instead of waiting for more data in the output buffer. Some OS will really flush</span></span><br><span class="line"><span class="comment"># data on disk, some other OS will just try to do it ASAP.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Redis supports three different modes:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># no: don&#x27;t fsync, just let the OS flush the data when it wants. Faster.</span></span><br><span class="line"><span class="comment"># always: fsync after every write to the append only log. Slow, Safest.</span></span><br><span class="line"><span class="comment"># everysec: fsync only one time every second. Compromise.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The default is &quot;everysec&quot;, as that&#x27;s usually the right compromise between</span></span><br><span class="line"><span class="comment"># speed and data safety. It&#x27;s up to you to understand if you can relax this to</span></span><br><span class="line"><span class="comment"># &quot;no&quot; that will let the operating system flush the output buffer when</span></span><br><span class="line"><span class="comment"># it wants, for better performances (but if you can live with the idea of</span></span><br><span class="line"><span class="comment"># some data loss consider the default persistence mode that&#x27;s snapshotting),</span></span><br><span class="line"><span class="comment"># or on the contrary, use &quot;always&quot; that&#x27;s very slow but a bit safer than</span></span><br><span class="line"><span class="comment"># everysec.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># More details please check the following article:</span></span><br><span class="line"><span class="comment"># http://antirez.com/post/redis-persistence-demystified.html</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If unsure, use &quot;everysec&quot;.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置对 appendonly.aof 文件进行同步的频率,有三种选择always、everysec、no，默认是everysec表示每秒同步一次。</span></span><br><span class="line"><span class="comment"># always 表示每次有写操作都进行同步,everysec 表示对写操作进行累积,每秒同步一次。</span></span><br><span class="line"><span class="comment"># no表示等操作系统进行数据缓存同步到磁盘，都进行同步,everysec 表示对写操作进行累积,每秒同步一次</span></span><br><span class="line"><span class="comment"># appendfsync always</span></span><br><span class="line"><span class="comment"># appendfsync everysec</span></span><br><span class="line"><span class="comment"># appendfsync no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># When the AOF fsync policy is set to always or everysec, and a background</span></span><br><span class="line"><span class="comment"># saving process (a background save or AOF log background rewriting) is</span></span><br><span class="line"><span class="comment"># performing a lot of I/O against the disk, in some Linux configurations</span></span><br><span class="line"><span class="comment"># Redis may block too long on the fsync() call. Note that there is no fix for</span></span><br><span class="line"><span class="comment"># this currently, as even performing fsync in a different thread will block</span></span><br><span class="line"><span class="comment"># our synchronous write(2) call.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In order to mitigate this problem it&#x27;s possible to use the following option</span></span><br><span class="line"><span class="comment"># that will prevent fsync() from being called in the main process while a</span></span><br><span class="line"><span class="comment"># BGSAVE or BGREWRITEAOF is in progress.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This means that while another child is saving, the durability of Redis is</span></span><br><span class="line"><span class="comment"># the same as &quot;appendfsync none&quot;. In practical terms, this means that it is</span></span><br><span class="line"><span class="comment"># possible to lose up to 30 seconds of log in the worst scenario (with the</span></span><br><span class="line"><span class="comment"># default Linux settings).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If you have latency problems turn this to &quot;yes&quot;. Otherwise leave it as</span></span><br><span class="line"><span class="comment"># &quot;no&quot; that is the safest pick from the point of view of durability.</span></span><br><span class="line"><span class="comment"># 指定是否在后台aof文件rewrite期间调用fsync，默认为no，表示要调用fsync（无论后台是否有子进程在刷盘）。Redis在后台写RDB文件或重写afo文件期间会存在大量磁盘IO，此时，在某些linux系统中，调用fsync可能会阻塞。</span></span><br><span class="line">no-appendfsync-on-rewrite <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Automatic rewrite of the append only file.</span></span><br><span class="line"><span class="comment"># Redis is able to automatically rewrite the log file implicitly calling</span></span><br><span class="line"><span class="comment"># BGREWRITEAOF when the AOF log size grows by the specified percentage.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This is how it works: Redis remembers the size of the AOF file after the</span></span><br><span class="line"><span class="comment"># latest rewrite (if no rewrite has happened since the restart, the size of</span></span><br><span class="line"><span class="comment"># the AOF at startup is used).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This base size is compared to the current size. If the current size is</span></span><br><span class="line"><span class="comment"># bigger than the specified percentage, the rewrite is triggered. Also</span></span><br><span class="line"><span class="comment"># you need to specify a minimal size for the AOF file to be rewritten, this</span></span><br><span class="line"><span class="comment"># is useful to avoid rewriting the AOF file even if the percentage increase</span></span><br><span class="line"><span class="comment"># is reached but it is still pretty small.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Specify a percentage of zero in order to disable the automatic AOF</span></span><br><span class="line"><span class="comment"># rewrite feature.</span></span><br><span class="line"><span class="comment"># 指定Redis重写aof文件的条件，默认为100，表示与上次rewrite的aof文件大小相比，当前aof文件增长量超过上次afo文件大小的100%时，就会触发background rewrite。若配置为0，则会禁用自动rewrite</span></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定触发rewrite的aof文件大小。若aof文件小于该值，即使当前文件的增量比例达到auto-aof-rewrite-percentage的配置值，也不会触发自动rewrite。即这两个配置项同时满足时，才会触发rewrite。</span></span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"></span><br><span class="line"><span class="comment"># An AOF file may be found to be truncated at the end during the Redis</span></span><br><span class="line"><span class="comment"># startup process, when the AOF data gets loaded back into memory.</span></span><br><span class="line"><span class="comment"># This may happen when the system where Redis is running</span></span><br><span class="line"><span class="comment"># crashes, especially when an ext4 filesystem is mounted without the</span></span><br><span class="line"><span class="comment"># data=ordered option (however this can&#x27;t happen when Redis itself</span></span><br><span class="line"><span class="comment"># crashes or aborts but the operating system still works correctly).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Redis can either exit with an error when this happens, or load as much</span></span><br><span class="line"><span class="comment"># data as possible (the default now) and start if the AOF file is found</span></span><br><span class="line"><span class="comment"># to be truncated at the end. The following option controls this behavior.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If aof-load-truncated is set to yes, a truncated AOF file is loaded and</span></span><br><span class="line"><span class="comment"># the Redis server starts emitting a log to inform the user of the event.</span></span><br><span class="line"><span class="comment"># Otherwise if the option is set to no, the server aborts with an error</span></span><br><span class="line"><span class="comment"># and refuses to start. When the option is set to no, the user requires</span></span><br><span class="line"><span class="comment"># to fix the AOF file using the &quot;redis-check-aof&quot; utility before to restart</span></span><br><span class="line"><span class="comment"># the server.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that if the AOF file will be found to be corrupted in the middle</span></span><br><span class="line"><span class="comment"># the server will still exit with an error. This option only applies when</span></span><br><span class="line"><span class="comment"># Redis will try to read more data from the AOF file but not enough bytes</span></span><br><span class="line"><span class="comment"># will be found.</span></span><br><span class="line">aof-load-truncated <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################ LUA SCRIPTING  ###############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Max execution time of a Lua script in milliseconds.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If the maximum execution time is reached Redis will log that a script is</span></span><br><span class="line"><span class="comment"># still in execution after the maximum allowed time and will start to</span></span><br><span class="line"><span class="comment"># reply to queries with an error.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># When a long running script exceeds the maximum execution time only the</span></span><br><span class="line"><span class="comment"># SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be</span></span><br><span class="line"><span class="comment"># used to stop a script that did not yet called write commands. The second</span></span><br><span class="line"><span class="comment"># is the only way to shut down the server in the case a write command was</span></span><br><span class="line"><span class="comment"># already issued by the script but the user doesn&#x27;t want to wait for the natural</span></span><br><span class="line"><span class="comment"># termination of the script.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Set it to 0 or a negative value for unlimited execution without warnings.</span></span><br><span class="line"><span class="comment"># 一个Lua脚本最长的执行时间，单位为毫秒，如果为0或负数表示无限执行时间，默认为5000</span></span><br><span class="line">lua-time-limit 5000</span><br><span class="line"></span><br><span class="line"><span class="comment">################################ REDIS CLUSTER  ###############################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span></span><br><span class="line"><span class="comment"># WARNING EXPERIMENTAL: Redis Cluster is considered to be stable code, however</span></span><br><span class="line"><span class="comment"># in order to mark it as &quot;mature&quot; we need to wait for a non trivial percentage</span></span><br><span class="line"><span class="comment"># of users to deploy it in production.</span></span><br><span class="line"><span class="comment"># ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Normal Redis instances can&#x27;t be part of a Redis Cluster; only nodes that are</span></span><br><span class="line"><span class="comment"># started as cluster nodes can. In order to start a Redis instance as a</span></span><br><span class="line"><span class="comment"># cluster node enable the cluster support uncommenting the following:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># cluster-enabled yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Every cluster node has a cluster configuration file. This file is not</span></span><br><span class="line"><span class="comment"># intended to be edited by hand. It is created and updated by Redis nodes.</span></span><br><span class="line"><span class="comment"># Every Redis Cluster node requires a different cluster configuration file.</span></span><br><span class="line"><span class="comment"># Make sure that instances running in the same system do not have</span></span><br><span class="line"><span class="comment"># overlapping cluster configuration file names.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># cluster-config-file nodes-6379.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Cluster node timeout is the amount of milliseconds a node must be unreachable</span></span><br><span class="line"><span class="comment"># for it to be considered in failure state.</span></span><br><span class="line"><span class="comment"># Most other internal time limits are multiple of the node timeout.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># cluster-node-timeout 15000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A slave of a failing master will avoid to start a failover if its data</span></span><br><span class="line"><span class="comment"># looks too old.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># There is no simple way for a slave to actually have a exact measure of</span></span><br><span class="line"><span class="comment"># its &quot;data age&quot;, so the following two checks are performed:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1) If there are multiple slaves able to failover, they exchange messages</span></span><br><span class="line"><span class="comment">#    in order to try to give an advantage to the slave with the best</span></span><br><span class="line"><span class="comment">#    replication offset (more data from the master processed).</span></span><br><span class="line"><span class="comment">#    Slaves will try to get their rank by offset, and apply to the start</span></span><br><span class="line"><span class="comment">#    of the failover a delay proportional to their rank.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 2) Every single slave computes the time of the last interaction with</span></span><br><span class="line"><span class="comment">#    its master. This can be the last ping or command received (if the master</span></span><br><span class="line"><span class="comment">#    is still in the &quot;connected&quot; state), or the time that elapsed since the</span></span><br><span class="line"><span class="comment">#    disconnection with the master (if the replication link is currently down).</span></span><br><span class="line"><span class="comment">#    If the last interaction is too old, the slave will not try to failover</span></span><br><span class="line"><span class="comment">#    at all.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The point &quot;2&quot; can be tuned by user. Specifically a slave will not perform</span></span><br><span class="line"><span class="comment"># the failover if, since the last interaction with the master, the time</span></span><br><span class="line"><span class="comment"># elapsed is greater than:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   (node-timeout * slave-validity-factor) + repl-ping-slave-period</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># So for example if node-timeout is 30 seconds, and the slave-validity-factor</span></span><br><span class="line"><span class="comment"># is 10, and assuming a default repl-ping-slave-period of 10 seconds, the</span></span><br><span class="line"><span class="comment"># slave will not try to failover if it was not able to talk with the master</span></span><br><span class="line"><span class="comment"># for longer than 310 seconds.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># A large slave-validity-factor may allow slaves with too old data to failover</span></span><br><span class="line"><span class="comment"># a master, while a too small value may prevent the cluster from being able to</span></span><br><span class="line"><span class="comment"># elect a slave at all.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For maximum availability, it is possible to set the slave-validity-factor</span></span><br><span class="line"><span class="comment"># to a value of 0, which means, that slaves will always try to failover the</span></span><br><span class="line"><span class="comment"># master regardless of the last time they interacted with the master.</span></span><br><span class="line"><span class="comment"># (However they&#x27;ll always try to apply a delay proportional to their</span></span><br><span class="line"><span class="comment"># offset rank).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Zero is the only value able to guarantee that when all the partitions heal</span></span><br><span class="line"><span class="comment"># the cluster will always be able to continue.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># cluster-slave-validity-factor 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Cluster slaves are able to migrate to orphaned masters, that are masters</span></span><br><span class="line"><span class="comment"># that are left without working slaves. This improves the cluster ability</span></span><br><span class="line"><span class="comment"># to resist to failures as otherwise an orphaned master can&#x27;t be failed over</span></span><br><span class="line"><span class="comment"># in case of failure if it has no working slaves.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Slaves migrate to orphaned masters only if there are still at least a</span></span><br><span class="line"><span class="comment"># given number of other working slaves for their old master. This number</span></span><br><span class="line"><span class="comment"># is the &quot;migration barrier&quot;. A migration barrier of 1 means that a slave</span></span><br><span class="line"><span class="comment"># will migrate only if there is at least 1 other working slave for its master</span></span><br><span class="line"><span class="comment"># and so forth. It usually reflects the number of slaves you want for every</span></span><br><span class="line"><span class="comment"># master in your cluster.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Default is 1 (slaves migrate only if their masters remain with at least</span></span><br><span class="line"><span class="comment"># one slave). To disable migration just set it to a very large value.</span></span><br><span class="line"><span class="comment"># A value of 0 can be set but is useful only for debugging and dangerous</span></span><br><span class="line"><span class="comment"># in production.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># cluster-migration-barrier 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># By default Redis Cluster nodes stop accepting queries if they detect there</span></span><br><span class="line"><span class="comment"># is at least an hash slot uncovered (no available node is serving it).</span></span><br><span class="line"><span class="comment"># This way if the cluster is partially down (for example a range of hash slots</span></span><br><span class="line"><span class="comment"># are no longer covered) all the cluster becomes, eventually, unavailable.</span></span><br><span class="line"><span class="comment"># It automatically returns available as soon as all the slots are covered again.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># However sometimes you want the subset of the cluster which is working,</span></span><br><span class="line"><span class="comment"># to continue to accept queries for the part of the key space that is still</span></span><br><span class="line"><span class="comment"># covered. In order to do so, just set the cluster-require-full-coverage</span></span><br><span class="line"><span class="comment"># option to no.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># cluster-require-full-coverage yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># In order to setup your cluster make sure to read the documentation</span></span><br><span class="line"><span class="comment"># available at http://redis.io web site.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################## SLOW LOG ###################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The Redis Slow Log is a system to log queries that exceeded a specified</span></span><br><span class="line"><span class="comment"># execution time. The execution time does not include the I/O operations</span></span><br><span class="line"><span class="comment"># like talking with the client, sending the reply and so forth,</span></span><br><span class="line"><span class="comment"># but just the time needed to actually execute the command (this is the only</span></span><br><span class="line"><span class="comment"># stage of command execution where the thread is blocked and can not serve</span></span><br><span class="line"><span class="comment"># other requests in the meantime).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You can configure the slow log with two parameters: one tells Redis</span></span><br><span class="line"><span class="comment"># what is the execution time, in microseconds, to exceed in order for the</span></span><br><span class="line"><span class="comment"># command to get logged, and the other parameter is the length of the</span></span><br><span class="line"><span class="comment"># slow log. When a new command is logged the oldest one is removed from the</span></span><br><span class="line"><span class="comment"># queue of logged commands.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The following time is expressed in microseconds, so 1000000 is equivalent</span></span><br><span class="line"><span class="comment"># to one second. Note that a negative number disables the slow log, while</span></span><br><span class="line"><span class="comment"># a value of zero forces the logging of every command.</span></span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line"></span><br><span class="line"><span class="comment"># There is no limit to this length. Just be aware that it will consume memory.</span></span><br><span class="line"><span class="comment"># You can reclaim memory used by the slow log with SLOWLOG RESET.</span></span><br><span class="line">slowlog-max-len 128</span><br><span class="line"></span><br><span class="line"><span class="comment">################################ LATENCY MONITOR ##############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The Redis latency monitoring subsystem samples different operations</span></span><br><span class="line"><span class="comment"># at runtime in order to collect data related to possible sources of</span></span><br><span class="line"><span class="comment"># latency of a Redis instance.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Via the LATENCY command this information is available to the user that can</span></span><br><span class="line"><span class="comment"># print graphs and obtain reports.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The system only logs operations that were performed in a time equal or</span></span><br><span class="line"><span class="comment"># greater than the amount of milliseconds specified via the</span></span><br><span class="line"><span class="comment"># latency-monitor-threshold configuration directive. When its value is set</span></span><br><span class="line"><span class="comment"># to zero, the latency monitor is turned off.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default latency monitoring is disabled since it is mostly not needed</span></span><br><span class="line"><span class="comment"># if you don&#x27;t have latency issues, and collecting data has a performance</span></span><br><span class="line"><span class="comment"># impact, that while very small, can be measured under big load. Latency</span></span><br><span class="line"><span class="comment"># monitoring can easily be enabled at runtime using the command</span></span><br><span class="line"><span class="comment"># &quot;CONFIG SET latency-monitor-threshold &lt;milliseconds&gt;&quot; if needed.</span></span><br><span class="line">latency-monitor-threshold 0</span><br><span class="line"></span><br><span class="line"><span class="comment">############################# EVENT NOTIFICATION ##############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis can notify Pub/Sub clients about events happening in the key space.</span></span><br><span class="line"><span class="comment"># This feature is documented at http://redis.io/topics/notifications</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For instance if keyspace events notification is enabled, and a client</span></span><br><span class="line"><span class="comment"># performs a DEL operation on key &quot;foo&quot; stored in the Database 0, two</span></span><br><span class="line"><span class="comment"># messages will be published via Pub/Sub:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># PUBLISH __keyspace@0__:foo del</span></span><br><span class="line"><span class="comment"># PUBLISH __keyevent@0__:del foo</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># It is possible to select the events that Redis will notify among a set</span></span><br><span class="line"><span class="comment"># of classes. Every class is identified by a single character:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  K     Keyspace events, published with __keyspace@&lt;db&gt;__ prefix.</span></span><br><span class="line"><span class="comment">#  E     Keyevent events, published with __keyevent@&lt;db&gt;__ prefix.</span></span><br><span class="line"><span class="comment">#  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...</span></span><br><span class="line"><span class="comment">#  $     String commands</span></span><br><span class="line"><span class="comment">#  l     List commands</span></span><br><span class="line"><span class="comment">#  s     Set commands</span></span><br><span class="line"><span class="comment">#  h     Hash commands</span></span><br><span class="line"><span class="comment">#  z     Sorted set commands</span></span><br><span class="line"><span class="comment">#  x     Expired events (events generated every time a key expires)</span></span><br><span class="line"><span class="comment">#  e     Evicted events (events generated when a key is evicted for maxmemory)</span></span><br><span class="line"><span class="comment">#  A     Alias for g$lshzxe, so that the &quot;AKE&quot; string means all the events.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  The &quot;notify-keyspace-events&quot; takes as argument a string that is composed</span></span><br><span class="line"><span class="comment">#  of zero or multiple characters. The empty string means that notifications</span></span><br><span class="line"><span class="comment">#  are disabled.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  Example: to enable list and generic events, from the point of view of the</span></span><br><span class="line"><span class="comment">#           event name, use:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  notify-keyspace-events Elg</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  Example 2: to get the stream of the expired keys subscribing to channel</span></span><br><span class="line"><span class="comment">#             name __keyevent@0__:expired use:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  notify-keyspace-events Ex</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  By default all notifications are disabled because most users don&#x27;t need</span></span><br><span class="line"><span class="comment">#  this feature and the feature has some overhead. Note that if you don&#x27;t</span></span><br><span class="line"><span class="comment">#  specify at least one of K or E, no events will be delivered.</span></span><br><span class="line">notify-keyspace-events <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################### ADVANCED CONFIG ###############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Hashes are encoded using a memory efficient data structure when they have a</span></span><br><span class="line"><span class="comment"># small number of entries, and the biggest entry does not exceed a given</span></span><br><span class="line"><span class="comment"># threshold. These thresholds can be configured using the following directives.</span></span><br><span class="line"><span class="comment"># 当hash中包含超过指定元素个数并且最大的元素没有超过临界时，</span></span><br><span class="line"><span class="comment"># hash将以一种特殊的编码方式（大大减少内存使用）来存储，这里可以设置这两个临界值</span></span><br><span class="line">hash-max-ziplist-entries 512</span><br><span class="line">hash-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line"><span class="comment"># Similarly to hashes, small lists are also encoded in a special way in order</span></span><br><span class="line"><span class="comment"># to save a lot of space. The special representation is only used when</span></span><br><span class="line"><span class="comment"># you are under the following limits:</span></span><br><span class="line"><span class="comment"># list数据类型多少节点以下会采用去指针的紧凑存储格式。</span></span><br><span class="line"><span class="comment"># list数据类型节点值大小小于多少字节会采用紧凑存储格式。</span></span><br><span class="line">list-max-ziplist-entries 512</span><br><span class="line">list-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sets have a special encoding in just one case: when a set is composed</span></span><br><span class="line"><span class="comment"># of just strings that happen to be integers in radix 10 in the range</span></span><br><span class="line"><span class="comment"># of 64 bit signed integers.</span></span><br><span class="line"><span class="comment"># The following configuration setting sets the limit in the size of the</span></span><br><span class="line"><span class="comment"># set in order to use this special memory saving encoding.</span></span><br><span class="line"><span class="comment"># set数据类型内部数据如果全部是数值型，且包含多少节点以下会采用紧凑格式存储。</span></span><br><span class="line">set-max-intset-entries 512</span><br><span class="line"></span><br><span class="line"><span class="comment"># Similarly to hashes and lists, sorted sets are also specially encoded in</span></span><br><span class="line"><span class="comment"># order to save a lot of space. This encoding is only used when the length and</span></span><br><span class="line"><span class="comment"># elements of a sorted set are below the following limits:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># zsort数据类型多少节点以下会采用去指针的紧凑存储格式。</span></span><br><span class="line"><span class="comment"># zsort数据类型节点值大小小于多少字节会采用紧凑存储格式。</span></span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line"><span class="comment"># HyperLogLog sparse representation bytes limit. The limit includes the</span></span><br><span class="line"><span class="comment"># 16 bytes header. When an HyperLogLog using the sparse representation crosses</span></span><br><span class="line"><span class="comment"># this limit, it is converted into the dense representation.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># A value greater than 16000 is totally useless, since at that point the</span></span><br><span class="line"><span class="comment"># dense representation is more memory efficient.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The suggested value is ~ 3000 in order to have the benefits of</span></span><br><span class="line"><span class="comment"># the space efficient encoding without slowing down too much PFADD,</span></span><br><span class="line"><span class="comment"># which is O(N) with the sparse encoding. The value can be raised to</span></span><br><span class="line"><span class="comment"># ~ 10000 when CPU is not a concern, but space is, and the data set is</span></span><br><span class="line"><span class="comment"># composed of many HyperLogLogs with cardinality in the 0 - 15000 range.</span></span><br><span class="line">hll-sparse-max-bytes 3000</span><br><span class="line"></span><br><span class="line"><span class="comment"># Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in</span></span><br><span class="line"><span class="comment"># order to help rehashing the main Redis hash table (the one mapping top-level</span></span><br><span class="line"><span class="comment"># keys to values). The hash table implementation Redis uses (see dict.c)</span></span><br><span class="line"><span class="comment"># performs a lazy rehashing: the more operation you run into a hash table</span></span><br><span class="line"><span class="comment"># that is rehashing, the more rehashing &quot;steps&quot; are performed, so if the</span></span><br><span class="line"><span class="comment"># server is idle the rehashing is never complete and some more memory is used</span></span><br><span class="line"><span class="comment"># by the hash table.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The default is to use this millisecond 10 times every second in order to</span></span><br><span class="line"><span class="comment"># actively rehash the main dictionaries, freeing memory when possible.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If unsure:</span></span><br><span class="line"><span class="comment"># use &quot;activerehashing no&quot; if you have hard latency requirements and it is</span></span><br><span class="line"><span class="comment"># not a good thing in your environment that Redis can reply from time to time</span></span><br><span class="line"><span class="comment"># to queries with 2 milliseconds delay.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># use &quot;activerehashing yes&quot; if you don&#x27;t have such hard requirements but</span></span><br><span class="line"><span class="comment"># want to free memory asap when possible.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis将在每100毫秒时使用1毫秒的CPU时间来对redis的hash表进行重新hash，可以降低内存的使用</span></span><br><span class="line"><span class="comment"># 当你的使用场景中，有非常严格的实时性需要，不能够接受Redis时不时的对请求有2毫秒的延迟的话，把这项配置为no。</span></span><br><span class="line"><span class="comment"># 如果没有这么严格的实时性要求，可以设置为yes，以便能够尽可能快的释放内存</span></span><br><span class="line">activerehashing <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The client output buffer limits can be used to force disconnection of clients</span></span><br><span class="line"><span class="comment"># that are not reading data from the server fast enough for some reason (a</span></span><br><span class="line"><span class="comment"># common reason is that a Pub/Sub client can&#x27;t consume messages as fast as the</span></span><br><span class="line"><span class="comment"># publisher can produce them).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The limit can be set differently for the three different classes of clients:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># normal -&gt; normal clients including MONITOR clients</span></span><br><span class="line"><span class="comment"># slave  -&gt; slave clients</span></span><br><span class="line"><span class="comment"># pubsub -&gt; clients subscribed to at least one pubsub channel or pattern</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The syntax of every client-output-buffer-limit directive is the following:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># client-output-buffer-limit &lt;class&gt; &lt;hard limit&gt; &lt;soft limit&gt; &lt;soft seconds&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># A client is immediately disconnected once the hard limit is reached, or if</span></span><br><span class="line"><span class="comment"># the soft limit is reached and remains reached for the specified number of</span></span><br><span class="line"><span class="comment"># seconds (continuously).</span></span><br><span class="line"><span class="comment"># So for instance if the hard limit is 32 megabytes and the soft limit is</span></span><br><span class="line"><span class="comment"># 16 megabytes / 10 seconds, the client will get disconnected immediately</span></span><br><span class="line"><span class="comment"># if the size of the output buffers reach 32 megabytes, but will also get</span></span><br><span class="line"><span class="comment"># disconnected if the client reaches 16 megabytes and continuously overcomes</span></span><br><span class="line"><span class="comment"># the limit for 10 seconds.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default normal clients are not limited because they don&#x27;t receive data</span></span><br><span class="line"><span class="comment"># without asking (in a push way), but just after a request, so only</span></span><br><span class="line"><span class="comment"># asynchronous clients may create a scenario where data is requested faster</span></span><br><span class="line"><span class="comment"># than it can read.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Instead there is a default limit for pubsub and slave clients, since</span></span><br><span class="line"><span class="comment"># subscribers and slaves receive data in a push fashion.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Both the hard or the soft limit can be disabled by setting them to zero.</span></span><br><span class="line">client-output-buffer-limit normal 0 0 0</span><br><span class="line">client-output-buffer-limit slave 256mb 64mb 60</span><br><span class="line">client-output-buffer-limit pubsub 32mb 8mb 60</span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis calls an internal function to perform many background tasks, like</span></span><br><span class="line"><span class="comment"># closing connections of clients in timeout, purging expired keys that are</span></span><br><span class="line"><span class="comment"># never requested, and so forth.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Not all tasks are performed with the same frequency, but Redis checks for</span></span><br><span class="line"><span class="comment"># tasks to perform according to the specified &quot;hz&quot; value.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default &quot;hz&quot; is set to 10. Raising the value will use more CPU when</span></span><br><span class="line"><span class="comment"># Redis is idle, but at the same time will make Redis more responsive when</span></span><br><span class="line"><span class="comment"># there are many keys expiring at the same time, and timeouts may be</span></span><br><span class="line"><span class="comment"># handled with more precision.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The range is between 1 and 500, however a value over 100 is usually not</span></span><br><span class="line"><span class="comment"># a good idea. Most users should use the default of 10 and raise this up to</span></span><br><span class="line"><span class="comment"># 100 only in environments where very low latency is required.</span></span><br><span class="line">hz 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># When a child rewrites the AOF file, if the following option is enabled</span></span><br><span class="line"><span class="comment"># the file will be fsync-ed every 32 MB of data generated. This is useful</span></span><br><span class="line"><span class="comment"># in order to commit the file to the disk more incrementally and avoid</span></span><br><span class="line"><span class="comment"># big latency spikes.</span></span><br><span class="line"><span class="comment"># aof rewrite过程中,是否采取增量文件同步策略,默认为“yes”。 rewrite过程中,每32M数据进行一次文件同步,这样可以减少aof大文件写入对磁盘的操作次数</span></span><br><span class="line">aof-rewrite-incremental-fsync <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># redis数据存储</span></span><br><span class="line">redis的存储分为内存存储、磁盘存储和<span class="built_in">log</span>文件三部分，配置文件中有三个参数对其进行配置。</span><br><span class="line">save seconds updates，save配置，指出在多长时间内，有多少次更新操作，就将数据同步到数据文件。可多个条件配合，默认配置了三个条件。</span><br><span class="line">appendonly <span class="built_in">yes</span>/no ，appendonly配置，指出是否在每次更新操作后进行日志记录，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为redis本身同步数据文件是按上面的save条件来同步的，所以有的数据会在一段时间内只存在于内存中。</span><br><span class="line">appendfsync no/always/everysec ，appendfsync配置，no表示等操作系统进行数据缓存同步到磁盘，always表示每次更新操作后手动调用fsync()将数据写到磁盘，everysec表示每秒同步一次。</span><br></pre></td></tr></table></figure><hr><p><strong>本文参考自</strong></p><ul><li><a href="https://www.runoob.com/redis/redis-conf.html">菜鸟教程</a></li><li><a href="https://www.cnblogs.com/30go/p/9717610.html">redis详细配置文件</a></li><li><a href="https://blog.csdn.net/qq_30604989/article/details/81475564">Redis_配置文件（一）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis（六）SpringBoot整合Redis</title>
      <link href="/2020/10/25/Redis%EF%BC%88%E5%85%AD%EF%BC%89SpringBoot%E6%95%B4%E5%90%88Redis-redis%E5%85%ADspringboot%E6%95%B4%E5%90%88redis/"/>
      <url>/2020/10/25/Redis%EF%BC%88%E5%85%AD%EF%BC%89SpringBoot%E6%95%B4%E5%90%88Redis-redis%E5%85%ADspringboot%E6%95%B4%E5%90%88redis/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot整合Redis"><a href="#SpringBoot整合Redis" class="headerlink" title="SpringBoot整合Redis"></a>SpringBoot整合Redis</h1><h2 id="引入Pom"><a href="#引入Pom" class="headerlink" title="引入Pom"></a>引入Pom</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--操作Redis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Pom分析"><a href="#Pom分析" class="headerlink" title="Pom分析"></a>Pom分析</h4><p>spring-boot-starter-data-redis点进去时候发现，没有<code>jedis</code>的依赖</p><p>SpringBoot2.X之后，原来使用的<code>jedis</code>被替换成了<code>lettuce</code></p><p><strong>Jedis</strong>：采用的直连，多个线程操作的话。是不安全的，如果想要避免不安全的情况，可以使用Jedis Pool，但这是（BIO）阻塞IO</p><p><strong>Lettuce</strong>：采用Netty，实例可以再多个线程中进行共享，不存在线程不安全的情况！可以线程数量，更像NIO模式</p><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><p>首先在<code>SpringBoot</code>的自动配置的<code>spring.factories</code>里查看<img src="https://hopestation.top/upload/2020/11/image_1603607568411.png" alt="image.png"><br>点进去<code>RedisAutoConfiguration</code>这个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.boot.autoconfigure.data.redis;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration(</span></span><br><span class="line"><span class="meta">    proxyBeanMethods = false</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;RedisOperations.class&#125;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;RedisProperties.class&#125;)</span></span><br><span class="line"><span class="meta">@Import(&#123;LettuceConnectionConfiguration.class, JedisConnectionConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisAutoConfiguration</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RedisAutoConfiguration</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//当不存在redisTemplate这个Bean时，方法才生效</span></span><br><span class="line">    <span class="comment">//所以我们可以自己定义一个redisTemplate来替换这个默认的</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(</span></span><br><span class="line"><span class="meta">        name = &#123;&quot;redisTemplate&quot;&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="comment">//两个泛型都是&lt;Object, Object&gt;的类型，而我们经常使用的时&lt;STring, Object&gt;，所以一般还要强制类型转换</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> <span class="keyword">throws</span> UnknownHostException &#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="comment">//由于String时Redis中最常使用的类型，所以说单独提出来了一个Bean</span></span><br><span class="line">    <span class="keyword">public</span> StringRedisTemplate <span class="title function_">stringRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> <span class="keyword">throws</span> UnknownHostException &#123;</span><br><span class="line">        <span class="type">StringRedisTemplate</span> <span class="variable">template</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisTemplate</span>();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h2><p>在项目的测试类下编写如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hopestation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnection;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Redis02SpringbootApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入RedisTemplate</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;mykey1&quot;</span>,<span class="string">&quot;myalue&quot;</span>);</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;mykey2&quot;</span>,<span class="string">&quot;测试中文&quot;</span>);</span><br><span class="line">        System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;mykey1&quot;</span>));</span><br><span class="line">        System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;mykey2&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//--------------------输出--------------------</span></span><br><span class="line">myalue</span><br><span class="line">测试中文</span><br><span class="line"><span class="comment">//--------------------------------------------</span></span><br></pre></td></tr></table></figure><p>贴个图帮助理解一下:</p><p><img src="https://hopestation.top/upload/2020/11/image_1603608362407.png" alt="image.png"></p><p><img src="https://hopestation.top/upload/2020/11/image_1603608488536.png" alt="image.png"></p><h2 id="自定义RedisTemplate"><a href="#自定义RedisTemplate" class="headerlink" title="自定义RedisTemplate"></a>自定义RedisTemplate</h2><h3 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h3><p>但是，打开redis-cli，再查看所有的key，会发现刚刚插件插入的key乱码了</p><p><img src="https://hopestation.top/upload/2020/11/image_1603609769168.png" alt="image.png"></p><p>再查看源码找原因</p><p><img src="https://hopestation.top/upload/2020/11/image_1603609470666.png" alt="image.png"></p><p><img src="https://hopestation.top/upload/2020/11/image_1603609643797.png" alt="image.png"></p><p>由于默认是JDK序列化导致的</p><h3 id="set对象问题"><a href="#set对象问题" class="headerlink" title="set对象问题"></a>set对象问题</h3><p>创建一个User类（没有序列化）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hopestation.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再测试向String类型的Value存入Uesr对象（没有序列化）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Redis02SpringbootApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        <span class="comment">//真实的开发一般都使用JSON来传递对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;小明&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">        System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//--------------------输出--------------------</span></span><br><span class="line"><span class="comment">//报错</span></span><br><span class="line">org.springframework.data.redis.serializer.SerializationException: Cannot serialize; nested exception is org.springframework.core.serializer.support.SerializationFailedException: Failed to serialize object using DefaultSerializer; nested exception is java.lang.IllegalArgumentException: DefaultSerializer <span class="keyword">requires</span> a Serializable payload but received an object of type [top.hopestation.pojo.User]</span><br><span class="line"><span class="comment">//--------------------------------------------</span></span><br></pre></td></tr></table></figure><p>会报错，所以需要<strong>转换成JSON格式</strong>来存入，<strong>或者把对象进行序列化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.转换成JSON格式</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">    <span class="comment">//真实的开发一般都使用JSON来传递对象</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;小明&quot;</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(user);</span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;user&quot;</span>,jsonUser);</span><br><span class="line">    System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//--------------------输出--------------------</span></span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;小明&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="comment">//--------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.对象可序列化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123; <span class="comment">//实现学列化接口</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;小明&quot;</span>, <span class="number">3</span>);  </span><br><span class="line">        <span class="comment">//放入可以序列化的对象</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">        System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//--------------------输出--------------------</span></span><br><span class="line">User(name=小明, age=<span class="number">3</span>)</span><br><span class="line"><span class="comment">//--------------------------------------------</span></span><br></pre></td></tr></table></figure><h3 id="统一解决"><a href="#统一解决" class="headerlink" title="统一解决"></a>统一解决</h3><p>自定义一个RedisTemplate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hopestation.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//固定模板</span></span><br><span class="line">    <span class="comment">//自定义了一个RedisTemplate</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">myRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> <span class="keyword">throws</span> UnknownHostException &#123;</span><br><span class="line">        <span class="comment">//为了开发方便，一般直接使用&lt;String, Object&gt;</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置具体的序列化方式</span></span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="comment">//String的序列化</span></span><br><span class="line">        <span class="type">StringRedisSerializer</span> <span class="variable">stringRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="comment">//Key采用String的方式序列化</span></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">//Value采用JSON的方式序列化</span></span><br><span class="line">        template.setValueSerializer(jsonRedisSerializer);</span><br><span class="line">        <span class="comment">//HASH的Key采用String的方式序列化</span></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">//HASH的Value采用JSON的方式序列化</span></span><br><span class="line">        template.setHashValueSerializer(jsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="comment">//Key采用String的方式序列化</span></span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;小明&quot;</span>, <span class="number">3</span>);</span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;test&quot;</span>,user);</span><br><span class="line">    System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;test&quot;</span>));</span><br><span class="line">    System.out.println(redisTemplate.keys(<span class="string">&quot;*&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//--------------------输出--------------------</span></span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;小明&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">3</span>&#125;</span><br><span class="line">[json-user3]</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------------</span></span><br></pre></td></tr></table></figure><p><img src="https://hopestation.top/upload/2020/11/image_1603620593957.png" alt="image.png"></p><p><strong>封装RedisTemplate</strong></p><p>将一些常用的语句再次封装起来，更加方便我们的调用</p><p>这里就是封装后的工具类<code>RedisUtils</code>，之后就可以直接注入这个类来使用了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">RedisUtils</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// =============================common============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">expire</span><span class="params">(String key, <span class="type">long</span> time)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key 获取过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间(秒) 返回代表为永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getExpire</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasKey</span><span class="params">(String key)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 可以传一个值 或多个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">del</span><span class="params">(String... key)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (key != <span class="literal">null</span> &amp;&amp; key.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (key.length == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">                redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                redisTemplate.delete(CollectionUtils.arrayToList(key));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ============================String=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> key == <span class="literal">null</span> ? <span class="literal">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">set</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            redisTemplate.opsForValue().set(key, value);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) time要大于 如果time小于等于 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">set</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                set(key, value);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递增</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要增加几(大于)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">incr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;递增因子必须大于&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要减少几(小于)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">decr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;递减因子必须大于&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ================================Map=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashGet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">hget</span><span class="params">(String key, String item)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对应的多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title function_">hmget</span><span class="params">(String key)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="type">long</span> time)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                expire(key, time);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hset</span><span class="params">(String key, String item, Object value)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hset</span><span class="params">(String key, String item, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                expire(key, time);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash表中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 可以使多个 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hdel</span><span class="params">(String key, Object... item)</span> &#123;</span><br><span class="line"></span><br><span class="line">        redisTemplate.opsForHash().delete(key, item);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hHasKey</span><span class="params">(String key, String item)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要增加几(大于)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">hincr</span><span class="params">(String key, String item, <span class="type">double</span> by)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要减少记(小于)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">hdecr</span><span class="params">(String key, String item, <span class="type">double</span> by)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ============================set=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">sGet</span><span class="params">(String key)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据value从一个set中查询,是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">sHasKey</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据放入set缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sSet</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将set数据放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time   时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sSetAndTime</span><span class="params">(String key, <span class="type">long</span> time, Object... values)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">                <span class="keyword">return</span> count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取set缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sGetSetSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除值为value的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">setRemove</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForSet().remove(key, values);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ===============================list=================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束  到 -代表所有值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">lGet</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">lGetListSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引 获取list中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引 index&gt;=时，  表头， 第二个元素，依次类推；index&lt;时，-，表尾，-倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">lGetIndex</span><span class="params">(String key, <span class="type">long</span> index)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, List&lt;Object&gt; value)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, List&lt;Object&gt; value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lUpdateIndex</span><span class="params">(String key, <span class="type">long</span> index, Object value)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            redisTemplate.opsForList().set(key, index, value);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除N个值为value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 移除多少个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">lRemove</span><span class="params">(String key, <span class="type">long</span> count, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">remove</span> <span class="operator">=</span> redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">            <span class="keyword">return</span> remove;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> score 3</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>:zset,创建key及初试分数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">zAdd</span><span class="params">(String key, Object value, Integer score)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForZSet().add(key, value, Double.valueOf(score));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: zset 给定key，增加score</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>:2020-04-06</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val 2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> score 3</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">zAddScore</span><span class="params">(String key, Object val, Integer score)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForZSet().incrementScore(key, val, Double.valueOf(score));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; zRankByRange(String key, Integer start, Integer end)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; typedTuples = redisTemplate.opsForZSet().rangeWithScores(key, start, end);</span><br><span class="line">            <span class="keyword">return</span> typedTuples;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> Lee</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 删除给定key的给定范围内的值，如果begin,end传null则删除当前key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>:2020-04-06</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> begin 2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end 3</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">zDelKey</span><span class="params">(String key, Integer begin, Integer end)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (begin == <span class="literal">null</span> &amp;&amp; end == <span class="literal">null</span>)&#123;</span><br><span class="line">                redisTemplate.opsForZSet().remove(key);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                redisTemplate.opsForZSet().removeRange(key, begin, end);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> Lee</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 将前两个key下的值合并到第三个curKey中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>:2020-04-06</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> curKey 1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> yesterKey 2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beforeKey 3</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Return</span>: void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">zUniodAndStore</span><span class="params">(String beforeKey, String yesterKey, String curKey)</span>&#123;</span><br><span class="line">        redisTemplate.opsForZSet().unionAndStore(beforeKey, yesterKey, curKey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis（五 ）Jedis的使用</title>
      <link href="/2020/10/25/Redis%EF%BC%88%E4%BA%94%20%EF%BC%89Jedis%E7%9A%84%E4%BD%BF%E7%94%A8-redis%E4%BA%94jedis%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/10/25/Redis%EF%BC%88%E4%BA%94%20%EF%BC%89Jedis%E7%9A%84%E4%BD%BF%E7%94%A8-redis%E4%BA%94jedis%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>目录</strong><br>[TOC]</p><h2 id="Jedis是什么？"><a href="#Jedis是什么？" class="headerlink" title="Jedis是什么？"></a>Jedis是什么？</h2><p>Jedis是Redis官方推荐的Java连接开发工具。也就是说可以像在redis-cli写命令一样来操作redis，只不过在Java中变成了调用方法。而这些方法jedis都封装好了</p><h2 id="Jedis如何使用？"><a href="#Jedis如何使用？" class="headerlink" title="Jedis如何使用？"></a>Jedis如何使用？</h2><p>首先在IDEA创建一个maven项目</p><h3 id="引入Pom"><a href="#引入Pom" class="headerlink" title="引入Pom"></a>引入Pom</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入Jedis包--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  fastjson 后面会用到--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.62<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h3><p>首先要运行<strong>redis-server</strong><br><img src="http://hopestation.top/upload/2020/10/image-62e5d3f52ccb4688be26a01796a50ba1.png" alt="image.png"><br>然后创建一个<code>TestPing.java</code>文件</p><p><code>TestPing.java</code>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hopestation;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPing</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1. new Jedis对象</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//Jedis 所有的命令就是 之前学习的命令</span></span><br><span class="line">        System.out.println(jedis.ping());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果如下：</span></span><br><span class="line"><span class="comment">//-------</span></span><br><span class="line">PONG <span class="comment">//说明了连接redis</span></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line"><span class="comment">//-------</span></span><br></pre></td></tr></table></figure><h3 id="测试命令"><a href="#测试命令" class="headerlink" title="测试命令"></a>测试命令</h3><p>这里的jedis的方法，就是对应着redis-cli（客户端）的一个一个命令。<br><img src="http://hopestation.top/upload/2020/10/image-7623d2ade73342789a7675550e9eabdd.png" alt="image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hopestation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPing</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1. new Jedis对象</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//Jedis 所有的命令就是 之前学习的命令</span></span><br><span class="line">        System.out.println(jedis.ping());</span><br><span class="line">        System.out.println(<span class="string">&quot;判断某个键是否存在==&gt;&quot;</span> + jedis.exists(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;新增测试1==&gt;&quot;</span> + jedis.set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;hope&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;新增测试2==&gt;&quot;</span> + jedis.set(<span class="string">&quot;age&quot;</span>,<span class="string">&quot;15&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;所有的键==&gt;&quot;</span> + jedis.keys(<span class="string">&quot;*&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;删除键&quot;</span> + jedis.del(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;判断某个键是否存在==&gt;&quot;</span> + jedis.exists(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;新增测试3==&gt;&quot;</span> + jedis.set(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;ceshi&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;新增测试4==&gt;&quot;</span> + jedis.set(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;v1&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;获取一个随机key==&gt;&quot;</span> + jedis.randomKey());</span><br><span class="line">        System.out.println(<span class="string">&quot;判断某个键是否存在==&gt;&quot;</span> + jedis.rename(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;newk1&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;获取改后的key==&gt;&quot;</span> + jedis.get(<span class="string">&quot;newk1&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;返回当前数据库的key的数目==&gt;&quot;</span> + jedis.dbSize());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果如下：</span></span><br><span class="line"><span class="comment">//-------</span></span><br><span class="line">PONG</span><br><span class="line">判断某个键是否存在==&gt;<span class="literal">false</span></span><br><span class="line">新增测试<span class="number">1</span>==&gt;OK</span><br><span class="line">新增测试<span class="number">2</span>==&gt;OK</span><br><span class="line">所有的键==&gt;[name, key:__rand_int__, counter:__rand_int__, money, age, mylist, out]</span><br><span class="line">删除键<span class="number">1</span></span><br><span class="line">判断某个键是否存在==&gt;<span class="literal">false</span></span><br><span class="line">新增测试<span class="number">3</span>==&gt;OK</span><br><span class="line">新增测试<span class="number">4</span>==&gt;OK</span><br><span class="line">获取一个随机key==&gt;counter:__rand_int__</span><br><span class="line">判断某个键是否存在==&gt;OK</span><br><span class="line">获取改后的key==&gt;v1</span><br><span class="line">返回当前数据库的key的数目==&gt;<span class="number">8</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line"><span class="comment">//-------</span></span><br></pre></td></tr></table></figure><h3 id="测试事务"><a href="#测试事务" class="headerlink" title="测试事务"></a>测试事务</h3><h4 id="正常情况"><a href="#正常情况" class="headerlink" title="正常情况"></a>正常情况</h4><p>事务会进行下去，并从结果能get到，事务操作的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hopestation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestTransaction</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1. new Jedis对象</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//新建一个JSON字符串</span></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        jsonObject.put(<span class="string">&quot;helo&quot;</span>,<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;hopestation&quot;</span>);</span><br><span class="line">        System.out.println(jedis.ping());</span><br><span class="line">        <span class="comment">//这里还可以加上jedis.watch(&quot;...&quot;)</span></span><br><span class="line">        <span class="type">Transaction</span> <span class="variable">tran</span> <span class="operator">=</span> jedis.multi();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> jsonObject.toJSONString();</span><br><span class="line">            tran.set(<span class="string">&quot;user1&quot;</span>,jsonStr);</span><br><span class="line">            tran.set(<span class="string">&quot;user2&quot;</span>,jsonStr);</span><br><span class="line">            tran.exec();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            tran.discard();</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(jedis.get(<span class="string">&quot;user1&quot;</span>));</span><br><span class="line">            System.out.println(jedis.get(<span class="string">&quot;user2&quot;</span>));</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="comment">//-------</span></span><br><span class="line">PONG</span><br><span class="line">&#123;<span class="string">&quot;helo&quot;</span>:<span class="string">&quot;world&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;hopestation&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;helo&quot;</span>:<span class="string">&quot;world&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;hopestation&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line"><span class="comment">//-------</span></span><br></pre></td></tr></table></figure><h4 id="出错情况"><a href="#出错情况" class="headerlink" title="出错情况"></a>出错情况</h4><p>下面我们故意在<code>EXEC</code>前，让事务报错，那么会在<code>catch</code><br>里执行<code>DISCARD</code>事务会被丢弃，所以结果中获取不到值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> jsonObject.toJSONString();</span><br><span class="line">            tran.set(<span class="string">&quot;user3&quot;</span>,jsonStr);</span><br><span class="line">            tran.set(<span class="string">&quot;user4&quot;</span>,jsonStr);</span><br><span class="line">            <span class="comment">//故意在EXEC前，让事务报错</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">            tran.exec();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            tran.discard();</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(jedis.get(<span class="string">&quot;user3&quot;</span>));</span><br><span class="line">            System.out.println(jedis.get(<span class="string">&quot;user4&quot;</span>));</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="comment">//-------</span></span><br><span class="line">PONG</span><br><span class="line">java.lang.ArithmeticException: / by zero</span><br><span class="line">at top.hopestation.TestTransaction.main(TestTransaction.java:<span class="number">21</span>)</span><br><span class="line"><span class="literal">null</span></span><br><span class="line"><span class="literal">null</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis（四）实现乐观锁</title>
      <link href="/2020/10/24/Redis%EF%BC%88%E5%9B%9B%EF%BC%89%E5%AE%9E%E7%8E%B0%E4%B9%90%E8%A7%82%E9%94%81-redis%E5%9B%9B%E5%AE%9E%E7%8E%B0%E4%B9%90%E8%A7%82%E9%94%81/"/>
      <url>/2020/10/24/Redis%EF%BC%88%E5%9B%9B%EF%BC%89%E5%AE%9E%E7%8E%B0%E4%B9%90%E8%A7%82%E9%94%81-redis%E5%9B%9B%E5%AE%9E%E7%8E%B0%E4%B9%90%E8%A7%82%E9%94%81/</url>
      
        <content type="html"><![CDATA[<p><strong>目录</strong></p><p>[TOC]</p><hr><p>首先介绍为什么加锁，什么悲观锁、乐观锁，然后再说明redis为什么能实现乐观锁？</p><h2 id="为什么要加锁？"><a href="#为什么要加锁？" class="headerlink" title="为什么要加锁？"></a>为什么要加锁？</h2><h3 id="叨咕一句"><a href="#叨咕一句" class="headerlink" title="叨咕一句"></a>叨咕一句</h3><p>在使用一些工具、功能之前，都要明白他有什么作用和意义。<br>不能为了学习而学习，为了使用而使用，也不能会了一样工具就到处使用。<br>合适才是最好的，应该是为了解决某些问题而引入使用。这也是一种架构思想</p><h3 id="锁存在的意义是什么呢"><a href="#锁存在的意义是什么呢" class="headerlink" title="锁存在的意义是什么呢"></a>锁存在的意义是什么呢</h3><p>模拟一种场景：</p><p>小明：代表——&gt;<strong>A线程</strong>或者说A客户端</p><p>小强：代表——&gt;<strong>B线程</strong>或者说B客户端</p><p>他们是好朋友，共享一个银行账户，想去坐火车去存钱，目前只有一张火车票了：代表——&gt;<strong>共享资源</strong></p><p><strong>在不加锁的情况下</strong>：</p><p>小明和小强同时查询余票，他们都查询到了一张余票，然后几乎同时购买，结构全购买成功了，所以他们挤着同一个座位…（<strong>错误一</strong>）</p><p>然后去银行存款，他们分别在两家银行存钱，都查询到账户余额是500，于是小明存了500（余额变成1000），小强在另一家银行存了100，银行操作成功结果 原来的1000被600<strong>覆盖</strong>掉了（<strong>错误二</strong>）</p><p><strong>并发环境下典型的冲突</strong>：</p><ul><li><p><strong>脏读</strong>（错误一）：当一个事务读取其它完成一半事务的记录时，就会发生脏读取。例如：用户A,B看到的值都是1，用户B把值改为0，用户A读到的值仍为1。</p></li><li><p><strong>丢失更新</strong>（错误二）：一个事务的更新覆盖了其它事务的更新结果，就是所谓的更新丢失。例如：用户A把值从500改为1000，用户B把值从500改为600，则用户A丢失了他的更新。</p></li></ul><p><strong>对于这种现象，就可以通过加锁来解决</strong>，比如使用（java中的synchronized，悲观锁）</p><ol><li>A、B读取的值都是1，那么在A修改值为0的时间范围内，先<strong>加锁</strong>，B此时是不能修改这个值的。</li><li>在A修改完值等于0后，会<strong>释放锁</strong></li><li>然后B才能修改值，B再加锁，并修改值等于-1，然后释放锁</li></ol><h2 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h2><p>总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁（<strong>共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程</strong>）。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。Java中<code>synchronized</code>和<code>ReentrantLock</code>等独占锁就是悲观锁思想的实现。</p><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><p>总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号机制和CAS算法实现。<strong>乐观锁适用于多读的应用类型，这样可以提高吞吐量</strong>，像数据库提供的类似于<strong>write_condition机制</strong>，其实都是提供的乐观锁。在Java中<code>java.util.concurrent.atomic</code>包下面的原子变量类就是使用了乐观锁的一种实现方式<strong>CAS</strong>实现的。</p><h2 id="两种锁的使用场景"><a href="#两种锁的使用场景" class="headerlink" title="两种锁的使用场景"></a>两种锁的使用场景</h2><p>从上面对两种锁的介绍，我们知道两种锁各有优缺点，不可认为一种好于另一种，像<strong>乐观锁适用于写比较少的情况下（多读场景）</strong>，即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。但如果是多写的情况，一般会经常产生冲突，这就会导致上层应用会不断的进行retry，这样反倒是降低了性能，所以<strong>一般多写的场景下用悲观锁就比较合适。</strong></p><h2 id="Redis的Watch命令"><a href="#Redis的Watch命令" class="headerlink" title="Redis的Watch命令"></a>Redis的Watch命令</h2><h3 id="watch有什么作用？"><a href="#watch有什么作用？" class="headerlink" title="watch有什么作用？"></a>watch有什么作用？</h3><p>Redis Watch 命令用于<strong>监视</strong>一个(或多个) key ，如果在<strong>事务执行（EXEC）之前</strong>这个(或这些) key <strong>被其他命令所改动</strong>，那么事务将<strong>被打断</strong>。</p><p>基于<code>watch</code>命令的机制，就可以实现乐观锁的功能</p><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WATCH key [key ...]</span><br></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ol><li>客户端A，首先执行:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> money 100  <span class="comment"># 设置money 为100</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch money  <span class="comment"># 监视 money 对象</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi <span class="comment"># 开启事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incrby money 20 <span class="comment"># 增加 money 20 ，存入队列</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get money <span class="comment"># 获取 money ，存入队列</span></span><br><span class="line">QUEUED</span><br><span class="line"><span class="comment"># 先不执行事务</span></span><br></pre></td></tr></table></figure><ol start="2"><li>客户端B:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 客户端B 在 客户端A还没有执行事务前，设置money值为500</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> money 500 </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get money <span class="comment"># 查看 money</span></span><br><span class="line"><span class="string">&quot;500&quot;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>客户端A，再执行:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 然后 客户端A 再执行职务，</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span></span><br><span class="line">(nil) <span class="comment"># 执行失败</span></span><br></pre></td></tr></table></figure><blockquote><p>以上面代码为例：如果事务正常执行了，想要下次的事务还监视这个key的话，需要再写一遍<code>watch money</code>,然后再开启事务<code>multi</code>，也就是要成对出现</p></blockquote><h2 id="UNWATCH"><a href="#UNWATCH" class="headerlink" title="UNWATCH"></a>UNWATCH</h2><p>取消 <a href="http://redisdoc.com/transaction/watch.html#watch">WATCH</a> 命令对所有 key 的监视。</p><p>如果在执行 <a href="http://redisdoc.com/transaction/watch.html#watch">WATCH</a> 命令之后， <a href="http://redisdoc.com/transaction/exec.html#exec">EXEC</a> 命令或 <a href="http://redisdoc.com/transaction/discard.html#discard">DISCARD</a> 命令先被执行了的话，那么就不需要再执行 <a href="http://redisdoc.com/transaction/unwatch.html#unwatch">UNWATCH</a> 了。</p><p>因为 <a href="http://redisdoc.com/transaction/exec.html#exec">EXEC</a> 命令会执行事务，因此 <a href="http://redisdoc.com/transaction/watch.html#watch">WATCH</a> 命令的效果已经产生了；而 <a href="http://redisdoc.com/transaction/discard.html#discard">DISCARD</a> 命令在取消事务的同时也会取消所有对 key 的监视，因此这两个命令执行之后，就没有必要执行 <a href="http://redisdoc.com/transaction/unwatch.html#unwatch">UNWATCH</a> 了。</p><hr><p>参考文章：</p><ul><li><a href="https://blog.csdn.net/qq_34337272/article/details/81072874">面试必备之乐观锁与悲观锁</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ribbon、Feign是什么？</title>
      <link href="/2020/10/24/Ribbon%E3%80%81Feign%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F-ribbonfeign%E6%98%AF%E4%BB%80%E4%B9%88/"/>
      <url>/2020/10/24/Ribbon%E3%80%81Feign%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F-ribbonfeign%E6%98%AF%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<p><strong>目录</strong><br>[TOC]</p><h2 id="什么是负载均衡？"><a href="#什么是负载均衡？" class="headerlink" title="什么是负载均衡？"></a>什么是负载均衡？</h2><p><img src="http://hopestation.top/upload/2020/10/loadbalance-95445684967c44cf9b40e95e584ebbc2.png" alt="loadbalance.png"></p><h2 id="什么是Ribbon"><a href="#什么是Ribbon" class="headerlink" title="什么是Ribbon?"></a>什么是Ribbon?</h2><h3 id="一句话概括"><a href="#一句话概括" class="headerlink" title="一句话概括"></a>一句话概括</h3><p>微服务之间的<strong>负载均衡调用</strong>工具</p><blockquote><p>即A服务可以通过Ribbon（进行负载均衡调用），来请求B服务</p></blockquote><h3 id="详细"><a href="#详细" class="headerlink" title="详细"></a>详细</h3><p>Spring Cloud Ribbon是一个基于HTTP和TCP的客户端负载均衡工具，它基于Netflix Ribbon实现。通过Spring Cloud的封装，可以让我们轻松地将面向服务的REST模版请求自动转换成客户端负载均衡的服务调用。Spring Cloud Ribbon虽然只是一个工具类框架，它不像服务注册中心、配置中心、API网关那样需要独立部署，但是它几乎存在于每一个Spring Cloud构建的微服务和基础设施中。因为微服务间的调用，API网关的请求转发等内容，实际上都是通过Ribbon来实现的，包括后续我们将要介绍的Feign，它也是基于Ribbon实现的工具。</p><h3 id="如何使用Ribbon？"><a href="#如何使用Ribbon？" class="headerlink" title="如何使用Ribbon？"></a>如何使用Ribbon？</h3><p>Ribbon一般是基于SpringCloud来使用的，主要分为两大步即可：</p><ol><li><p>服务提供者只需要启动多个服务实例并注册到一个注册中心或是多个相关联的服务注册中心。<br>（本篇主要介绍Ribbon，这里不详细解释）</p></li><li><p>服务消费者直接通过调用被@LoadBalanced注解修饰过的RestTemplate来实现面向服务的接口调用。<br>这里具体分为三小步<br>（下面是简单的调用设计，不同的设计和配置也会导致代码不同）<br>2.1 主程序入口类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RibbonTESTApplication</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">   SpringApplicationBuilder(RibbonTESTApplication .class);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span>  <span class="comment">// 将返回RestTemplate 的放到容器中</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span>  <span class="comment">// 标注此注解后，RestTemplate就具有了客户端负载均衡能力</span></span><br><span class="line">    RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.2 ProductClientRibbon Ribbon客户端（实际调用其他服务的类）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductClientRibbon</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> List&lt;Product&gt; <span class="title function_">listProdcuts</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http://PRODUCT-DATA-SERVICE/products&quot;</span>,List.class);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.2 服务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span> </span><br><span class="line">    ProductClientRibbon productClientRibbon;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Product&gt; <span class="title function_">listProducts</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> productClientRibbon.listProdcuts();</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面介绍了三小步。再看一下图来梳理一下调用的过程<br><img src="http://hopestation.top/upload/2020/10/ribbon1-cddf6ec74fc44a13a15258adba8bde6d.png" alt="ribbon1.png"></p></li></ol><p>以上就是对Ribbon的简单介绍，总结一下就是：</p><ol><li>向注册中心注册服务</li><li>配置restTemplate</li><li>用restTemplate进行调用其他服务</li></ol><h2 id="什么是Feign"><a href="#什么是Feign" class="headerlink" title="什么是Feign?"></a>什么是Feign?</h2><h3 id="一句话概括-1"><a href="#一句话概括-1" class="headerlink" title="一句话概括"></a>一句话概括</h3><p>Feign是在Ribbon上进行了改进，采用接口+注解的方式来进行调用</p><h3 id="详细-1"><a href="#详细-1" class="headerlink" title="详细"></a>详细</h3><p>Feign 是一个声明式的 Web Service 客户端。它的出现使开发 Web Service 客户端变得很简单。使用 Feign 只需要创建一个接口加上对应的注解，比如：@FeignClient 注解。 Feign 有可插拔的注解，包括 Feign 注解和 AX-RS 注解。Feign 也支持编码器和解码器，Spring Cloud Open Feign 对 Feign 进行增强支持 Spring Mvc 注解，可以像 Spring Web 一样使用 HttpMessageConverters 等。</p><p>  Feign 是一种声明式、模板化的 HTTP 客户端。在 Spring Cloud 中使用 Feign，可以做到使用 HTTP 请求访问远程服务，就像调用本地方法一样的，开发者完全感知不到这是在调用远程方法，更感知不到在访问 HTTP 请求。接下来介绍一下 Feign 的特性，具体如下：</p><p>可插拔的注解支持，包括 Feign 注解和AX-RS注解。<br>支持可插拔的 HTTP 编码器和解码器。<br>支持 Hystrix 和它的 Fallback。<br>支持 Ribbon 的负载均衡。<br>支持 HTTP 请求和响应的压缩。Feign 是一个声明式的 WebService 客户端，它的目的就是让 Web Service 调用更加简单。它整合了 Ribbon 和 Hystrix，从而不需要开发者针对 Feign 对其进行整合。Feign 还提供了 HTTP 请求的模板，通过编写简单的接口和注解，就可以定义好 HTTP 请求的参数、格式、地址等信息。Feign 会完全代理 HTTP 的请求，在使用过程中我们只需要依赖注入 Bean，然后调用对应的方法传递参数即可。</p><h3 id="如何使用Feign？"><a href="#如何使用Feign？" class="headerlink" title="如何使用Feign？"></a>如何使用Feign？</h3><ol><li>引入pom<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>启动类加入如下注解<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启 Feign 扫描支持</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span> </span><br></pre></td></tr></table></figure></li><li>Feign接口编写<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(name = &quot;github-client&quot;, url = &quot;https://api.github.com&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GitHubFeign</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/search/repositories&quot;,</span></span><br><span class="line"><span class="meta">    method = RequestMethod.GET,produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</span></span><br><span class="line">    String <span class="title function_">searchRepo</span><span class="params">(<span class="meta">@RequestParam(&quot;q&quot;)</span> String q)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>入口Controller编写<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &quot;/github&quot;,</span></span><br><span class="line"><span class="meta">        produces = MediaType.APPLICATION_JSON_UTF8_VALUE</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GitHubController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> GitHubFeign gitHubFeign;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/search/repositories&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    String <span class="title function_">searchRepo</span><span class="params">(<span class="meta">@RequestParam(&quot;q&quot;)</span> String q)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gitHubFeign.searchRepo(q);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>再来用图梳理一下调用的过程<br><img src="http://hopestation.top/upload/2020/10/feign1-3dbf078d3c954560b7328e60dbe1ae9a.png" alt="feign1.png"></li></ol><h3 id="FeignClient-注解"><a href="#FeignClient-注解" class="headerlink" title="@FeignClient 注解"></a>@FeignClient 注解</h3><p>name：指定 Feign Client 的名称，如果项目使用了 Ribbon，name 属性会作为微服务的名称，用于服务发现。<br>url：url 一般用于调试，可以手动指定 @FeignClient 调用的地址。<br>decode404：当发生404错误时，如果该字段为 true，会调用 decoder 进行解码，否则抛出 FeignException。<br>configuration：Feign 配置类，可以自定义 Feign 的 Encoder、Decoder、LogLevel、Contract。<br>fallback：定义容错的处理类，当调用远程接口失败或超时时，会调用对应接口的容错逻辑，fallback 指定的类必须实现 @FeignClient 标记的接口。<br>fallbackFactory：工厂类，用于生成 fallback 类示例，通过这个属性我们可以实现每个接口通用的容错逻辑，减少重复的代码。<br>path：定义当前 FeignClient 的统一前缀。</p><h2 id="权限问题"><a href="#权限问题" class="headerlink" title="权限问题"></a>权限问题</h2><p>后面再补充..</p><p>文章由本人总结，并参考了以下博客：<br><a href="https://www.jianshu.com/p/1bd66db5dc46">Ribbon详解</a><br><a href="https://blog.csdn.net/qq_40738872/article/details/88410083?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param">spring cloud各个微服务之间如何相互调用（Feign、Feign带token访问服务接口）</a><br><a href="https://how2j.cn/k/springcloud/springcloud-ribbon/2040.html">HowJ的Ribbon和Feign教程</a></p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis（三）事务</title>
      <link href="/2020/10/22/Redis%EF%BC%88%E4%B8%89%EF%BC%89%E4%BA%8B%E5%8A%A1-redis%E4%B8%89%E4%BA%8B%E5%8A%A1/"/>
      <url>/2020/10/22/Redis%EF%BC%88%E4%B8%89%EF%BC%89%E4%BA%8B%E5%8A%A1-redis%E4%B8%89%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p><strong>目录</strong><br>[TOC]</p><h2 id="事务概念"><a href="#事务概念" class="headerlink" title="事务概念"></a>事务概念</h2><h3 id="关系型数据库的事务"><a href="#关系型数据库的事务" class="headerlink" title="关系型数据库的事务"></a>关系型数据库的事务</h3><p>比如Mysql是支持事务的，要么同时成功，要么同时失败，一组操作具有原子性！</p><h3 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h3><p>单条命令是保证原子性的，但一组命令不保证原子性！</p><p>Redis事务没有隔离级别的概念！</p><p>所有的命令在事务中，并没有直接被执行！只有发起执行命令的时候才会执行！</p><h2 id="如何执行事务？"><a href="#如何执行事务？" class="headerlink" title="如何执行事务？"></a>如何执行事务？</h2><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>先看一个事务的例子，对于Redis事务有一个实际又具体的理解</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MULTI ：开始事务</span></span><br><span class="line">redis 127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line"><span class="comment"># 下面将这4个命令放入队列</span></span><br><span class="line"><span class="comment"># 设置 book-name 这个key 值是 HelloRedis</span></span><br><span class="line">redis 127.0.0.1:6379&gt; <span class="built_in">set</span> book-name <span class="string">&quot;HelloRedis&quot;</span></span><br><span class="line">QUEUED <span class="comment"># 命令入队</span></span><br><span class="line"><span class="comment"># 获取 book-name</span></span><br><span class="line">redis 127.0.0.1:6379&gt; get book-name</span><br><span class="line">QUEUED</span><br><span class="line"><span class="comment"># 存一个set </span></span><br><span class="line">redis 127.0.0.1:6379&gt; sadd tag <span class="string">&quot;C++&quot;</span> <span class="string">&quot;Programming&quot;</span> <span class="string">&quot;Mastering Series&quot;</span></span><br><span class="line">QUEUED</span><br><span class="line"><span class="comment"># 查看 tag 里有哪些元素</span></span><br><span class="line">redis 127.0.0.1:6379&gt; smembers tag</span><br><span class="line">QUEUED</span><br><span class="line"><span class="comment"># EXEC ：执行事务</span></span><br><span class="line">redis 127.0.0.1:6379&gt; EXEC</span><br><span class="line">1) OK</span><br><span class="line">2) <span class="string">&quot;HelloRedis&quot;</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 3</span><br><span class="line">4) 1) <span class="string">&quot;Mastering Series&quot;</span></span><br><span class="line">   2) <span class="string">&quot;C++&quot;</span></span><br><span class="line">   3) <span class="string">&quot;Programming&quot;</span></span><br></pre></td></tr></table></figure><h3 id="事务经历的三个阶段"><a href="#事务经历的三个阶段" class="headerlink" title="事务经历的三个阶段"></a>事务经历的三个阶段</h3><p>一个事务从开始到执行会经历以下三个阶段：</p><ul><li>开始事务：MULTI</li><li>命令入队：QUEUED</li><li>执行事务：EXEC</li></ul><p>Redis 事务可以一次执行多个命令， 并且带有以下三个重要的保证：</p><ul><li>批量操作在发送 EXEC 命令前被放入队列缓存。</li><li>收到 EXEC 命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行。</li><li>在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。</li></ul><h3 id="如何结束事务"><a href="#如何结束事务" class="headerlink" title="如何结束事务?"></a>如何结束事务?</h3><p>不执行<code>EXEC</code>,而执行<code>DISCARD</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi <span class="comment"># 开启事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k4 v4 <span class="comment"># 存入k4</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; discard</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k4 </span><br><span class="line">(nil) <span class="comment"># 不存在k4,说明上面的事务没有执行</span></span><br></pre></td></tr></table></figure><h3 id="出错了还会执行吗"><a href="#出错了还会执行吗" class="headerlink" title="出错了还会执行吗?"></a>出错了还会执行吗?</h3><p><strong>编译型异常</strong>：代码有问题，命令写错了，事务中所有的命令都不会执行!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看显示当前库没有数据</span></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line"><span class="comment"># 开启事务</span></span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1 <span class="comment"># set一个值</span></span><br><span class="line">QUEUED</span><br><span class="line"><span class="comment"># 故意写错语法</span></span><br><span class="line">127.0.0.1:6379&gt; getset k3</span><br><span class="line">(error) ERR wrong number of arguments <span class="keyword">for</span> <span class="string">&#x27;getset&#x27;</span> <span class="built_in">command</span> <span class="comment"># 提示错误</span></span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span> <span class="comment"># 执行后 提示事务被丢弃 由于之前的错误</span></span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class="line">127.0.0.1:6379&gt; get k1 <span class="comment"># 再次确认不存在k1,说明事务没有执行</span></span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><p><strong>运行时异常</strong>：如果队列中执行时错误(执行时才发现命令执行有问题),那么其他命令还是可以正常执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启事务</span></span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 <span class="string">&quot;v1&quot;</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incr k1 <span class="comment"># 由于k1是字符串类型的,不能自增,所以执行时会出错</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">QUEUED</span><br><span class="line"><span class="comment"># 执行事务</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span></span><br><span class="line">1) OK</span><br><span class="line">2) (error) ERR value is not an <span class="built_in">integer</span> or out of range</span><br><span class="line">3) OK</span><br><span class="line">4) <span class="string">&quot;v2&quot;</span></span><br><span class="line">5) <span class="string">&quot;v1&quot;</span></span><br><span class="line"><span class="comment"># 可以看出 除了第二条命令,都可以正常执行</span></span><br></pre></td></tr></table></figure><h2 id="再次理解"><a href="#再次理解" class="headerlink" title="再次理解"></a>再次理解</h2><p>单个 Redis 命令的执行是原子性的，但 Redis 没有在事务上增加任何维持原子性的机制，所以 Redis 事务的执行并不是原子性的。</p><p>事务可以理解为一个打包的批量执行脚本，但批量指令并非原子化的操作，中间某条指令的失败不会导致前面已做指令的回滚，也不会造成后续的指令不做。</p><blockquote><p><a href="http://www.redis.cn/commands/exec.html">EXEC</a> 命令负责触发并执行事务中的所有命令：</p><ul><li>如果客户端在使用 <a href="http://www.redis.cn/commands/multi.html">MULTI</a> 开启了一个事务之后，却因为断线而没有成功执行 <a href="http://www.redis.cn/commands/exec.html">EXEC</a> ，那么事务中的所有命令都不会被执行。</li><li>另一方面，如果客户端成功在开启事务之后执行 <a href="http://www.redis.cn/commands/exec.html">EXEC</a> ，那么事务中的所有命令都会被执行。</li></ul><p>当使用 AOF 方式做持久化的时候， Redis 会使用单个 write(2) 命令将事务写入到磁盘中。</p><p>然而，如果 Redis 服务器因为某些原因被管理员杀死，或者遇上某种硬件故障，那么可能只有部分事务命令会被成功写入到磁盘中。</p><p>如果 Redis 在重新启动时发现 AOF 文件出了这样的问题，那么它会退出，并汇报一个错误。</p><p>使用<code>redis-check-aof</code>程序可以修复这一问题：它会移除 AOF 文件中不完整事务的信息，确保服务器可以顺利启动。</p></blockquote><p>关于事务更多知识：可以参考 <a href="http://www.redis.cn/topics/transactions.html">官方文档</a>和<a href="https://www.runoob.com/redis/redis-transactions.html">菜鸟教程</a></p><hr><ul><li><a href="http://hopestation.top/tags/redis">查看Redis归档</a></li><li>上一篇：<a href="http://hopestation.top/archives/redis2">Redis（二）介绍了redis基本操作、数据类型 </a></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap的遍历</title>
      <link href="/2020/10/22/HashMap%E7%9A%84%E9%81%8D%E5%8E%86-hashmap%E7%9A%84%E9%81%8D%E5%8E%86/"/>
      <url>/2020/10/22/HashMap%E7%9A%84%E9%81%8D%E5%8E%86-hashmap%E7%9A%84%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a>遍历方式</h2><h3 id="EntrySet（推荐）"><a href="#EntrySet（推荐）" class="headerlink" title="EntrySet（推荐）"></a>EntrySet（推荐）</h3><p>常用的遍历方法，性能不错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//entrySet 获取key and value</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEntry</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class="line">     System.out.println(entry.getKey() + <span class="string">&quot;:&quot;</span> + entry.getValue());</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="Iterator（次之）"><a href="#Iterator（次之）" class="headerlink" title="Iterator（次之）"></a>Iterator（次之）</h3><p>在用foreach遍历map时，如果改变其大小，会报错，但如果只是删除元素，可以使用Iterator的remove方法删除元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Iterator entrySet 获取key and value</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testIterator</span><span class="params">()</span> &#123;</span><br><span class="line">  Iterator&lt;Map.Entry&lt;Integer, Integer&gt;&gt; it = map.entrySet().iterator();</span><br><span class="line">  <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">    Map.Entry&lt;Integer, Integer&gt; entry = it.next();</span><br><span class="line">    System.out.println(entry.getKey() + <span class="string">&quot;:&quot;</span> + entry.getValue());</span><br><span class="line">    <span class="comment">// it.remove(); 删除元素</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lambda（简洁）"><a href="#Lambda（简洁）" class="headerlink" title="Lambda（简洁）"></a>Lambda（简洁）</h3><p>java8提供了Lambda表达式支持，语法看起来更简洁，可以同时拿到key和value，不过，经测试，性能低于entrySet,所以更推荐用entrySet的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Lambda 获取key and value</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLambda</span><span class="params">()</span> &#123;</span><br><span class="line">   map.forEach((key, value) -&gt; &#123;</span><br><span class="line">     System.out.println(key + <span class="string">&quot;:&quot;</span> + value);</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="keySet-和-values"><a href="#keySet-和-values" class="headerlink" title="keySet 和 values"></a>keySet 和 values</h3><p>如果只需要map的key或者value，用map的keySet或values方法无疑是最方便的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// KeySet 获取key</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testKeySet</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">for</span> (Integer key : map.keySet()) &#123;</span><br><span class="line">     System.out.println(key);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// values 获取value</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testValues</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">for</span> (Integer value : map.values()) &#123;</span><br><span class="line">     System.out.println(value);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>测试一般性能顺序为：<br>KeySet ~ Values ~  entrySet &gt; Iterator &gt; Lambda</p><p>如果只是获取key，或者value，推荐使用keySet或者values方式；</p><p>如果同时需要key和value推荐使用entrySet；</p><p>如果需要在遍历过程中删除元素推荐使用Iterator；</p><p>如果需要在遍历过程中增加元素，可以新建一个临时map存放新增的元素，等遍历完毕，再把临时map放到原来的map中。</p><blockquote><p>本文参考自：<a href="https://www.cnblogs.com/zhaoguhong/p/7074597.html?utm_source=itdadao&utm_medium=referral">谈谈java中遍历Map的几种方法</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HashMap </tag>
            
            <tag> 遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是MySQL回表？（转）</title>
      <link href="/2020/10/21/%E4%BB%80%E4%B9%88%E6%98%AFMySQL%E5%9B%9E%E8%A1%A8%EF%BC%9F%EF%BC%88%E8%BD%AC%EF%BC%89-%E4%BB%80%E4%B9%88%E6%98%AFmysql%E5%9B%9E%E8%A1%A8%E8%BD%AC/"/>
      <url>/2020/10/21/%E4%BB%80%E4%B9%88%E6%98%AFMySQL%E5%9B%9E%E8%A1%A8%EF%BC%9F%EF%BC%88%E8%BD%AC%EF%BC%89-%E4%BB%80%E4%B9%88%E6%98%AFmysql%E5%9B%9E%E8%A1%A8%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<p><strong>回表</strong>就是先通过数据库索引扫描出数据所在的行，再通过行主键id取出索引中未提供的数据，即基于非主键索引的查询需要多扫描一棵索引树。<br>因此，可以通过索引先查询出id字段，再通过主键id字段，查询行中的字段数据，即通过再次查询提供MySQL查询速度。<br><img src="http://hopestation.top/upload/2020/10/image-08900c3d7dea4a57ad82b8ed7a49232e.png" alt="image.png"></p><blockquote><p>具体可以参考其他博主文章<br><a href="https://www.cnblogs.com/myseries/p/11265849.html">MySQL优化：如何避免回表查询？什么是索引覆盖？（推荐）</a><br><a href="https://www.cnblogs.com/myseries/p/11265849.html">如何避免回表查询？</a><br><a href="https://www.cnblogs.com/splendid/p/10945363.html">理解Mysql回表</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> MYSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis（二）</title>
      <link href="/2020/10/20/Redis%EF%BC%88%E4%BA%8C%EF%BC%89-redis%E4%BA%8C/"/>
      <url>/2020/10/20/Redis%EF%BC%88%E4%BA%8C%EF%BC%89-redis%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<p><strong>目录</strong><br>[TOC]</p><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><p>Redis默认有16个数据库（redis.conf里配置的）<br><img src="http://hopestation.top/upload/2020/10/image-c5a65b7b1c974cfa925a98311251d9f1.png" alt="image.png"><br>默认使用的是第0个，可以使用select来进行切换（类似mysql的use命令）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@hopestation ~]<span class="comment"># cd /usr/local/bin  </span></span><br><span class="line">[root@hopestation bin]<span class="comment"># ls  //查看当前目录下的文件</span></span><br><span class="line">redis-benchmark  redis-config</span><br><span class="line">redis-check-aof  redis-sentinel</span><br><span class="line">redis-check-rdb  redis-server   redis-cli //等...</span><br><span class="line">[root@hopestation bin]<span class="comment"># redis-cli -p 6379</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="keyword">select</span> 3  //切换数据库</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[3]&gt; keys * </span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line">127.0.0.1:6379[3]&gt; <span class="keyword">select</span> 0    //选择第0个数据库</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *  //查看所有key</span><br><span class="line">1) <span class="string">&quot;message&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get message   //查看message这个key的value</span><br><span class="line"><span class="string">&quot;zhongyuanzhuangwanle&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; dbsize   //查看db大小</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>flushdb：清空当前库的数据<br>flushall：清空所有库的数据<br><img src="http://hopestation.top/upload/2020/10/image-a1fd6ba395ba41f7bcf146db80584a2d.png" alt="image.png"></p><p>默认端口是6379</p><blockquote><p>“6379在是手机按键上MERZ对应的号码,而MERZ取自意大利歌女Alessia Merz的名字。</p></blockquote><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="Redis是单线程的"><a href="#Redis是单线程的" class="headerlink" title="Redis是单线程的"></a>Redis是单线程的</h3><ul><li>基于内存操作，CPU不是Redis的性能瓶颈，Redis的瓶颈是根据机器的内存和网络带宽，既然单线程容易实现，而且CPU不会成为瓶颈，那就顺理成章地采用单线程的方案了。（较多线程而言，也省去了很多上下文切换线程的时间）</li><li>Redis是C语言写的，官方提供的数据为10万+的QPS，完全不比同样是使用key-value存储的Memecahe差</li></ul><h3 id="Redis为什么单线程还这么快"><a href="#Redis为什么单线程还这么快" class="headerlink" title="Redis为什么单线程还这么快"></a>Redis为什么单线程还这么快</h3><ol><li>误区1：高性能的服务器一定是多线程的？</li><li>误区2：多线程（<br>CPU上下文会切换！）一定比单线程效率高<br>首先，速度比较：CPU &gt; 内存 &gt; 硬盘<br>核心：Redis是将所有的数据全部放在内存中的，是所以单线程去操作的效率就是最高的，多线程（CPU上下文会切换：耗时的操作），对于内存系统来说，如果没有上下文切换效率就是最高的！多次读写都是在一个CPU上的，在内存情况下，这是最佳的方案</li></ol><p>上面说了一堆单线程的好处，Redis6.0还是引入了多线程。。<del>真香</del></p><blockquote><p>引入原因概括：因为读写网络的read&#x2F;write系统调用在Redis执行期间占用了大部分CPU时间，如果把网络读写做成多线程的方式对性能会有很大提升。<br>具体参考<a href="https://blog.csdn.net/weixin_49930191/article/details/108079554?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.nonecase&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.nonecase">此博主文章</a></p></blockquote><h2 id="五大数据类型"><a href="#五大数据类型" class="headerlink" title="五大数据类型"></a>五大数据类型</h2><p><img src="http://hopestation.top/upload/2020/10/image-165883e7c897461da71275943d52c38a.png" alt="image.png"></p><p>全段翻译：<br>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作<strong>数据库</strong>、<strong>缓存</strong>和<strong>消息中间件</strong>。 它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）。</p><ul><li><a href="http://redisdoc.com/">Redis 命令参考</a></li><li><a href="www.redis.cn/commands.html">中文官网命令手册</a></li></ul><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys * //查看所有dkey</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> message ceshi  //set key</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> age 14</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;age&quot;</span></span><br><span class="line">2) <span class="string">&quot;message&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; exists name  // 查看key是否存在</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; exists message</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; move age 1  //移动age到1库</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;message&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="keyword">select</span> 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; keys *  //查看1库里的age</span><br><span class="line">1) <span class="string">&quot;age&quot;</span></span><br><span class="line">127.0.0.1:6379[1]&gt; get age</span><br><span class="line"><span class="string">&quot;14&quot;</span></span><br><span class="line">127.0.0.1:6379[1]&gt; expire age 10  //设过期时间</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379[1]&gt; ttl age </span><br><span class="line">//time to live 查看剩余的存活时间</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379[1]&gt; <span class="built_in">set</span> age 14</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; <span class="built_in">set</span> message ceshi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; <span class="built_in">type</span> age //查看key的类型</span><br><span class="line">string</span><br><span class="line">127.0.0.1:6379[1]&gt; <span class="built_in">type</span> message</span><br></pre></td></tr></table></figure><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[1]&gt; <span class="built_in">set</span> message ceshi //存入 message这个key</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; <span class="built_in">type</span> message</span><br><span class="line">string</span><br><span class="line">127.0.0.1:6379[1]&gt; append message _append //追加字符串，若当前key不存在，则会新建一个字符串</span><br><span class="line">(<span class="built_in">integer</span>) 12</span><br><span class="line">127.0.0.1:6379[1]&gt; get message //再次查看</span><br><span class="line"><span class="string">&quot;ceshi_append&quot;</span></span><br><span class="line">127.0.0.1:6379[1]&gt; strlen message //获得长度</span><br><span class="line">(<span class="built_in">integer</span>) 12</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##########################################################</span></span><br><span class="line">127.0.0.1:6379[1]&gt; <span class="built_in">set</span> views 0 </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; get views</span><br><span class="line"><span class="string">&quot;0&quot;</span></span><br><span class="line"><span class="comment">#可以用来计数，比如网站初始浏览量为0</span></span><br><span class="line">127.0.0.1:6379[1]&gt; incr views   <span class="comment"># 自增1 浏览量+1</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379[1]&gt; incr views</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379[1]&gt; get views</span><br><span class="line"><span class="string">&quot;3&quot;</span></span><br><span class="line">127.0.0.1:6379[1]&gt; decr views    <span class="comment"># 自减1 浏览量-1</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379[1]&gt; decr views</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379[1]&gt; incrby views 10  <span class="comment">#可以设定步长，比如 自增 10 </span></span><br><span class="line">(<span class="built_in">integer</span>) 10</span><br><span class="line">127.0.0.1:6379[1]&gt; decrby views 6   <span class="comment"># 自减6 浏览量-6</span></span><br><span class="line">(<span class="built_in">integer</span>) </span><br><span class="line"><span class="comment">################################</span></span><br><span class="line"><span class="comment"># 获取字符串的某个范围</span></span><br><span class="line">127.0.0.1:6379[1]&gt; get message</span><br><span class="line"><span class="string">&quot;ceshi_append&quot;</span></span><br><span class="line">127.0.0.1:6379[1]&gt; getrange message 0 3  <span class="comment">#截取字符串[0,3]</span></span><br><span class="line"><span class="string">&quot;cesh&quot;</span></span><br><span class="line">127.0.0.1:6379[1]&gt; getrange message 0 -1 <span class="comment">#夺取全部的字符串 和 get key是一样的</span></span><br><span class="line"><span class="string">&quot;ceshi_append&quot;</span></span><br><span class="line">127.0.0.1:6379[1]&gt; getrange name 0 3  <span class="comment"># 若没有key 返回空</span></span><br><span class="line"><span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># 替换</span></span><br><span class="line">127.0.0.1:6379[1]&gt; <span class="built_in">set</span> name 1111</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; get name </span><br><span class="line"><span class="string">&quot;1111&quot;</span></span><br><span class="line">127.0.0.1:6379[1]&gt; setrange name 2 xxx  <span class="comment"># 从第二个字符开始替换</span></span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379[1]&gt; get name </span><br><span class="line"><span class="string">&quot;11xxx&quot;</span></span><br><span class="line"><span class="comment">################################</span></span><br><span class="line"><span class="comment"># setex (set with expire) 设置过期时间</span></span><br><span class="line"><span class="comment"># setnx (set if not exist) 不存在再设置  （在分布式锁中会常常使用！）</span></span><br><span class="line">127.0.0.1:6379[1]&gt; setex message 30 <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="comment">#设置message的值为 hello，并且30秒后过期</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; ttl message</span><br><span class="line">(<span class="built_in">integer</span>) 26</span><br><span class="line">127.0.0.1:6379[1]&gt; ttl message</span><br><span class="line">(<span class="built_in">integer</span>) 24</span><br><span class="line">127.0.0.1:6379[1]&gt; get message</span><br><span class="line"><span class="string">&quot;hello&quot;</span></span><br><span class="line">127.0.0.1:6379[1]&gt; setnx mykey <span class="string">&quot;redis&quot;</span></span><br><span class="line"><span class="comment">#如果mykey不存在，则创建mykey，返回1</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379[1]&gt; keys *</span><br><span class="line">1) <span class="string">&quot;mykey&quot;</span></span><br><span class="line">127.0.0.1:6379[1]&gt; setnx mykey <span class="string">&quot;mongoDb&quot;</span></span><br><span class="line"><span class="comment">#如果mykey存在，则创建失败，返回0</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379[1]&gt; keys *</span><br><span class="line">1) <span class="string">&quot;mykey&quot;</span></span><br><span class="line">127.0.0.1:6379[1]&gt; get mykey</span><br><span class="line"><span class="string">&quot;redis&quot;</span></span><br><span class="line"><span class="comment">################################</span></span><br><span class="line"><span class="comment"># mset 同时设置多个值 若key重复，后面的设置会覆盖前面的</span></span><br><span class="line"><span class="comment"># msetnx 若key都不存在 则设置多个key（原子性的，要么一起成功，要么一起失败） </span></span><br><span class="line">127.0.0.1:6379&gt; mset k2 v1 k2 v3 k3 v3 <span class="comment"># 设置了k2,k3 (k2后面覆盖前面了的)</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;k2&quot;</span></span><br><span class="line">2) <span class="string">&quot;message&quot;</span></span><br><span class="line">3) <span class="string">&quot;k3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line"><span class="string">&quot;v3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line"><span class="string">&quot;v3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; msetnx k1 v1 k2 v2 <span class="comment"># 这里k2已经存在，但k1不存在。还是会一起失败</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;k2&quot;</span></span><br><span class="line">2) <span class="string">&quot;message&quot;</span></span><br><span class="line">3) <span class="string">&quot;k3&quot;</span></span><br><span class="line"><span class="comment"># key可以设计成 &#123;对象名&#125;:&#123;id&#125;:&#123;属性名&#125; 的形式</span></span><br><span class="line"><span class="comment"># mget 获取多个key</span></span><br><span class="line">127.0.0.1:6379&gt; mset user:1:name zhangsan user:1:age 15</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget user:1:name user:1:age </span><br><span class="line">1) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">2) <span class="string">&quot;15&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get user:1:name</span><br><span class="line"><span class="string">&quot;zhangsan&quot;</span></span><br><span class="line"><span class="comment">################################</span></span><br><span class="line"><span class="comment"># getset 返回旧值（没有返回nil），然后设置新值</span></span><br><span class="line">127.0.0.1:6379&gt; getset db redis</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get db</span><br><span class="line"><span class="string">&quot;redis&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; getset db mongoDB</span><br><span class="line"><span class="string">&quot;redis&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get db</span><br><span class="line"><span class="string">&quot;mongoDB&quot;</span></span><br><span class="line"><span class="comment">##########################################################</span></span><br></pre></td></tr></table></figure><p>String类型的使用场景：<br>value除了代表字符串，还可以代表数字！</p><ul><li>计数器</li><li>统计多单位的数量</li><li>粉丝数</li><li>对象缓存存储</li></ul><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>基本的数据类型，列表<br><img src="http://hopestation.top/upload/2020/10/image-7af0ced670ab49878c119ca862e9e299.png" alt="image.png"><br>在Redis里，可以把list完成 栈、队列、阻塞队列</p><p>所有的list命令都是用‘l’开头的，Redis不区分大小写命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##########################################################</span></span><br><span class="line"><span class="comment"># list 值可以重复</span></span><br><span class="line"><span class="comment"># lpush 从左侧添加一个值 (lpush 即 left push)  </span></span><br><span class="line"><span class="comment"># rpush 从右侧添加一个值 (rpush 即 right push)  </span></span><br><span class="line">127.0.0.1:6379&gt; lpush list one<span class="comment"># 将一个或者多个值，放在列表的头部</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; lpush list two</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; lpush list three</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1   <span class="comment"># 获取全部</span></span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 1   <span class="comment"># 获取指定的范围</span></span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; rpush list right<span class="comment"># 从右侧（尾部）插入一个值</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">4) <span class="string">&quot;right&quot;</span></span><br><span class="line"><span class="comment">################################</span></span><br><span class="line"><span class="comment"># lpop 从左侧移除一个值 (即 left  pop )</span></span><br><span class="line"><span class="comment"># rpop 从右侧移除一个值 (即 right  pop )</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list  0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">4) <span class="string">&quot;right&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lpop list</span><br><span class="line"><span class="string">&quot;three&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; rpop list</span><br><span class="line"><span class="string">&quot;right&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list  0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line"><span class="comment"># lindex 通过下标获取值 </span></span><br><span class="line">127.0.0.1:6379&gt; lindex list 0</span><br><span class="line"><span class="string">&quot;two&quot;</span></span><br><span class="line"><span class="comment"># llen 获取长度 （list length）</span></span><br><span class="line">127.0.0.1:6379&gt; llen list</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment">###############################</span></span><br><span class="line"><span class="comment"># lrem 根据key和个数 移除指定的值 （因为list的值可以重复，所以需要指定个数）</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list  0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;three&quot;</span></span><br><span class="line">3) <span class="string">&quot;two&quot;</span></span><br><span class="line">4) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrem list 1 one</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; lrange list  0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;three&quot;</span></span><br><span class="line">3) <span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrem list 2 three  <span class="comment"># 这里也可以写成1，只移除一个three</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; lrange list  0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line"><span class="comment">###############################</span></span><br><span class="line"><span class="comment"># ltrim 截取（留下）指定下标范围的值，范围外的数据被移除了</span></span><br><span class="line">127.0.0.1:6379&gt; lrange mylist 0 -1</span><br><span class="line">1) <span class="string">&quot;hello4&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello3&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello2&quot;</span></span><br><span class="line">4) <span class="string">&quot;hello1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ltrim mylist 1 2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange mylist 0 -1</span><br><span class="line">1) <span class="string">&quot;hello3&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello2&quot;</span></span><br><span class="line"><span class="comment">##########################################################</span></span><br></pre></td></tr></table></figure><hr><ul><li><a href="http://hopestation.top/tags/redis">查看Redis归档</a></li><li>上一篇：<a href="http://hopestation.top/archives/redis1">Redis（一）介绍了redis概念、安装使用 </a></li></ul><hr><p>未完待续…</p><p><strong>参考资料</strong></p><ul><li>狂神说</li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis（一）</title>
      <link href="/2020/10/17/Redis%EF%BC%88%E4%B8%80%EF%BC%89-redis%E4%B8%80/"/>
      <url>/2020/10/17/Redis%EF%BC%88%E4%B8%80%EF%BC%89-redis%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p><strong>目录</strong><br>[TOC]</p><h2 id="Redis是什么？"><a href="#Redis是什么？" class="headerlink" title="Redis是什么？"></a>Redis是什么？</h2><ul><li><a href="https://redis.io/">Redis官网</a> 、 <a href="https://www.redis.cn/">中文官网</a></li><li>Redis的全拼是<em>Remote Dictionary Server</em> ，即远程字典服务，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API；属于常用的NoSQL数据库。<br>（NoSQl：指的是非关系型的数据库。有时也称作Not Only SQL的缩写，是对不同于传统的关系型数据库的数据库管理系统的统称，NoSQL用于超大规模数据的存储。）</li></ul><h2 id="为什么要用Redis？"><a href="#为什么要用Redis？" class="headerlink" title="为什么要用Redis？"></a>为什么要用Redis？</h2><p>Redis可以完成以下功能，或者说一些功能由Redis来完成更为合适：</p><ul><li><p>缓存，对于不需要经常更改，或者更改后的结果不需要实时更新的数据。可以存放在Redis里面，以此来减轻DB的压力</p></li><li><p>排行榜，如果使用传统的关系型数据库来做这个事儿，非常的麻烦，而利用能够非常方便搞定；</p></li><li><p>计算器&#x2F;限速器，利用Redis中原子性的自增操作，我们可以统计类似用户点赞数、用户访问数等，这类操作如果用MySQL，频繁的读写会带来相当大的压力；限速器比较典型的使用场景是限制某个用户访问某个API的频率，常用的有抢购时，防止用户疯狂点击带来不必要的压力；</p></li><li><p>好友关系，利用集合的一些命令，比如求交集、并集、差集等。可以方便搞定一些共同好友、共同爱好之类的功能；</p></li><li><p>简单消息队列，除了Redis自身的发布&#x2F;订阅模式，我们也可以利用List来实现一个队列机制，比如：到货通知、邮件发送之类的需求，不需要高可靠，但是会带来非常大的DB压力，完全可以用List来完成异步解耦；</p></li><li><p>Session共享，以PHP为例，默认Session是保存在服务器的文件中，如果是集群服务，同一个用户过来可能落在不同机器上，这就会导致用户频繁登陆；采用Redis保存Session后，无论用户落在那台机器上都能够获取到对应的Session信息。</p></li></ul><h2 id="如何使用Redis？"><a href="#如何使用Redis？" class="headerlink" title="如何使用Redis？"></a>如何使用Redis？</h2><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><ul><li>Windows系统（非常简单）</li><li>Linux系统 (比较麻烦)</li></ul><h4 id="Windows系统"><a href="#Windows系统" class="headerlink" title="Windows系统"></a>Windows系统</h4><ol><li><p><a href="https://github.com/microsoftarchive/redis/releases/tag/win-3.2.100">点击下载压缩包</a>（只有5M大小）</p></li><li><p>解压后目录如下：<br><img src="http://hopestation.top/upload/2020/10/redis_install-70e71d878b5046ec90e7cd31446bcfb1.png" alt="redis_install.png"></p></li><li><p>首先双击运行redis-server.exe启动服务端，（窗口不要关闭，关闭了server就关闭了）</p></li><li><p>然后运行redis-cli.exe<br>然后就可以在命令行中练习Redis的常见命令了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ping</span><br><span class="line"><span class="built_in">set</span> google http://www.google</span><br><span class="line">append google .com</span><br><span class="line">get google</span><br><span class="line"><span class="built_in">set</span> visitors 0</span><br><span class="line">incr visitors</span><br><span class="line">incr visitors</span><br><span class="line">get visitors</span><br></pre></td></tr></table></figure></li></ol><ul><li><a href="https://how2j.cn/k/redis/redis-commands/1369.html">去How2J查看更多命令</a></li><li><a href="http://www.redis.cn/commands.html">官网命令手册</a></li></ul><h4 id="Linux系统"><a href="#Linux系统" class="headerlink" title="Linux系统"></a>Linux系统</h4><blockquote><p>我是租用的阿里云服务器，远程的linux，本地Linux同理<br>以下手动安装的方式，如果使用宝塔面板应该可以直接安装</p></blockquote><ol><li>下载<br>进入<a href="https://redis.io/">官网</a>，找到底部的<strong>Download it</strong> 点击显示的最新版本直接就能下载。<br><img src="http://hopestation.top/upload/2020/10/image-abf9ac45944f46a2bac9144344e68bf5.png" alt="image.png"></li><li>把下载文件移动到你的Linux系统上（我是通过宝塔面板上传到服务器上的，本地Linux系统就方便了）</li><li>解压，找到你的文件录取运行<code>tar -zxvf redis-6.0.8.tar.gz</code></li></ol><p><img src="http://hopestation.top/upload/2020/10/image-284cccfa7f0546899f9eb999959c9999.png" alt="image.png"><br>进入解压后的目录<br><img src="http://hopestation.top/upload/2020/10/image-3cfa35df63e948a1a1df202cc5fd26ce.png" alt="image.png"><br> 4. 安装gcc<code>yum install gcc-c++</code><br><img src="http://hopestation.top/upload/2020/10/image-81e3818f9c1d4255a7792687d2517e6a.png" alt="image.png"><br> 5. 在解压目录执行：<code>make</code>编译命令<br> <img src="http://hopestation.top/upload/2020/10/image-1cf6051aaa074dcdb6da30ec80c37319.png" alt="image.png"><br>如果最后这样显示就是编译成功了<br><img src="http://hopestation.top/upload/2020/10/image-67a76def4ea141bc9b82c66890eb5f17.png" alt="image.png"><br>如果是如下面的图，就是编译失败了<br><img src="http://hopestation.top/upload/2020/10/image-63ec70198b1f480499a575d2b563e3c5.png" alt="image.png"><br>失败的可以尝试以下两种方式解决：</p><ul><li><p>更新gcc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install centos-release-scl</span><br><span class="line">sudo yum install devtoolset-7-gcc*</span><br><span class="line">scl <span class="built_in">enable</span> devtoolset-7 bash</span><br></pre></td></tr></table></figure></li><li><p>或降低redis版本</p></li></ul><ol start="6"><li>在解压目录执行：<code>make install</code>安装命令<br><img src="http://hopestation.top/upload/2020/10/image-9ebad1c1517d4e69a777c0946eb46516.png" alt="image.png"></li><li>Redis默认安装路径 <code>/usr/local/bin</code><br><img src="http://hopestation.top/upload/2020/10/image-8df05d7cef6a453982e958de6b2d78de.png" alt="image.png"></li><li>移动配置文件并进行设置（直接贴图了）<br><img src="http://hopestation.top/upload/2020/10/image-97e2430ddcef41feb455ef6f43c471f1.png" alt="image.png"><br>编辑该文件，修改：<code>daemonize no</code> 为 <code>daemonize yes</code><br><img src="http://hopestation.top/upload/2020/10/image-0b90bdb850124ab2a1b4d074b23db4ce.png" alt="image.png"><br><img src="http://hopestation.top/upload/2020/10/image-418672be944c48db93d5f46252af4559.png" alt="image.png"><br>然后输入<code>:wq</code>退出</li><li>启动Redis<br>利用我们的配置来启动redis服务，执行<code>redis-server redis-config/redis.conf </code><br><img src="http://hopestation.top/upload/2020/10/image-dbf69877dc534f33b03e148a9b566c20.png" alt="image.png"><br>再启动redsi客户端，执行<code>redis-cli -p 6379</code><br><img src="http://hopestation.top/upload/2020/10/image-8bb6f5559fd342b7bc1dbbe950458e6d.png" alt="image.png"></li><li>常用命令<br>查看redis的进程是否开启<code># ps -ef|grep redis</code><br><img src="http://hopestation.top/upload/2020/10/image-6224ef49a536478d8c57d0e918ae2e37.png" alt="image.png"><br>关闭redis服务,再客户端输入<code>shutdown</code>,然后<code>exit</code>退出客户端就可以了<br><img src="http://hopestation.top/upload/2020/10/image-680899f5320242f09fdbf5d0ce6f8ff4.png" alt="image.png"><br>再次查看已经没有了<br><img src="http://hopestation.top/upload/2020/10/image-1e12b70f12af4272ba5c7cbf02ff8dae.png" alt="image.png"></li></ol><h3 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h3><blockquote><p>我是在Windows系统上操作的，Linux同理</p></blockquote><p>在解压目录下打开命令行，输入下面的命令：<br><code>.\redis-benchmark.exe -h localhost -p 6379 -c 10 -n 5000</code><br>测试10个并发连接，10000个请求<br><img src="http://hopestation.top/upload/2020/10/image-ba8b655484d34a538d73ea4cce5d4d7e.png" alt="image.png"><br>参数如下：<br><img src="http://hopestation.top/upload/2020/10/image-1b3f394aefb74e3094d1a11a8bb96821.png" alt="image.png"></p><hr><ul><li><a href="http://hopestation.top/tags/redis">查看Redis归档 </a></li><li>下一篇：<a href="http://hopestation.top/archives/redis2">Redis（二）介绍了Redis的常用操作，基础知识和数据类型 </a></li></ul><hr><p><strong>参考资料</strong></p><ul><li><a href="https://www.cnblogs.com/jebysun/p/9417699.html">大愚Talk：为什么要用Redis</a></li><li><a href="https://how2j.cn/">how2j</a></li><li><a href="https://space.bilibili.com/95256449?from=search&seid=13287490402742747071">狂神说</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCLoud个人总结</title>
      <link href="/2020/10/14/SpringCLoud%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-springcloud%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
      <url>/2020/10/14/SpringCLoud%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-springcloud%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近学习了<em>how2j.cn</em>的SpringCloud的教程，加上自己之前零零散散读的一些博客文章。想着做一个总结，来输出一下自己对SpringCLoud的理解。也是自己对SpringCLoud的知识的一个梳理和系统化的过程。由于自己也是在学习的过程，可能某些不是十分准确。<br> 以下是自己目前阶段对于SpringCloud的总体理解，随着深入的学习可能会在写一些具体应用的文章</p></blockquote><h3 id="传统的分布式："><a href="#传统的分布式：" class="headerlink" title="传统的分布式："></a>传统的分布式：</h3><p>主要将项目工程，数据库服务，缓存等服务部署在不同的机器上来达到高可用的状态。比如：同样的整个项目工程部署了3份到3个不同的机器，Mysql服务部署到了第4台机器。</p><h3 id="目前主流的微服务"><a href="#目前主流的微服务" class="headerlink" title="目前主流的微服务"></a>目前主流的微服务</h3><ul><li>将原来的整个项目拆分成不同的模块。比如：电商项目可以拆分成支付模块、订单模块、库存模块等。这些模块可以作为一个小项目来进行独立的开发、运维和技术选型。在部署时将这些模块作为一个个小项目独立的部署到多台机器上，比如订单模块和支付模块部署5份，库存模块部署3份等。这里可以称做这些小模块为：一个个的<em>微服务</em>。</li><li>这些微服务由SpringCLoud的<strong>Eureka</strong>注册中心来进行统一的管理，包括微服务的注册，发现。比如订单模块有5份实例可以使用，则可以用<strong>Ribbon</strong>或者<strong>Feign</strong>来进行负载均衡，比如当有1万个请求过来时，就可以将请求尽量均匀地打到这5个服务，可能A服务接受处理2300个请求，B服务处理了2000个请求等等。这时可能出现这样的情况，比如A服务挂掉了（比如A服务的机器突然关机、内存不足等情况），那么A服务就无法在继续处理发来的请求，或者B服务调用A服务的请求，这时如不进行处理就会出现服务阻塞或者页面报错的情况。这就引出了SpringCloud的另一个组件<strong>Hystrix</strong>，它就是用来解决上述问题的。上面描述的服务部署到了许多太机器，那么这些机器可能会有不同ip和端口，这时就需要网关Zuul或者GateWay来统一ip和端口访问。同时不同的服务会都会有配置文件，如果这些相同的配置，每改动一个地方都要一个一个配置文件的去改，显然太麻烦了。这个可以交由configServer来统一完成。<blockquote><p> 上面对于微服务描述了一大段。目的就是引出SpringCLoud的主要功能和实现功能的五大组件：</p></blockquote></li></ul><ol><li>Eureka（服务发现框架）<br>Eureka主要包含两个部分：</li></ol><ul><li>Eureka Server 注册中心</li><li>Eureka Client 服务提供者和消费者</li></ul><p><strong>Eureka Server</strong>：提供服务注册服务，各个节点启动后，会在Eureka Server中进行注册，包括主机与端口号、服务版本号、通讯协议等。这样EurekaServer中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观的看到。<br>Eureka服务端支持集群模式部署，首尾相连形成一个闭环即可，集群中的的不同服务注册中心通过异步模式互相复制各自的状态，这也意味着在给定的时间点每个实例关于所有服务的状态可能存在不一致的现象。<br>应用时需要在启动类上加上@EnableEurekaServer声明一个注册中心</p><p><strong>Eureka Client</strong>：主要处理服务的注册和发现。客户端服务通过注册和参数配置的方式，嵌入在客户端应用程序的代码中。在应用程序启动时，Eureka客户端向服务注册中心注册自身提供的服务，并周期性的发送心跳来更新它的服务租约。同时，他也能从服务端查询当前注册的服务信息并把它们缓存到本地并周期行的刷新服务状态。<br>应用时需要在启动类上加上@EnableDiscoveryClient或者@EnableEurekaClient表明这是一个Eureka客户端</p><p><strong>服务调用</strong>：服务消费者在获取服务清单后，通过服务名可以获取具体提供服务的实例名和该实例的元数据信息。因为有这些服务实例的详细信息，所以客户端可以根据自己的需要决定具体调用哪个实例，在Ribbon中会默认采用轮询（默认的负载均衡策略）的方式进行调用，从而实现客户端的负载均衡。</p><hr><p>未完待续 …</p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发资源总结</title>
      <link href="/2020/10/14/%E5%BC%80%E5%8F%91%E8%B5%84%E6%BA%90%E6%80%BB%E7%BB%93-%E5%BC%80%E5%8F%91%E8%B5%84%E6%BA%90%E6%80%BB%E7%BB%93/"/>
      <url>/2020/10/14/%E5%BC%80%E5%8F%91%E8%B5%84%E6%BA%90%E6%80%BB%E7%BB%93-%E5%BC%80%E5%8F%91%E8%B5%84%E6%BA%90%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="开发资源总结"><a href="#开发资源总结" class="headerlink" title="开发资源总结"></a>开发资源总结</h1><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><ul><li>IDEA</li><li>Eclipse</li><li>Vs Code</li><li>Notepad++</li><li>typora （Markdown编辑工具）</li></ul><h3 id="知识社区"><a href="#知识社区" class="headerlink" title="知识社区"></a>知识社区</h3><ul><li><a href="https://www.bilibili.com/">B站</a>（这里有许多教学视频资源）</li><li><a href="https://www.cnblogs.com/">博客园</a>（许多开发问题可以在这里解决）</li><li><a href="https://stackoverflow.com/">StackOverflow</a>（特别好的网站,就是访问比较缓慢）</li><li><a href="https://blog.csdn.net/">CSDN</a>（可以快速解决的大部分开发问题，就是复制粘贴的文章也有点多…）</li><li>简书（一些文章有深度、通俗易懂）</li><li>知乎（一些文章有深度、通俗易懂）</li><li><a href="https://www.yuque.com/">语雀</a>（里面的知识库）</li><li><a href="https://www.nowcoder.com/">牛客网</a>（面向求职者的社区）</li><li><a href="https://leetcode-cn.com/">leetcode</a>（算法练习）</li></ul><h3 id="教程网站"><a href="#教程网站" class="headerlink" title="教程网站"></a>教程网站</h3><ul><li><a href="https://how2j.cn/">How2J</a>（面向J2SE、J2EE基础教程，推荐）</li><li><a href="https://www.runoob.com/">菜鸟教程</a>（Java与相关知识的教程）</li><li><a href="https://github.com/Snailclimb/JavaGuide">JavaGuide</a>（比较进阶）</li><li><a href="https://github.com/YunaiV/SpringBoot-Labs">艿艿</a>（比较进阶）</li></ul><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><ul><li><a href="https://learner.blog.csdn.net/article/details/88926242">CSDN vue+springboot项目：白笔记</a>（细致讲解的入门项目）</li></ul><h3 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h3><ul><li>ProcessOn</li><li>百度脑图</li></ul><h3 id="博客系统"><a href="#博客系统" class="headerlink" title="博客系统"></a>博客系统</h3><ul><li>我用的是<a href="https://halo.run/">Halo</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资源 </tag>
            
            <tag> 开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElementUI的表单验证方法</title>
      <link href="/2020/10/13/ElementUI%E7%9A%84%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81%E6%96%B9%E6%B3%95-elementui%E7%9A%84%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81%E6%96%B9%E6%B3%95/"/>
      <url>/2020/10/13/ElementUI%E7%9A%84%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81%E6%96%B9%E6%B3%95-elementui%E7%9A%84%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>表单验证重点步骤：</p><ol><li>el-from，el-form-item</li><li>el-from的model，el-form-item的prop，el-form-item的model</li><li>rules的绑定</li><li>注意一个vue文件不能有多个form，否则可能只是执行最后一个from的验证</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-form :model=<span class="string">&quot;numberValidateForm&quot;</span> ref=<span class="string">&quot;numberValidateForm&quot;</span> label-width=<span class="string">&quot;100px&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;demo-ruleForm&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-form-item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">label</span>=<span class="string">&quot;年龄&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">prop</span>=<span class="string">&quot;age&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:rules</span>=<span class="string">&quot;[</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">      &#123; required: true, message: &#x27;年龄不能为空&#x27;&#125;,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">      &#123; type: &#x27;number&#x27;, message: &#x27;年龄必须为数字值&#x27;&#125;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">    ]&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;age&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;numberValidateForm.age&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submitForm(&#x27;numberValidateForm&#x27;)&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;resetForm(&#x27;numberValidateForm&#x27;)&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line">&lt;/el-form&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">numberValidateForm</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">age</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">submitForm</span>(<span class="params">formName</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">$refs</span>[formName].<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123; <span class="comment">//就是这里的valid一直是true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">if</span> (valid) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(<span class="string">&#x27;submit!&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error submit!!&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">resetForm</span>(<span class="params">formName</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">$refs</span>[formName].<span class="title function_">resetFields</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elementui </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA开启热部署</title>
      <link href="/2020/10/13/IDEA%E5%BC%80%E5%90%AF%E7%83%AD%E9%83%A8%E7%BD%B2-idea%E5%BC%80%E5%90%AF%E7%83%AD%E9%83%A8%E7%BD%B2/"/>
      <url>/2020/10/13/IDEA%E5%BC%80%E5%90%AF%E7%83%AD%E9%83%A8%E7%BD%B2-idea%E5%BC%80%E5%90%AF%E7%83%AD%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p><strong>热部署的作用：不需要完全重启项目就能使新编辑的代码生效。</strong></p><p>第一步: 设置IDEA开启项目自动编译</p><p><img src="http://hopestation.top:8090/upload/2020/10/ideabuild1-309678a1ca474150a0c7efca7fda8052.png" alt="ideabuild1.png"></p><p>第二步: 开启项目运行时自动生成</p><p>ctrl + shift + a(windows系统),command+shift+alt+&#x2F;(mac系统)</p><p>搜索命令：registry </p><p><img src="http://hopestation.top:8090/upload/2020/10/ideabuild1-6f2624bf189343f1b74d2da3e9c2c34c.png" alt="ideabuild1.png">然后勾选 compiler.automake.allow.when.app.running</p><p><img src="http://hopestation.top:8090/upload/2020/10/image-850bff3058324147b26bf943e404d10b.png" alt="image.png"></p><p>第三步：引入pom依赖</p><!--引入支持热部署的依赖--><pre><code>  &lt;dependency&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;     &lt;optional&gt;true&lt;/optional&gt; &lt;!-- 这个需要为 true 热部署才有效 --&gt;     &lt;scope&gt;runtime&lt;/scope&gt;  &lt;/dependency&gt;</code></pre><p>最后，需要<strong>重启IDEA</strong>，才能生效</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 热部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud概述</title>
      <link href="/2020/10/12/SpringCloud%E6%A6%82%E8%BF%B0-springcloud%E6%A6%82%E8%BF%B0/"/>
      <url>/2020/10/12/SpringCloud%E6%A6%82%E8%BF%B0-springcloud%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近学习了<em>how2j.cn</em>的SpringCloud的教程，加上自己之前零零散散读的一些博客文章。想着做一个总结，来输出一下自己对SpringCLoud的理解。也是自己对SpringCLoud的知识的一个梳理和系统化的过程。由于自己也是在学习的过程，可能某些不是十分准确。<br>以下是自己目前阶段对于SpringCloud的总体理解，随着深入的学习可能会在写一些具体应用的文章</p></blockquote><h3 id="传统的分布式："><a href="#传统的分布式：" class="headerlink" title="传统的分布式："></a>传统的分布式：</h3><p>主要将项目工程，数据库服务，缓存等服务部署在不同的机器上来达到高可用的状态。比如：同样的整个项目工程部署了3份到3个不同的机器，Mysql服务部署到了第4台机器。</p><h3 id="目前主流的微服务"><a href="#目前主流的微服务" class="headerlink" title="目前主流的微服务"></a>目前主流的微服务</h3><p>将原来的整个项目拆分成不同的模块。比如：电商项目可以拆分成支付模块、订单模块、库存模块等。这些模块可以作为一个小项目来进行独立的开发、运维和技术选型。在部署时将这些模块作为一个个小项目独立的部署到多台机器上，比如订单模块和支付模块部署5份，库存模块部署3份等。这里可以称做这些小模块为：一个个的微服务。<br>这些微服务由SpringCLoud的<strong>Eureka</strong>注册中心来进行统一的管理，包括微服务的注册，发现。比如订单模块有5份实例可以使用，则可以用<strong>Ribbon</strong>或者<strong>Feign</strong>来进行负载均衡，比如当有1万个请求过来时，就可以将请求尽量均匀地打到这5个服务，可能A服务接受处理2300个请求，B服务处理了2000个请求等等。这时可能出现这样的情况，比如A服务挂掉了（比如A服务的机器突然关机、内存不足等情况），那么A服务就无法在继续处理发来的请求，或者B服务调用A服务的请求，这时如不进行处理就会出现服务阻塞或者页面报错的情况。这就引出了SpringCloud的另一个组件<strong>Hystrix</strong>，它就是用来解决上述问题的。<br>SpringCloud的五大组件：</p><ol><li>Eureka（注册中心）</li></ol>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
